[
    {
        "Check": "PWR053",
        "Level": "L1",
        "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/library/aesni.c:510:5",
        "Title": "Consider applying vectorization to forall loop",
        "RelatedCodeList": null,
        "Suggestion": "Use pwdirectives to automatically optimize the code",
        "Auto-fix": [
            "* Using OpenMP pragmas (recommended):",
            "    codee-2024.1.1-linux-x86_64/bin/pwdirectives --vector omp --in-place /home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/library/aesni.c:510:5 --config mbedtls/build/compile_commands.json --json",
            "* Using Clang compiler pragmas:",
            "    codee-2024.1.1-linux-x86_64/bin/pwdirectives --vector clang --in-place /home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/library/aesni.c:510:5 --config mbedtls/build/compile_commands.json --json",
            "* Using GCC pragmas:",
            "    codee-2024.1.1-linux-x86_64/bin/pwdirectives --vector gcc --in-place /home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/library/aesni.c:510:5 --config mbedtls/build/compile_commands.json --json",
            "* Using ICC pragmas:",
            "    codee-2024.1.1-linux-x86_64/bin/pwdirectives --vector icc --in-place /home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/library/aesni.c:510:5 --config mbedtls/build/compile_commands.json --json",
            "* Using combined pragmas, for example (for GCC and Clang pragmas):",
            "    codee-2024.1.1-linux-x86_64/bin/pwdirectives --vector gcc,clang --in-place /home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/library/aesni.c:510:5 --config mbedtls/build/compile_commands.json --json"
        ],
        "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR053"
    },
    {
        "Check": "PWR053",
        "Level": "L1",
        "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/library/aesni.c:603:5",
        "Title": "Consider applying vectorization to forall loop",
        "RelatedCodeList": null,
        "Suggestion": "Use pwdirectives to automatically optimize the code",
        "Auto-fix": [
            "* Using OpenMP pragmas (recommended):",
            "    codee-2024.1.1-linux-x86_64/bin/pwdirectives --vector omp --in-place /home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/library/aesni.c:603:5 --config mbedtls/build/compile_commands.json --json",
            "* Using Clang compiler pragmas:",
            "    codee-2024.1.1-linux-x86_64/bin/pwdirectives --vector clang --in-place /home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/library/aesni.c:603:5 --config mbedtls/build/compile_commands.json --json",
            "* Using GCC pragmas:",
            "    codee-2024.1.1-linux-x86_64/bin/pwdirectives --vector gcc --in-place /home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/library/aesni.c:603:5 --config mbedtls/build/compile_commands.json --json",
            "* Using ICC pragmas:",
            "    codee-2024.1.1-linux-x86_64/bin/pwdirectives --vector icc --in-place /home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/library/aesni.c:603:5 --config mbedtls/build/compile_commands.json --json",
            "* Using combined pragmas, for example (for GCC and Clang pragmas):",
            "    codee-2024.1.1-linux-x86_64/bin/pwdirectives --vector gcc,clang --in-place /home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/library/aesni.c:603:5 --config mbedtls/build/compile_commands.json --json"
        ],
        "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR053"
    },
    {
        "Check": "PWR053",
        "Level": "L1",
        "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/library/bignum_core.c:352:9",
        "Title": "Consider applying vectorization to forall loop",
        "RelatedCodeList": null,
        "Suggestion": "Use pwdirectives to automatically optimize the code",
        "Auto-fix": [
            "* Using OpenMP pragmas (recommended):",
            "    codee-2024.1.1-linux-x86_64/bin/pwdirectives --vector omp --in-place /home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/library/bignum_core.c:352:9 --config mbedtls/build/compile_commands.json --json",
            "* Using Clang compiler pragmas:",
            "    codee-2024.1.1-linux-x86_64/bin/pwdirectives --vector clang --in-place /home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/library/bignum_core.c:352:9 --config mbedtls/build/compile_commands.json --json",
            "* Using GCC pragmas:",
            "    codee-2024.1.1-linux-x86_64/bin/pwdirectives --vector gcc --in-place /home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/library/bignum_core.c:352:9 --config mbedtls/build/compile_commands.json --json",
            "* Using ICC pragmas:",
            "    codee-2024.1.1-linux-x86_64/bin/pwdirectives --vector icc --in-place /home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/library/bignum_core.c:352:9 --config mbedtls/build/compile_commands.json --json",
            "* Using combined pragmas, for example (for GCC and Clang pragmas):",
            "    codee-2024.1.1-linux-x86_64/bin/pwdirectives --vector gcc,clang --in-place /home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/library/bignum_core.c:352:9 --config mbedtls/build/compile_commands.json --json"
        ],
        "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR053"
    },
    {
        "Check": "PWR053",
        "Level": "L1",
        "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/library/bignum_core.c:387:9",
        "Title": "Consider applying vectorization to forall loop",
        "RelatedCodeList": null,
        "Suggestion": "Use pwdirectives to automatically optimize the code",
        "Auto-fix": [
            "* Using OpenMP pragmas (recommended):",
            "    codee-2024.1.1-linux-x86_64/bin/pwdirectives --vector omp --in-place /home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/library/bignum_core.c:387:9 --config mbedtls/build/compile_commands.json --json",
            "* Using Clang compiler pragmas:",
            "    codee-2024.1.1-linux-x86_64/bin/pwdirectives --vector clang --in-place /home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/library/bignum_core.c:387:9 --config mbedtls/build/compile_commands.json --json",
            "* Using GCC pragmas:",
            "    codee-2024.1.1-linux-x86_64/bin/pwdirectives --vector gcc --in-place /home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/library/bignum_core.c:387:9 --config mbedtls/build/compile_commands.json --json",
            "* Using ICC pragmas:",
            "    codee-2024.1.1-linux-x86_64/bin/pwdirectives --vector icc --in-place /home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/library/bignum_core.c:387:9 --config mbedtls/build/compile_commands.json --json",
            "* Using combined pragmas, for example (for GCC and Clang pragmas):",
            "    codee-2024.1.1-linux-x86_64/bin/pwdirectives --vector gcc,clang --in-place /home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/library/bignum_core.c:387:9 --config mbedtls/build/compile_commands.json --json"
        ],
        "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR053"
    },
    {
        "Check": "PWR053",
        "Level": "L1",
        "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/library/cipher.c:836:5",
        "Title": "Consider applying vectorization to forall loop",
        "RelatedCodeList": null,
        "Suggestion": "Use pwdirectives to automatically optimize the code",
        "Auto-fix": [
            "* Using OpenMP pragmas (recommended):",
            "    codee-2024.1.1-linux-x86_64/bin/pwdirectives --vector omp --in-place /home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/library/cipher.c:836:5 --config mbedtls/build/compile_commands.json --json",
            "* Using Clang compiler pragmas:",
            "    codee-2024.1.1-linux-x86_64/bin/pwdirectives --vector clang --in-place /home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/library/cipher.c:836:5 --config mbedtls/build/compile_commands.json --json",
            "* Using GCC pragmas:",
            "    codee-2024.1.1-linux-x86_64/bin/pwdirectives --vector gcc --in-place /home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/library/cipher.c:836:5 --config mbedtls/build/compile_commands.json --json",
            "* Using ICC pragmas:",
            "    codee-2024.1.1-linux-x86_64/bin/pwdirectives --vector icc --in-place /home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/library/cipher.c:836:5 --config mbedtls/build/compile_commands.json --json",
            "* Using combined pragmas, for example (for GCC and Clang pragmas):",
            "    codee-2024.1.1-linux-x86_64/bin/pwdirectives --vector gcc,clang --in-place /home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/library/cipher.c:836:5 --config mbedtls/build/compile_commands.json --json"
        ],
        "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR053"
    },
    {
        "Check": "PWR053",
        "Level": "L1",
        "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/library/cipher.c:881:5",
        "Title": "Consider applying vectorization to forall loop",
        "RelatedCodeList": null,
        "Suggestion": "Use pwdirectives to automatically optimize the code",
        "Auto-fix": [
            "* Using OpenMP pragmas (recommended):",
            "    codee-2024.1.1-linux-x86_64/bin/pwdirectives --vector omp --in-place /home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/library/cipher.c:881:5 --config mbedtls/build/compile_commands.json --json",
            "* Using Clang compiler pragmas:",
            "    codee-2024.1.1-linux-x86_64/bin/pwdirectives --vector clang --in-place /home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/library/cipher.c:881:5 --config mbedtls/build/compile_commands.json --json",
            "* Using GCC pragmas:",
            "    codee-2024.1.1-linux-x86_64/bin/pwdirectives --vector gcc --in-place /home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/library/cipher.c:881:5 --config mbedtls/build/compile_commands.json --json",
            "* Using ICC pragmas:",
            "    codee-2024.1.1-linux-x86_64/bin/pwdirectives --vector icc --in-place /home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/library/cipher.c:881:5 --config mbedtls/build/compile_commands.json --json",
            "* Using combined pragmas, for example (for GCC and Clang pragmas):",
            "    codee-2024.1.1-linux-x86_64/bin/pwdirectives --vector gcc,clang --in-place /home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/library/cipher.c:881:5 --config mbedtls/build/compile_commands.json --json"
        ],
        "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR053"
    },
    {
        "Check": "PWR053",
        "Level": "L1",
        "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/library/cipher.c:924:5",
        "Title": "Consider applying vectorization to forall loop",
        "RelatedCodeList": null,
        "Suggestion": "Use pwdirectives to automatically optimize the code",
        "Auto-fix": [
            "* Using OpenMP pragmas (recommended):",
            "    codee-2024.1.1-linux-x86_64/bin/pwdirectives --vector omp --in-place /home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/library/cipher.c:924:5 --config mbedtls/build/compile_commands.json --json",
            "* Using Clang compiler pragmas:",
            "    codee-2024.1.1-linux-x86_64/bin/pwdirectives --vector clang --in-place /home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/library/cipher.c:924:5 --config mbedtls/build/compile_commands.json --json",
            "* Using GCC pragmas:",
            "    codee-2024.1.1-linux-x86_64/bin/pwdirectives --vector gcc --in-place /home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/library/cipher.c:924:5 --config mbedtls/build/compile_commands.json --json",
            "* Using ICC pragmas:",
            "    codee-2024.1.1-linux-x86_64/bin/pwdirectives --vector icc --in-place /home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/library/cipher.c:924:5 --config mbedtls/build/compile_commands.json --json",
            "* Using combined pragmas, for example (for GCC and Clang pragmas):",
            "    codee-2024.1.1-linux-x86_64/bin/pwdirectives --vector gcc,clang --in-place /home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/library/cipher.c:924:5 --config mbedtls/build/compile_commands.json --json"
        ],
        "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR053"
    },
    {
        "Check": "PWR053",
        "Level": "L1",
        "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/library/entropy.c:641:9",
        "Title": "Consider applying vectorization to forall loop",
        "RelatedCodeList": null,
        "Suggestion": "Use pwdirectives to automatically optimize the code",
        "Auto-fix": [
            "* Using OpenMP pragmas (recommended):",
            "    codee-2024.1.1-linux-x86_64/bin/pwdirectives --vector omp --in-place /home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/library/entropy.c:641:9 --config mbedtls/build/compile_commands.json --json",
            "* Using Clang compiler pragmas:",
            "    codee-2024.1.1-linux-x86_64/bin/pwdirectives --vector clang --in-place /home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/library/entropy.c:641:9 --config mbedtls/build/compile_commands.json --json",
            "* Using GCC pragmas:",
            "    codee-2024.1.1-linux-x86_64/bin/pwdirectives --vector gcc --in-place /home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/library/entropy.c:641:9 --config mbedtls/build/compile_commands.json --json",
            "* Using ICC pragmas:",
            "    codee-2024.1.1-linux-x86_64/bin/pwdirectives --vector icc --in-place /home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/library/entropy.c:641:9 --config mbedtls/build/compile_commands.json --json",
            "* Using combined pragmas, for example (for GCC and Clang pragmas):",
            "    codee-2024.1.1-linux-x86_64/bin/pwdirectives --vector gcc,clang --in-place /home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/library/entropy.c:641:9 --config mbedtls/build/compile_commands.json --json"
        ],
        "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR053"
    },
    {
        "Check": "PWR053",
        "Level": "L1",
        "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/library/nist_kw.c:116:5",
        "Title": "Consider applying vectorization to forall loop",
        "RelatedCodeList": null,
        "Suggestion": "Use pwdirectives to automatically optimize the code",
        "Auto-fix": [
            "* Using OpenMP pragmas (recommended):",
            "    codee-2024.1.1-linux-x86_64/bin/pwdirectives --vector omp --in-place /home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/library/nist_kw.c:116:5 --config mbedtls/build/compile_commands.json --json",
            "* Using Clang compiler pragmas:",
            "    codee-2024.1.1-linux-x86_64/bin/pwdirectives --vector clang --in-place /home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/library/nist_kw.c:116:5 --config mbedtls/build/compile_commands.json --json",
            "* Using GCC pragmas:",
            "    codee-2024.1.1-linux-x86_64/bin/pwdirectives --vector gcc --in-place /home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/library/nist_kw.c:116:5 --config mbedtls/build/compile_commands.json --json",
            "* Using ICC pragmas:",
            "    codee-2024.1.1-linux-x86_64/bin/pwdirectives --vector icc --in-place /home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/library/nist_kw.c:116:5 --config mbedtls/build/compile_commands.json --json",
            "* Using combined pragmas, for example (for GCC and Clang pragmas):",
            "    codee-2024.1.1-linux-x86_64/bin/pwdirectives --vector gcc,clang --in-place /home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/library/nist_kw.c:116:5 --config mbedtls/build/compile_commands.json --json"
        ],
        "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR053"
    },
    {
        "Check": "PWR053",
        "Level": "L1",
        "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/library/pkcs12.c:98:5",
        "Title": "Consider applying vectorization to forall loop",
        "RelatedCodeList": null,
        "Suggestion": "Use pwdirectives to automatically optimize the code",
        "Auto-fix": [
            "* Using OpenMP pragmas (recommended):",
            "    codee-2024.1.1-linux-x86_64/bin/pwdirectives --vector omp --in-place /home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/library/pkcs12.c:98:5 --config mbedtls/build/compile_commands.json --json",
            "* Using Clang compiler pragmas:",
            "    codee-2024.1.1-linux-x86_64/bin/pwdirectives --vector clang --in-place /home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/library/pkcs12.c:98:5 --config mbedtls/build/compile_commands.json --json",
            "* Using GCC pragmas:",
            "    codee-2024.1.1-linux-x86_64/bin/pwdirectives --vector gcc --in-place /home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/library/pkcs12.c:98:5 --config mbedtls/build/compile_commands.json --json",
            "* Using ICC pragmas:",
            "    codee-2024.1.1-linux-x86_64/bin/pwdirectives --vector icc --in-place /home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/library/pkcs12.c:98:5 --config mbedtls/build/compile_commands.json --json",
            "* Using combined pragmas, for example (for GCC and Clang pragmas):",
            "    codee-2024.1.1-linux-x86_64/bin/pwdirectives --vector gcc,clang --in-place /home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/library/pkcs12.c:98:5 --config mbedtls/build/compile_commands.json --json"
        ],
        "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR053"
    },
    {
        "Check": "PWR053",
        "Level": "L1",
        "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/library/psa_crypto_mac.c:78:5",
        "Title": "Consider applying vectorization to forall loop",
        "RelatedCodeList": null,
        "Suggestion": "Use pwdirectives to automatically optimize the code",
        "Auto-fix": [
            "* Using OpenMP pragmas (recommended):",
            "    codee-2024.1.1-linux-x86_64/bin/pwdirectives --vector omp --in-place /home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/library/psa_crypto_mac.c:78:5 --config mbedtls/build/compile_commands.json --json",
            "* Using Clang compiler pragmas:",
            "    codee-2024.1.1-linux-x86_64/bin/pwdirectives --vector clang --in-place /home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/library/psa_crypto_mac.c:78:5 --config mbedtls/build/compile_commands.json --json",
            "* Using GCC pragmas:",
            "    codee-2024.1.1-linux-x86_64/bin/pwdirectives --vector gcc --in-place /home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/library/psa_crypto_mac.c:78:5 --config mbedtls/build/compile_commands.json --json",
            "* Using ICC pragmas:",
            "    codee-2024.1.1-linux-x86_64/bin/pwdirectives --vector icc --in-place /home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/library/psa_crypto_mac.c:78:5 --config mbedtls/build/compile_commands.json --json",
            "* Using combined pragmas, for example (for GCC and Clang pragmas):",
            "    codee-2024.1.1-linux-x86_64/bin/pwdirectives --vector gcc,clang --in-place /home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/library/psa_crypto_mac.c:78:5 --config mbedtls/build/compile_commands.json --json"
        ],
        "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR053"
    },
    {
        "Check": "PWR053",
        "Level": "L1",
        "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/library/psa_crypto_mac.c:85:5",
        "Title": "Consider applying vectorization to forall loop",
        "RelatedCodeList": null,
        "Suggestion": "Use pwdirectives to automatically optimize the code",
        "Auto-fix": [
            "* Using OpenMP pragmas (recommended):",
            "    codee-2024.1.1-linux-x86_64/bin/pwdirectives --vector omp --in-place /home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/library/psa_crypto_mac.c:85:5 --config mbedtls/build/compile_commands.json --json",
            "* Using Clang compiler pragmas:",
            "    codee-2024.1.1-linux-x86_64/bin/pwdirectives --vector clang --in-place /home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/library/psa_crypto_mac.c:85:5 --config mbedtls/build/compile_commands.json --json",
            "* Using GCC pragmas:",
            "    codee-2024.1.1-linux-x86_64/bin/pwdirectives --vector gcc --in-place /home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/library/psa_crypto_mac.c:85:5 --config mbedtls/build/compile_commands.json --json",
            "* Using ICC pragmas:",
            "    codee-2024.1.1-linux-x86_64/bin/pwdirectives --vector icc --in-place /home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/library/psa_crypto_mac.c:85:5 --config mbedtls/build/compile_commands.json --json",
            "* Using combined pragmas, for example (for GCC and Clang pragmas):",
            "    codee-2024.1.1-linux-x86_64/bin/pwdirectives --vector gcc,clang --in-place /home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/library/psa_crypto_mac.c:85:5 --config mbedtls/build/compile_commands.json --json"
        ],
        "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR053"
    },
    {
        "Check": "PWR053",
        "Level": "L1",
        "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/library/ssl_tls.c:6364:9",
        "Title": "Consider applying vectorization to forall loop",
        "RelatedCodeList": null,
        "Suggestion": "Use pwdirectives to automatically optimize the code",
        "Auto-fix": [
            "* Using OpenMP pragmas (recommended):",
            "    codee-2024.1.1-linux-x86_64/bin/pwdirectives --vector omp --in-place /home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/library/ssl_tls.c:6364:9 --config mbedtls/build/compile_commands.json --json",
            "* Using Clang compiler pragmas:",
            "    codee-2024.1.1-linux-x86_64/bin/pwdirectives --vector clang --in-place /home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/library/ssl_tls.c:6364:9 --config mbedtls/build/compile_commands.json --json",
            "* Using GCC pragmas:",
            "    codee-2024.1.1-linux-x86_64/bin/pwdirectives --vector gcc --in-place /home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/library/ssl_tls.c:6364:9 --config mbedtls/build/compile_commands.json --json",
            "* Using ICC pragmas:",
            "    codee-2024.1.1-linux-x86_64/bin/pwdirectives --vector icc --in-place /home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/library/ssl_tls.c:6364:9 --config mbedtls/build/compile_commands.json --json",
            "* Using combined pragmas, for example (for GCC and Clang pragmas):",
            "    codee-2024.1.1-linux-x86_64/bin/pwdirectives --vector gcc,clang --in-place /home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/library/ssl_tls.c:6364:9 --config mbedtls/build/compile_commands.json --json"
        ],
        "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR053"
    },
    {
        "Check": "PWR053",
        "Level": "L1",
        "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/programs/aes/crypt_and_hash.c:241:9",
        "Title": "Consider applying vectorization to forall loop",
        "RelatedCodeList": null,
        "Suggestion": "Use pwdirectives to automatically optimize the code",
        "Auto-fix": [
            "* Using OpenMP pragmas (recommended):",
            "    codee-2024.1.1-linux-x86_64/bin/pwdirectives --vector omp --in-place /home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/programs/aes/crypt_and_hash.c:241:9 --config mbedtls/build/compile_commands.json --json",
            "* Using Clang compiler pragmas:",
            "    codee-2024.1.1-linux-x86_64/bin/pwdirectives --vector clang --in-place /home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/programs/aes/crypt_and_hash.c:241:9 --config mbedtls/build/compile_commands.json --json",
            "* Using GCC pragmas:",
            "    codee-2024.1.1-linux-x86_64/bin/pwdirectives --vector gcc --in-place /home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/programs/aes/crypt_and_hash.c:241:9 --config mbedtls/build/compile_commands.json --json",
            "* Using ICC pragmas:",
            "    codee-2024.1.1-linux-x86_64/bin/pwdirectives --vector icc --in-place /home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/programs/aes/crypt_and_hash.c:241:9 --config mbedtls/build/compile_commands.json --json",
            "* Using combined pragmas, for example (for GCC and Clang pragmas):",
            "    codee-2024.1.1-linux-x86_64/bin/pwdirectives --vector gcc,clang --in-place /home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/programs/aes/crypt_and_hash.c:241:9 --config mbedtls/build/compile_commands.json --json"
        ],
        "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR053"
    },
    {
        "Check": "PWR054",
        "Level": "L1",
        "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/library/lmots.c:89:5",
        "Title": "Consider applying vectorization to scalar reduction loop",
        "RelatedCodeList": null,
        "Suggestion": "Use pwdirectives to automatically optimize the code",
        "Auto-fix": [
            "* Using OpenMP pragmas (recommended):",
            "    codee-2024.1.1-linux-x86_64/bin/pwdirectives --vector omp --in-place /home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/library/lmots.c:89:5 --config mbedtls/build/compile_commands.json --json",
            "* Using Clang compiler pragmas:",
            "    codee-2024.1.1-linux-x86_64/bin/pwdirectives --vector clang --in-place /home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/library/lmots.c:89:5 --config mbedtls/build/compile_commands.json --json",
            "* Using GCC pragmas:",
            "    codee-2024.1.1-linux-x86_64/bin/pwdirectives --vector gcc --in-place /home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/library/lmots.c:89:5 --config mbedtls/build/compile_commands.json --json",
            "* Using ICC pragmas:",
            "    codee-2024.1.1-linux-x86_64/bin/pwdirectives --vector icc --in-place /home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/library/lmots.c:89:5 --config mbedtls/build/compile_commands.json --json",
            "* Using combined pragmas, for example (for GCC and Clang pragmas):",
            "    codee-2024.1.1-linux-x86_64/bin/pwdirectives --vector gcc,clang --in-place /home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/library/lmots.c:89:5 --config mbedtls/build/compile_commands.json --json"
        ],
        "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR054"
    },
    {
        "Check": "PWR054",
        "Level": "L1",
        "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/library/oid.c:1055:5",
        "Title": "Consider applying vectorization to scalar reduction loop",
        "RelatedCodeList": null,
        "Suggestion": "Use pwdirectives to automatically optimize the code",
        "Auto-fix": [
            "* Using OpenMP pragmas (recommended):",
            "    codee-2024.1.1-linux-x86_64/bin/pwdirectives --vector omp --in-place /home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/library/oid.c:1055:5 --config mbedtls/build/compile_commands.json --json",
            "* Using Clang compiler pragmas:",
            "    codee-2024.1.1-linux-x86_64/bin/pwdirectives --vector clang --in-place /home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/library/oid.c:1055:5 --config mbedtls/build/compile_commands.json --json",
            "* Using GCC pragmas:",
            "    codee-2024.1.1-linux-x86_64/bin/pwdirectives --vector gcc --in-place /home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/library/oid.c:1055:5 --config mbedtls/build/compile_commands.json --json",
            "* Using ICC pragmas:",
            "    codee-2024.1.1-linux-x86_64/bin/pwdirectives --vector icc --in-place /home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/library/oid.c:1055:5 --config mbedtls/build/compile_commands.json --json",
            "* Using combined pragmas, for example (for GCC and Clang pragmas):",
            "    codee-2024.1.1-linux-x86_64/bin/pwdirectives --vector gcc,clang --in-place /home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/library/oid.c:1055:5 --config mbedtls/build/compile_commands.json --json"
        ],
        "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR054"
    }
]
