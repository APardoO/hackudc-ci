{
  "Analysis": {
    "ElapsedMillis": 36229,
    "CompilerFlags": ""
  },
  "Checks": [
    {
      "Check": "PWR003",
      "Level": "L1",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/tests/src/psa_crypto_helpers.c:125:1",
      "Title": "Explicitly declare pure functions",
      "RelatedCodeList": null,
      "Suggestion": "Consider prepending '__attribute__((__const__))' to the declaration of the const function 'mbedtls_test_update_key_usage_flags' (GCC-compatible only)",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR003"
    },
    {
      "Check": "PWR003",
      "Level": "L1",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/tests/src/psa_exercise_key.c:270:1",
      "Title": "Explicitly declare pure functions",
      "RelatedCodeList": null,
      "Suggestion": "Consider prepending '__attribute__((__const__))' to the declaration of the const function 'can_sign_or_verify_message' (GCC-compatible only)",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR003"
    },
    {
      "Check": "PWR003",
      "Level": "L1",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/tests/src/psa_exercise_key.c:974:1",
      "Title": "Explicitly declare pure functions",
      "RelatedCodeList": null,
      "Suggestion": "Consider prepending '__attribute__((__const__))' to the declaration of the const function 'mbedtls_test_psa_usage_to_exercise' (GCC-compatible only)",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR003"
    },
    {
      "Check": "PWR003",
      "Level": "L1",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/tests/src/test_helpers/ssl_helpers.c:1043:1",
      "Title": "Explicitly declare pure functions",
      "RelatedCodeList": null,
      "Suggestion": "Consider prepending '__attribute__((__const__))' to the declaration of the const function 'psk_dummy_callback' (GCC-compatible only)",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR003"
    },
    {
      "Check": "PWR003",
      "Level": "L1",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/library/aes.c:535:1",
      "Title": "Explicitly declare pure functions",
      "RelatedCodeList": null,
      "Suggestion": "Consider prepending '__attribute__((__const__))' to the declaration of the const function 'mbedtls_aes_rk_offset' (GCC-compatible only)",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR003"
    },
    {
      "Check": "PWR003",
      "Level": "L1",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/library/bignum.c:345:1",
      "Title": "Explicitly declare pure functions",
      "RelatedCodeList": null,
      "Suggestion": "Consider prepending '__attribute__((__const__))' to the declaration of the const function 'mpi_sint_abs' (GCC-compatible only)",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR003"
    },
    {
      "Check": "PWR003",
      "Level": "L1",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/library/bignum_core.c:24:1",
      "Title": "Explicitly declare pure functions",
      "RelatedCodeList": null,
      "Suggestion": "Consider prepending '__attribute__((__const__))' to the declaration of the const function 'mbedtls_mpi_core_clz' (GCC-compatible only)",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR003"
    },
    {
      "Check": "PWR003",
      "Level": "L1",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/library/bignum_core.c:68:1",
      "Title": "Explicitly declare pure functions",
      "RelatedCodeList": null,
      "Suggestion": "Consider prepending '__attribute__((__const__))' to the declaration of the const function 'mpi_bigendian_to_host' (GCC-compatible only)",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR003"
    },
    {
      "Check": "PWR003",
      "Level": "L1",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/library/bignum_core.c:695:1",
      "Title": "Explicitly declare pure functions",
      "RelatedCodeList": null,
      "Suggestion": "Consider prepending '__attribute__((__const__))' to the declaration of the const function 'exp_mod_get_window_size' (GCC-compatible only)",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR003"
    },
    {
      "Check": "PWR003",
      "Level": "L1",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/library/bignum_core.c:709:1",
      "Title": "Explicitly declare pure functions",
      "RelatedCodeList": null,
      "Suggestion": "Consider prepending '__attribute__((__const__))' to the declaration of the const function 'mbedtls_mpi_core_exp_mod_working_limbs' (GCC-compatible only)",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR003"
    },
    {
      "Check": "PWR003",
      "Level": "L1",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/library/ctr_drbg.c:515:1",
      "Title": "Explicitly declare pure functions",
      "RelatedCodeList": null,
      "Suggestion": "Consider prepending '__attribute__((__const__))' to the declaration of the const function 'good_nonce_len' (GCC-compatible only)",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR003"
    },
    {
      "Check": "PWR003",
      "Level": "L1",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/library/ecdh.c:39:1",
      "Title": "Explicitly declare pure functions",
      "RelatedCodeList": null,
      "Suggestion": "Consider prepending '__attribute__((__const__))' to the declaration of the const function 'mbedtls_ecdh_can_do' (GCC-compatible only)",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR003"
    },
    {
      "Check": "PWR003",
      "Level": "L1",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/library/oid.c:1008:1",
      "Title": "Explicitly declare pure functions",
      "RelatedCodeList": null,
      "Suggestion": "Consider prepending '__attribute__((__const__))' to the declaration of the const function 'oid_subidentifier_num_bytes' (GCC-compatible only)",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR003"
    },
    {
      "Check": "PWR003",
      "Level": "L1",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/library/pk_wrap.c:52:1",
      "Title": "Explicitly declare pure functions",
      "RelatedCodeList": null,
      "Suggestion": "Consider prepending '__attribute__((__const__))' to the declaration of the const function 'rsa_can_do' (GCC-compatible only)",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR003"
    },
    {
      "Check": "PWR003",
      "Level": "L1",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/library/pk_wrap.c:507:1",
      "Title": "Explicitly declare pure functions",
      "RelatedCodeList": null,
      "Suggestion": "Consider prepending '__attribute__((__const__))' to the declaration of the const function 'eckey_can_do' (GCC-compatible only)",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR003"
    },
    {
      "Check": "PWR003",
      "Level": "L1",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/library/pk_wrap.c:1139:1",
      "Title": "Explicitly declare pure functions",
      "RelatedCodeList": null,
      "Suggestion": "Consider prepending '__attribute__((__const__))' to the declaration of the const function 'eckeydh_can_do' (GCC-compatible only)",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR003"
    },
    {
      "Check": "PWR003",
      "Level": "L1",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/library/pk_wrap.c:1170:1",
      "Title": "Explicitly declare pure functions",
      "RelatedCodeList": null,
      "Suggestion": "Consider prepending '__attribute__((__const__))' to the declaration of the const function 'ecdsa_can_do' (GCC-compatible only)",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR003"
    },
    {
      "Check": "PWR003",
      "Level": "L1",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/library/pk_wrap.c:1268:1",
      "Title": "Explicitly declare pure functions",
      "RelatedCodeList": null,
      "Suggestion": "Consider prepending '__attribute__((__const__))' to the declaration of the const function 'rsa_alt_can_do' (GCC-compatible only)",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR003"
    },
    {
      "Check": "PWR003",
      "Level": "L1",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/library/pkparse.c:381:1",
      "Title": "Explicitly declare pure functions",
      "RelatedCodeList": null,
      "Suggestion": "Consider prepending '__attribute__((__const__))' to the declaration of the const function 'pk_ecc_tag_is_specified_ec_domain' (GCC-compatible only)",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR003"
    },
    {
      "Check": "PWR003",
      "Level": "L1",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/library/platform.c:386:1",
      "Title": "Explicitly declare pure functions",
      "RelatedCodeList": null,
      "Suggestion": "Consider prepending '__attribute__((__const__))' to the declaration of the const function 'mbedtls_platform_setup' (GCC-compatible only)",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR003"
    },
    {
      "Check": "PWR003",
      "Level": "L1",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/library/platform.c:396:1",
      "Title": "Explicitly declare pure functions",
      "RelatedCodeList": null,
      "Suggestion": "Consider prepending '__attribute__((__const__))' to the declaration of the const function 'mbedtls_platform_teardown' (GCC-compatible only)",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR003"
    },
    {
      "Check": "PWR003",
      "Level": "L1",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/library/poly1305.c:46:1",
      "Title": "Explicitly declare pure functions",
      "RelatedCodeList": null,
      "Suggestion": "Consider prepending '__attribute__((__const__))' to the declaration of the const function 'mul64' (GCC-compatible only)",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR003"
    },
    {
      "Check": "PWR003",
      "Level": "L1",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/library/psa_crypto.c:85:1",
      "Title": "Explicitly declare pure functions",
      "RelatedCodeList": null,
      "Suggestion": "Consider prepending '__attribute__((__const__))' to the declaration of the const function 'key_type_is_raw_bytes' (GCC-compatible only)",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR003"
    },
    {
      "Check": "PWR003",
      "Level": "L1",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/library/psa_crypto.c:508:1",
      "Title": "Explicitly declare pure functions",
      "RelatedCodeList": null,
      "Suggestion": "Consider prepending '__attribute__((__const__))' to the declaration of the const function 'psa_mac_key_can_do' (GCC-compatible only)",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR003"
    },
    {
      "Check": "PWR003",
      "Level": "L1",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/library/psa_crypto.c:641:1",
      "Title": "Explicitly declare pure functions",
      "RelatedCodeList": null,
      "Suggestion": "Consider prepending '__attribute__((__const__))' to the declaration of the const function 'psa_key_policy_algorithm_intersection' (GCC-compatible only)",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR003"
    },
    {
      "Check": "PWR003",
      "Level": "L1",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/library/psa_crypto.c:740:1",
      "Title": "Explicitly declare pure functions",
      "RelatedCodeList": null,
      "Suggestion": "Consider prepending '__attribute__((__const__))' to the declaration of the const function 'psa_key_algorithm_permits' (GCC-compatible only)",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR003"
    },
    {
      "Check": "PWR003",
      "Level": "L1",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/library/psa_crypto.c:2767:1",
      "Title": "Explicitly declare pure functions",
      "RelatedCodeList": null,
      "Suggestion": "Consider prepending '__attribute__((__const__))' to the declaration of the const function 'psa_sign_verify_check_alg' (GCC-compatible only)",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR003"
    },
    {
      "Check": "PWR003",
      "Level": "L1",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/library/psa_crypto.c:3538:1",
      "Title": "Explicitly declare pure functions",
      "RelatedCodeList": null,
      "Suggestion": "Consider prepending '__attribute__((__const__))' to the declaration of the const function 'mbedtls_psa_interruptible_set_max_ops' (GCC-compatible only)",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR003"
    },
    {
      "Check": "PWR003",
      "Level": "L1",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/library/psa_crypto.c:3559:1",
      "Title": "Explicitly declare pure functions",
      "RelatedCodeList": null,
      "Suggestion": "Consider prepending '__attribute__((__const__))' to the declaration of the const function 'mbedtls_psa_sign_hash_get_num_ops' (GCC-compatible only)",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR003"
    },
    {
      "Check": "PWR003",
      "Level": "L1",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/library/psa_crypto.c:3575:1",
      "Title": "Explicitly declare pure functions",
      "RelatedCodeList": null,
      "Suggestion": "Consider prepending '__attribute__((__const__))' to the declaration of the const function 'mbedtls_psa_verify_hash_get_num_ops' (GCC-compatible only)",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR003"
    },
    {
      "Check": "PWR003",
      "Level": "L1",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/library/psa_crypto.c:3665:1",
      "Title": "Explicitly declare pure functions",
      "RelatedCodeList": null,
      "Suggestion": "Consider prepending '__attribute__((__const__))' to the declaration of the const function 'mbedtls_psa_sign_hash_complete' (GCC-compatible only)",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR003"
    },
    {
      "Check": "PWR003",
      "Level": "L1",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/library/psa_crypto.c:3773:1",
      "Title": "Explicitly declare pure functions",
      "RelatedCodeList": null,
      "Suggestion": "Consider prepending '__attribute__((__const__))' to the declaration of the const function 'mbedtls_psa_sign_hash_abort' (GCC-compatible only)",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR003"
    },
    {
      "Check": "PWR003",
      "Level": "L1",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/library/psa_crypto.c:3909:1",
      "Title": "Explicitly declare pure functions",
      "RelatedCodeList": null,
      "Suggestion": "Consider prepending '__attribute__((__const__))' to the declaration of the const function 'mbedtls_psa_verify_hash_complete' (GCC-compatible only)",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR003"
    },
    {
      "Check": "PWR003",
      "Level": "L1",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/library/psa_crypto.c:3946:1",
      "Title": "Explicitly declare pure functions",
      "RelatedCodeList": null,
      "Suggestion": "Consider prepending '__attribute__((__const__))' to the declaration of the const function 'mbedtls_psa_verify_hash_abort' (GCC-compatible only)",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR003"
    },
    {
      "Check": "PWR003",
      "Level": "L1",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/library/psa_crypto.c:4372:1",
      "Title": "Explicitly declare pure functions",
      "RelatedCodeList": null,
      "Suggestion": "Consider prepending '__attribute__((__const__))' to the declaration of the const function 'psa_aead_get_base_algorithm' (GCC-compatible only)",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR003"
    },
    {
      "Check": "PWR003",
      "Level": "L1",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/library/psa_crypto.c:4421:1",
      "Title": "Explicitly declare pure functions",
      "RelatedCodeList": null,
      "Suggestion": "Consider prepending '__attribute__((__const__))' to the declaration of the const function 'psa_aead_check_algorithm' (GCC-compatible only)",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR003"
    },
    {
      "Check": "PWR003",
      "Level": "L1",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/library/psa_crypto.c:6080:1",
      "Title": "Explicitly declare pure functions",
      "RelatedCodeList": null,
      "Suggestion": "Consider prepending '__attribute__((__const__))' to the declaration of the const function 'is_kdf_alg_supported' (GCC-compatible only)",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR003"
    },
    {
      "Check": "PWR003",
      "Level": "L1",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/library/psa_crypto.c:6236:1",
      "Title": "Explicitly declare pure functions",
      "RelatedCodeList": null,
      "Suggestion": "Consider prepending '__attribute__((__const__))' to the declaration of the const function 'psa_key_agreement_try_support' (GCC-compatible only)",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR003"
    },
    {
      "Check": "PWR003",
      "Level": "L1",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/library/psa_crypto.c:6252:1",
      "Title": "Explicitly declare pure functions",
      "RelatedCodeList": null,
      "Suggestion": "Consider prepending '__attribute__((__const__))' to the declaration of the const function 'psa_key_derivation_allows_free_form_secret_input' (GCC-compatible only)",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR003"
    },
    {
      "Check": "PWR003",
      "Level": "L1",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/library/psa_crypto_slot_management.c:37:1",
      "Title": "Explicitly declare pure functions",
      "RelatedCodeList": null,
      "Suggestion": "Consider prepending '__attribute__((__const__))' to the declaration of the const function 'psa_is_valid_key_id' (GCC-compatible only)",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR003"
    },
    {
      "Check": "PWR003",
      "Level": "L1",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/library/psa_crypto_slot_management.c:450:1",
      "Title": "Explicitly declare pure functions",
      "RelatedCodeList": null,
      "Suggestion": "Consider prepending '__attribute__((__const__))' to the declaration of the const function 'psa_validate_key_location' (GCC-compatible only)",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR003"
    },
    {
      "Check": "PWR003",
      "Level": "L1",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/library/psa_crypto_slot_management.c:475:1",
      "Title": "Explicitly declare pure functions",
      "RelatedCodeList": null,
      "Suggestion": "Consider prepending '__attribute__((__const__))' to the declaration of the const function 'psa_validate_key_persistence' (GCC-compatible only)",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR003"
    },
    {
      "Check": "PWR003",
      "Level": "L1",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/library/psa_crypto_storage.c:40:1",
      "Title": "Explicitly declare pure functions",
      "RelatedCodeList": null,
      "Suggestion": "Consider prepending '__attribute__((__const__))' to the declaration of the const function 'psa_its_identifier_of_slot' (GCC-compatible only)",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR003"
    },
    {
      "Check": "PWR003",
      "Level": "L1",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/library/version.c:15:1",
      "Title": "Explicitly declare pure functions",
      "RelatedCodeList": null,
      "Suggestion": "Consider prepending '__attribute__((__const__))' to the declaration of the const function 'mbedtls_version_get_number' (GCC-compatible only)",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR003"
    },
    {
      "Check": "PWR003",
      "Level": "L1",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/library/x509.c:803:1",
      "Title": "Explicitly declare pure functions",
      "RelatedCodeList": null,
      "Suggestion": "Consider prepending '__attribute__((__const__))' to the declaration of the const function 'nibble_to_hex_digit' (GCC-compatible only)",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR003"
    },
    {
      "Check": "PWR003",
      "Level": "L1",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/library/x509_create.c:119:1",
      "Title": "Explicitly declare pure functions",
      "RelatedCodeList": null,
      "Suggestion": "Consider prepending '__attribute__((__const__))' to the declaration of the const function 'hex_to_int' (GCC-compatible only)",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR003"
    },
    {
      "Check": "PWR003",
      "Level": "L1",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/library/net_sockets.c:125:1",
      "Title": "Explicitly declare pure functions",
      "RelatedCodeList": null,
      "Suggestion": "Consider prepending '__attribute__((__const__))' to the declaration of the const function 'check_fd' (GCC-compatible only)",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR003"
    },
    {
      "Check": "PWR003",
      "Level": "L1",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/library/ssl_ciphersuites.c:1806:1",
      "Title": "Explicitly declare pure functions",
      "RelatedCodeList": null,
      "Suggestion": "Consider prepending '__attribute__((__const__))' to the declaration of the const function 'ciphersuite_is_removed' (GCC-compatible only)",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR003"
    },
    {
      "Check": "PWR003",
      "Level": "L1",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/library/ssl_msg.c:529:1",
      "Title": "Explicitly declare pure functions",
      "RelatedCodeList": null,
      "Suggestion": "Consider prepending '__attribute__((__const__))' to the declaration of the const function 'ssl_compute_padding_length' (GCC-compatible only)",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR003"
    },
    {
      "Check": "PWR003",
      "Level": "L1",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/library/ssl_msg.c:3199:1",
      "Title": "Explicitly declare pure functions",
      "RelatedCodeList": null,
      "Suggestion": "Consider prepending '__attribute__((__const__))' to the declaration of the const function 'ssl_get_reassembly_buffer_size' (GCC-compatible only)",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR003"
    },
    {
      "Check": "PWR003",
      "Level": "L1",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/library/ssl_msg.c:3678:1",
      "Title": "Explicitly declare pure functions",
      "RelatedCodeList": null,
      "Suggestion": "Consider prepending '__attribute__((__const__))' to the declaration of the const function 'ssl_check_record_type' (GCC-compatible only)",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR003"
    },
    {
      "Check": "PWR003",
      "Level": "L1",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/library/ssl_tls.c:1259:1",
      "Title": "Explicitly declare pure functions",
      "RelatedCodeList": null,
      "Suggestion": "Consider prepending '__attribute__((__const__))' to the declaration of the const function 'ssl_cookie_write_dummy' (GCC-compatible only)",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR003"
    },
    {
      "Check": "PWR003",
      "Level": "L1",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/library/ssl_tls.c:1273:1",
      "Title": "Explicitly declare pure functions",
      "RelatedCodeList": null,
      "Suggestion": "Consider prepending '__attribute__((__const__))' to the declaration of the const function 'ssl_cookie_check_dummy' (GCC-compatible only)",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR003"
    },
    {
      "Check": "PWR003",
      "Level": "L1",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/library/ssl_tls.c:2359:1",
      "Title": "Explicitly declare pure functions",
      "RelatedCodeList": null,
      "Suggestion": "Consider prepending '__attribute__((__const__))' to the declaration of the const function 'mbedtls_ssl_get_base_mode' (GCC-compatible only)",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR003"
    },
    {
      "Check": "PWR003",
      "Level": "L1",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/library/ssl_tls.c:2382:1",
      "Title": "Explicitly declare pure functions",
      "RelatedCodeList": null,
      "Suggestion": "Consider prepending '__attribute__((__const__))' to the declaration of the const function 'mbedtls_ssl_get_actual_mode' (GCC-compatible only)",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR003"
    },
    {
      "Check": "PWR003",
      "Level": "L1",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/programs/fuzz/common.c:25:1",
      "Title": "Explicitly declare pure functions",
      "RelatedCodeList": null,
      "Suggestion": "Consider prepending '__attribute__((__const__))' to the declaration of the const function 'dummy_send' (GCC-compatible only)",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR003"
    },
    {
      "Check": "PWR003",
      "Level": "L1",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/programs/ssl/ssl_test_lib.c:42:1",
      "Title": "Explicitly declare pure functions",
      "RelatedCodeList": null,
      "Suggestion": "Consider prepending '__attribute__((__const__))' to the declaration of the const function 'dummy_constant_time' (GCC-compatible only)",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR003"
    },
    {
      "Check": "PWR003",
      "Level": "L1",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/programs/ssl/ssl_context_info.c:307:1",
      "Title": "Explicitly declare pure functions",
      "RelatedCodeList": null,
      "Suggestion": "Consider prepending '__attribute__((__const__))' to the declaration of the const function 'get_enabled_str' (GCC-compatible only)",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR003"
    },
    {
      "Check": "PWR003",
      "Level": "L1",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/programs/ssl/ssl_server2.c:1072:1",
      "Title": "Explicitly declare pure functions",
      "RelatedCodeList": null,
      "Suggestion": "Consider prepending '__attribute__((__const__))' to the declaration of the const function 'mbedtls_status_is_ssl_in_progress' (GCC-compatible only)",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR003"
    },
    {
      "Check": "PWR003",
      "Level": "L1",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/programs/test/metatest.c:152:1",
      "Title": "Explicitly declare pure functions",
      "RelatedCodeList": null,
      "Suggestion": "Consider prepending '__attribute__((__const__))' to the declaration of the const function 'mutex_lock_not_initialized' (GCC-compatible only)",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR003"
    },
    {
      "Check": "PWR003",
      "Level": "L1",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/programs/test/metatest.c:168:1",
      "Title": "Explicitly declare pure functions",
      "RelatedCodeList": null,
      "Suggestion": "Consider prepending '__attribute__((__const__))' to the declaration of the const function 'mutex_unlock_not_initialized' (GCC-compatible only)",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR003"
    },
    {
      "Check": "PWR003",
      "Level": "L1",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/programs/test/metatest.c:184:1",
      "Title": "Explicitly declare pure functions",
      "RelatedCodeList": null,
      "Suggestion": "Consider prepending '__attribute__((__const__))' to the declaration of the const function 'mutex_free_not_initialized' (GCC-compatible only)",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR003"
    },
    {
      "Check": "PWR003",
      "Level": "L1",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/programs/test/metatest.c:198:1",
      "Title": "Explicitly declare pure functions",
      "RelatedCodeList": null,
      "Suggestion": "Consider prepending '__attribute__((__const__))' to the declaration of the const function 'mutex_double_init' (GCC-compatible only)",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR003"
    },
    {
      "Check": "PWR003",
      "Level": "L1",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/programs/test/metatest.c:213:1",
      "Title": "Explicitly declare pure functions",
      "RelatedCodeList": null,
      "Suggestion": "Consider prepending '__attribute__((__const__))' to the declaration of the const function 'mutex_double_free' (GCC-compatible only)",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR003"
    },
    {
      "Check": "PWR003",
      "Level": "L1",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/programs/test/metatest.c:228:1",
      "Title": "Explicitly declare pure functions",
      "RelatedCodeList": null,
      "Suggestion": "Consider prepending '__attribute__((__const__))' to the declaration of the const function 'mutex_leak' (GCC-compatible only)",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR003"
    },
    {
      "Check": "PWR053",
      "Level": "L1",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/library/aesni.c:510:5",
      "Title": "Consider applying vectorization to forall loop",
      "RelatedCodeList": null,
      "Suggestion": "Use pwdirectives to automatically optimize the code",
      "Auto-fix": [
        "* Using OpenMP pragmas (recommended):",
        "    codee-2024.1.1-linux-x86_64/bin/pwdirectives --vector omp --in-place /home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/library/aesni.c:510:5 --config mbedtls/build/compile_commands.json --json",
        "* Using Clang compiler pragmas:",
        "    codee-2024.1.1-linux-x86_64/bin/pwdirectives --vector clang --in-place /home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/library/aesni.c:510:5 --config mbedtls/build/compile_commands.json --json",
        "* Using GCC pragmas:",
        "    codee-2024.1.1-linux-x86_64/bin/pwdirectives --vector gcc --in-place /home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/library/aesni.c:510:5 --config mbedtls/build/compile_commands.json --json",
        "* Using ICC pragmas:",
        "    codee-2024.1.1-linux-x86_64/bin/pwdirectives --vector icc --in-place /home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/library/aesni.c:510:5 --config mbedtls/build/compile_commands.json --json",
        "* Using combined pragmas, for example (for GCC and Clang pragmas):",
        "    codee-2024.1.1-linux-x86_64/bin/pwdirectives --vector gcc,clang --in-place /home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/library/aesni.c:510:5 --config mbedtls/build/compile_commands.json --json"
      ],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR053"
    },
    {
      "Check": "PWR053",
      "Level": "L1",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/library/aesni.c:603:5",
      "Title": "Consider applying vectorization to forall loop",
      "RelatedCodeList": null,
      "Suggestion": "Use pwdirectives to automatically optimize the code",
      "Auto-fix": [
        "* Using OpenMP pragmas (recommended):",
        "    codee-2024.1.1-linux-x86_64/bin/pwdirectives --vector omp --in-place /home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/library/aesni.c:603:5 --config mbedtls/build/compile_commands.json --json",
        "* Using Clang compiler pragmas:",
        "    codee-2024.1.1-linux-x86_64/bin/pwdirectives --vector clang --in-place /home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/library/aesni.c:603:5 --config mbedtls/build/compile_commands.json --json",
        "* Using GCC pragmas:",
        "    codee-2024.1.1-linux-x86_64/bin/pwdirectives --vector gcc --in-place /home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/library/aesni.c:603:5 --config mbedtls/build/compile_commands.json --json",
        "* Using ICC pragmas:",
        "    codee-2024.1.1-linux-x86_64/bin/pwdirectives --vector icc --in-place /home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/library/aesni.c:603:5 --config mbedtls/build/compile_commands.json --json",
        "* Using combined pragmas, for example (for GCC and Clang pragmas):",
        "    codee-2024.1.1-linux-x86_64/bin/pwdirectives --vector gcc,clang --in-place /home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/library/aesni.c:603:5 --config mbedtls/build/compile_commands.json --json"
      ],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR053"
    },
    {
      "Check": "PWR053",
      "Level": "L1",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/library/bignum_core.c:352:9",
      "Title": "Consider applying vectorization to forall loop",
      "RelatedCodeList": null,
      "Suggestion": "Use pwdirectives to automatically optimize the code",
      "Auto-fix": [
        "* Using OpenMP pragmas (recommended):",
        "    codee-2024.1.1-linux-x86_64/bin/pwdirectives --vector omp --in-place /home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/library/bignum_core.c:352:9 --config mbedtls/build/compile_commands.json --json",
        "* Using Clang compiler pragmas:",
        "    codee-2024.1.1-linux-x86_64/bin/pwdirectives --vector clang --in-place /home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/library/bignum_core.c:352:9 --config mbedtls/build/compile_commands.json --json",
        "* Using GCC pragmas:",
        "    codee-2024.1.1-linux-x86_64/bin/pwdirectives --vector gcc --in-place /home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/library/bignum_core.c:352:9 --config mbedtls/build/compile_commands.json --json",
        "* Using ICC pragmas:",
        "    codee-2024.1.1-linux-x86_64/bin/pwdirectives --vector icc --in-place /home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/library/bignum_core.c:352:9 --config mbedtls/build/compile_commands.json --json",
        "* Using combined pragmas, for example (for GCC and Clang pragmas):",
        "    codee-2024.1.1-linux-x86_64/bin/pwdirectives --vector gcc,clang --in-place /home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/library/bignum_core.c:352:9 --config mbedtls/build/compile_commands.json --json"
      ],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR053"
    },
    {
      "Check": "PWR053",
      "Level": "L1",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/library/bignum_core.c:387:9",
      "Title": "Consider applying vectorization to forall loop",
      "RelatedCodeList": null,
      "Suggestion": "Use pwdirectives to automatically optimize the code",
      "Auto-fix": [
        "* Using OpenMP pragmas (recommended):",
        "    codee-2024.1.1-linux-x86_64/bin/pwdirectives --vector omp --in-place /home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/library/bignum_core.c:387:9 --config mbedtls/build/compile_commands.json --json",
        "* Using Clang compiler pragmas:",
        "    codee-2024.1.1-linux-x86_64/bin/pwdirectives --vector clang --in-place /home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/library/bignum_core.c:387:9 --config mbedtls/build/compile_commands.json --json",
        "* Using GCC pragmas:",
        "    codee-2024.1.1-linux-x86_64/bin/pwdirectives --vector gcc --in-place /home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/library/bignum_core.c:387:9 --config mbedtls/build/compile_commands.json --json",
        "* Using ICC pragmas:",
        "    codee-2024.1.1-linux-x86_64/bin/pwdirectives --vector icc --in-place /home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/library/bignum_core.c:387:9 --config mbedtls/build/compile_commands.json --json",
        "* Using combined pragmas, for example (for GCC and Clang pragmas):",
        "    codee-2024.1.1-linux-x86_64/bin/pwdirectives --vector gcc,clang --in-place /home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/library/bignum_core.c:387:9 --config mbedtls/build/compile_commands.json --json"
      ],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR053"
    },
    {
      "Check": "PWR053",
      "Level": "L1",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/library/cipher.c:836:5",
      "Title": "Consider applying vectorization to forall loop",
      "RelatedCodeList": null,
      "Suggestion": "Use pwdirectives to automatically optimize the code",
      "Auto-fix": [
        "* Using OpenMP pragmas (recommended):",
        "    codee-2024.1.1-linux-x86_64/bin/pwdirectives --vector omp --in-place /home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/library/cipher.c:836:5 --config mbedtls/build/compile_commands.json --json",
        "* Using Clang compiler pragmas:",
        "    codee-2024.1.1-linux-x86_64/bin/pwdirectives --vector clang --in-place /home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/library/cipher.c:836:5 --config mbedtls/build/compile_commands.json --json",
        "* Using GCC pragmas:",
        "    codee-2024.1.1-linux-x86_64/bin/pwdirectives --vector gcc --in-place /home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/library/cipher.c:836:5 --config mbedtls/build/compile_commands.json --json",
        "* Using ICC pragmas:",
        "    codee-2024.1.1-linux-x86_64/bin/pwdirectives --vector icc --in-place /home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/library/cipher.c:836:5 --config mbedtls/build/compile_commands.json --json",
        "* Using combined pragmas, for example (for GCC and Clang pragmas):",
        "    codee-2024.1.1-linux-x86_64/bin/pwdirectives --vector gcc,clang --in-place /home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/library/cipher.c:836:5 --config mbedtls/build/compile_commands.json --json"
      ],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR053"
    },
    {
      "Check": "PWR053",
      "Level": "L1",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/library/cipher.c:881:5",
      "Title": "Consider applying vectorization to forall loop",
      "RelatedCodeList": null,
      "Suggestion": "Use pwdirectives to automatically optimize the code",
      "Auto-fix": [
        "* Using OpenMP pragmas (recommended):",
        "    codee-2024.1.1-linux-x86_64/bin/pwdirectives --vector omp --in-place /home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/library/cipher.c:881:5 --config mbedtls/build/compile_commands.json --json",
        "* Using Clang compiler pragmas:",
        "    codee-2024.1.1-linux-x86_64/bin/pwdirectives --vector clang --in-place /home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/library/cipher.c:881:5 --config mbedtls/build/compile_commands.json --json",
        "* Using GCC pragmas:",
        "    codee-2024.1.1-linux-x86_64/bin/pwdirectives --vector gcc --in-place /home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/library/cipher.c:881:5 --config mbedtls/build/compile_commands.json --json",
        "* Using ICC pragmas:",
        "    codee-2024.1.1-linux-x86_64/bin/pwdirectives --vector icc --in-place /home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/library/cipher.c:881:5 --config mbedtls/build/compile_commands.json --json",
        "* Using combined pragmas, for example (for GCC and Clang pragmas):",
        "    codee-2024.1.1-linux-x86_64/bin/pwdirectives --vector gcc,clang --in-place /home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/library/cipher.c:881:5 --config mbedtls/build/compile_commands.json --json"
      ],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR053"
    },
    {
      "Check": "PWR053",
      "Level": "L1",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/library/cipher.c:924:5",
      "Title": "Consider applying vectorization to forall loop",
      "RelatedCodeList": null,
      "Suggestion": "Use pwdirectives to automatically optimize the code",
      "Auto-fix": [
        "* Using OpenMP pragmas (recommended):",
        "    codee-2024.1.1-linux-x86_64/bin/pwdirectives --vector omp --in-place /home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/library/cipher.c:924:5 --config mbedtls/build/compile_commands.json --json",
        "* Using Clang compiler pragmas:",
        "    codee-2024.1.1-linux-x86_64/bin/pwdirectives --vector clang --in-place /home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/library/cipher.c:924:5 --config mbedtls/build/compile_commands.json --json",
        "* Using GCC pragmas:",
        "    codee-2024.1.1-linux-x86_64/bin/pwdirectives --vector gcc --in-place /home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/library/cipher.c:924:5 --config mbedtls/build/compile_commands.json --json",
        "* Using ICC pragmas:",
        "    codee-2024.1.1-linux-x86_64/bin/pwdirectives --vector icc --in-place /home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/library/cipher.c:924:5 --config mbedtls/build/compile_commands.json --json",
        "* Using combined pragmas, for example (for GCC and Clang pragmas):",
        "    codee-2024.1.1-linux-x86_64/bin/pwdirectives --vector gcc,clang --in-place /home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/library/cipher.c:924:5 --config mbedtls/build/compile_commands.json --json"
      ],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR053"
    },
    {
      "Check": "PWR053",
      "Level": "L1",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/library/entropy.c:641:9",
      "Title": "Consider applying vectorization to forall loop",
      "RelatedCodeList": null,
      "Suggestion": "Use pwdirectives to automatically optimize the code",
      "Auto-fix": [
        "* Using OpenMP pragmas (recommended):",
        "    codee-2024.1.1-linux-x86_64/bin/pwdirectives --vector omp --in-place /home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/library/entropy.c:641:9 --config mbedtls/build/compile_commands.json --json",
        "* Using Clang compiler pragmas:",
        "    codee-2024.1.1-linux-x86_64/bin/pwdirectives --vector clang --in-place /home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/library/entropy.c:641:9 --config mbedtls/build/compile_commands.json --json",
        "* Using GCC pragmas:",
        "    codee-2024.1.1-linux-x86_64/bin/pwdirectives --vector gcc --in-place /home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/library/entropy.c:641:9 --config mbedtls/build/compile_commands.json --json",
        "* Using ICC pragmas:",
        "    codee-2024.1.1-linux-x86_64/bin/pwdirectives --vector icc --in-place /home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/library/entropy.c:641:9 --config mbedtls/build/compile_commands.json --json",
        "* Using combined pragmas, for example (for GCC and Clang pragmas):",
        "    codee-2024.1.1-linux-x86_64/bin/pwdirectives --vector gcc,clang --in-place /home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/library/entropy.c:641:9 --config mbedtls/build/compile_commands.json --json"
      ],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR053"
    },
    {
      "Check": "PWR053",
      "Level": "L1",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/library/nist_kw.c:116:5",
      "Title": "Consider applying vectorization to forall loop",
      "RelatedCodeList": null,
      "Suggestion": "Use pwdirectives to automatically optimize the code",
      "Auto-fix": [
        "* Using OpenMP pragmas (recommended):",
        "    codee-2024.1.1-linux-x86_64/bin/pwdirectives --vector omp --in-place /home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/library/nist_kw.c:116:5 --config mbedtls/build/compile_commands.json --json",
        "* Using Clang compiler pragmas:",
        "    codee-2024.1.1-linux-x86_64/bin/pwdirectives --vector clang --in-place /home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/library/nist_kw.c:116:5 --config mbedtls/build/compile_commands.json --json",
        "* Using GCC pragmas:",
        "    codee-2024.1.1-linux-x86_64/bin/pwdirectives --vector gcc --in-place /home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/library/nist_kw.c:116:5 --config mbedtls/build/compile_commands.json --json",
        "* Using ICC pragmas:",
        "    codee-2024.1.1-linux-x86_64/bin/pwdirectives --vector icc --in-place /home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/library/nist_kw.c:116:5 --config mbedtls/build/compile_commands.json --json",
        "* Using combined pragmas, for example (for GCC and Clang pragmas):",
        "    codee-2024.1.1-linux-x86_64/bin/pwdirectives --vector gcc,clang --in-place /home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/library/nist_kw.c:116:5 --config mbedtls/build/compile_commands.json --json"
      ],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR053"
    },
    {
      "Check": "PWR053",
      "Level": "L1",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/library/pkcs12.c:98:5",
      "Title": "Consider applying vectorization to forall loop",
      "RelatedCodeList": null,
      "Suggestion": "Use pwdirectives to automatically optimize the code",
      "Auto-fix": [
        "* Using OpenMP pragmas (recommended):",
        "    codee-2024.1.1-linux-x86_64/bin/pwdirectives --vector omp --in-place /home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/library/pkcs12.c:98:5 --config mbedtls/build/compile_commands.json --json",
        "* Using Clang compiler pragmas:",
        "    codee-2024.1.1-linux-x86_64/bin/pwdirectives --vector clang --in-place /home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/library/pkcs12.c:98:5 --config mbedtls/build/compile_commands.json --json",
        "* Using GCC pragmas:",
        "    codee-2024.1.1-linux-x86_64/bin/pwdirectives --vector gcc --in-place /home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/library/pkcs12.c:98:5 --config mbedtls/build/compile_commands.json --json",
        "* Using ICC pragmas:",
        "    codee-2024.1.1-linux-x86_64/bin/pwdirectives --vector icc --in-place /home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/library/pkcs12.c:98:5 --config mbedtls/build/compile_commands.json --json",
        "* Using combined pragmas, for example (for GCC and Clang pragmas):",
        "    codee-2024.1.1-linux-x86_64/bin/pwdirectives --vector gcc,clang --in-place /home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/library/pkcs12.c:98:5 --config mbedtls/build/compile_commands.json --json"
      ],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR053"
    },
    {
      "Check": "PWR053",
      "Level": "L1",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/library/psa_crypto_mac.c:78:5",
      "Title": "Consider applying vectorization to forall loop",
      "RelatedCodeList": null,
      "Suggestion": "Use pwdirectives to automatically optimize the code",
      "Auto-fix": [
        "* Using OpenMP pragmas (recommended):",
        "    codee-2024.1.1-linux-x86_64/bin/pwdirectives --vector omp --in-place /home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/library/psa_crypto_mac.c:78:5 --config mbedtls/build/compile_commands.json --json",
        "* Using Clang compiler pragmas:",
        "    codee-2024.1.1-linux-x86_64/bin/pwdirectives --vector clang --in-place /home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/library/psa_crypto_mac.c:78:5 --config mbedtls/build/compile_commands.json --json",
        "* Using GCC pragmas:",
        "    codee-2024.1.1-linux-x86_64/bin/pwdirectives --vector gcc --in-place /home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/library/psa_crypto_mac.c:78:5 --config mbedtls/build/compile_commands.json --json",
        "* Using ICC pragmas:",
        "    codee-2024.1.1-linux-x86_64/bin/pwdirectives --vector icc --in-place /home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/library/psa_crypto_mac.c:78:5 --config mbedtls/build/compile_commands.json --json",
        "* Using combined pragmas, for example (for GCC and Clang pragmas):",
        "    codee-2024.1.1-linux-x86_64/bin/pwdirectives --vector gcc,clang --in-place /home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/library/psa_crypto_mac.c:78:5 --config mbedtls/build/compile_commands.json --json"
      ],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR053"
    },
    {
      "Check": "PWR053",
      "Level": "L1",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/library/psa_crypto_mac.c:85:5",
      "Title": "Consider applying vectorization to forall loop",
      "RelatedCodeList": null,
      "Suggestion": "Use pwdirectives to automatically optimize the code",
      "Auto-fix": [
        "* Using OpenMP pragmas (recommended):",
        "    codee-2024.1.1-linux-x86_64/bin/pwdirectives --vector omp --in-place /home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/library/psa_crypto_mac.c:85:5 --config mbedtls/build/compile_commands.json --json",
        "* Using Clang compiler pragmas:",
        "    codee-2024.1.1-linux-x86_64/bin/pwdirectives --vector clang --in-place /home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/library/psa_crypto_mac.c:85:5 --config mbedtls/build/compile_commands.json --json",
        "* Using GCC pragmas:",
        "    codee-2024.1.1-linux-x86_64/bin/pwdirectives --vector gcc --in-place /home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/library/psa_crypto_mac.c:85:5 --config mbedtls/build/compile_commands.json --json",
        "* Using ICC pragmas:",
        "    codee-2024.1.1-linux-x86_64/bin/pwdirectives --vector icc --in-place /home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/library/psa_crypto_mac.c:85:5 --config mbedtls/build/compile_commands.json --json",
        "* Using combined pragmas, for example (for GCC and Clang pragmas):",
        "    codee-2024.1.1-linux-x86_64/bin/pwdirectives --vector gcc,clang --in-place /home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/library/psa_crypto_mac.c:85:5 --config mbedtls/build/compile_commands.json --json"
      ],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR053"
    },
    {
      "Check": "PWR053",
      "Level": "L1",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/library/ssl_tls.c:6364:9",
      "Title": "Consider applying vectorization to forall loop",
      "RelatedCodeList": null,
      "Suggestion": "Use pwdirectives to automatically optimize the code",
      "Auto-fix": [
        "* Using OpenMP pragmas (recommended):",
        "    codee-2024.1.1-linux-x86_64/bin/pwdirectives --vector omp --in-place /home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/library/ssl_tls.c:6364:9 --config mbedtls/build/compile_commands.json --json",
        "* Using Clang compiler pragmas:",
        "    codee-2024.1.1-linux-x86_64/bin/pwdirectives --vector clang --in-place /home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/library/ssl_tls.c:6364:9 --config mbedtls/build/compile_commands.json --json",
        "* Using GCC pragmas:",
        "    codee-2024.1.1-linux-x86_64/bin/pwdirectives --vector gcc --in-place /home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/library/ssl_tls.c:6364:9 --config mbedtls/build/compile_commands.json --json",
        "* Using ICC pragmas:",
        "    codee-2024.1.1-linux-x86_64/bin/pwdirectives --vector icc --in-place /home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/library/ssl_tls.c:6364:9 --config mbedtls/build/compile_commands.json --json",
        "* Using combined pragmas, for example (for GCC and Clang pragmas):",
        "    codee-2024.1.1-linux-x86_64/bin/pwdirectives --vector gcc,clang --in-place /home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/library/ssl_tls.c:6364:9 --config mbedtls/build/compile_commands.json --json"
      ],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR053"
    },
    {
      "Check": "PWR053",
      "Level": "L1",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/programs/aes/crypt_and_hash.c:241:9",
      "Title": "Consider applying vectorization to forall loop",
      "RelatedCodeList": null,
      "Suggestion": "Use pwdirectives to automatically optimize the code",
      "Auto-fix": [
        "* Using OpenMP pragmas (recommended):",
        "    codee-2024.1.1-linux-x86_64/bin/pwdirectives --vector omp --in-place /home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/programs/aes/crypt_and_hash.c:241:9 --config mbedtls/build/compile_commands.json --json",
        "* Using Clang compiler pragmas:",
        "    codee-2024.1.1-linux-x86_64/bin/pwdirectives --vector clang --in-place /home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/programs/aes/crypt_and_hash.c:241:9 --config mbedtls/build/compile_commands.json --json",
        "* Using GCC pragmas:",
        "    codee-2024.1.1-linux-x86_64/bin/pwdirectives --vector gcc --in-place /home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/programs/aes/crypt_and_hash.c:241:9 --config mbedtls/build/compile_commands.json --json",
        "* Using ICC pragmas:",
        "    codee-2024.1.1-linux-x86_64/bin/pwdirectives --vector icc --in-place /home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/programs/aes/crypt_and_hash.c:241:9 --config mbedtls/build/compile_commands.json --json",
        "* Using combined pragmas, for example (for GCC and Clang pragmas):",
        "    codee-2024.1.1-linux-x86_64/bin/pwdirectives --vector gcc,clang --in-place /home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/programs/aes/crypt_and_hash.c:241:9 --config mbedtls/build/compile_commands.json --json"
      ],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR053"
    },
    {
      "Check": "PWR054",
      "Level": "L1",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/library/lmots.c:89:5",
      "Title": "Consider applying vectorization to scalar reduction loop",
      "RelatedCodeList": null,
      "Suggestion": "Use pwdirectives to automatically optimize the code",
      "Auto-fix": [
        "* Using OpenMP pragmas (recommended):",
        "    codee-2024.1.1-linux-x86_64/bin/pwdirectives --vector omp --in-place /home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/library/lmots.c:89:5 --config mbedtls/build/compile_commands.json --json",
        "* Using Clang compiler pragmas:",
        "    codee-2024.1.1-linux-x86_64/bin/pwdirectives --vector clang --in-place /home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/library/lmots.c:89:5 --config mbedtls/build/compile_commands.json --json",
        "* Using GCC pragmas:",
        "    codee-2024.1.1-linux-x86_64/bin/pwdirectives --vector gcc --in-place /home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/library/lmots.c:89:5 --config mbedtls/build/compile_commands.json --json",
        "* Using ICC pragmas:",
        "    codee-2024.1.1-linux-x86_64/bin/pwdirectives --vector icc --in-place /home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/library/lmots.c:89:5 --config mbedtls/build/compile_commands.json --json",
        "* Using combined pragmas, for example (for GCC and Clang pragmas):",
        "    codee-2024.1.1-linux-x86_64/bin/pwdirectives --vector gcc,clang --in-place /home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/library/lmots.c:89:5 --config mbedtls/build/compile_commands.json --json"
      ],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR054"
    },
    {
      "Check": "PWR054",
      "Level": "L1",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/library/oid.c:1055:5",
      "Title": "Consider applying vectorization to scalar reduction loop",
      "RelatedCodeList": null,
      "Suggestion": "Use pwdirectives to automatically optimize the code",
      "Auto-fix": [
        "* Using OpenMP pragmas (recommended):",
        "    codee-2024.1.1-linux-x86_64/bin/pwdirectives --vector omp --in-place /home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/library/oid.c:1055:5 --config mbedtls/build/compile_commands.json --json",
        "* Using Clang compiler pragmas:",
        "    codee-2024.1.1-linux-x86_64/bin/pwdirectives --vector clang --in-place /home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/library/oid.c:1055:5 --config mbedtls/build/compile_commands.json --json",
        "* Using GCC pragmas:",
        "    codee-2024.1.1-linux-x86_64/bin/pwdirectives --vector gcc --in-place /home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/library/oid.c:1055:5 --config mbedtls/build/compile_commands.json --json",
        "* Using ICC pragmas:",
        "    codee-2024.1.1-linux-x86_64/bin/pwdirectives --vector icc --in-place /home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/library/oid.c:1055:5 --config mbedtls/build/compile_commands.json --json",
        "* Using combined pragmas, for example (for GCC and Clang pragmas):",
        "    codee-2024.1.1-linux-x86_64/bin/pwdirectives --vector gcc,clang --in-place /home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/library/oid.c:1055:5 --config mbedtls/build/compile_commands.json --json"
      ],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR054"
    },
    {
      "Check": "PWR024",
      "Level": "L2",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/library/bignum_core.c:352:9",
      "Title": "Loop can be rewritten in OpenMP canonical form",
      "RelatedCodeList": null,
      "Suggestion": "Rewrite the loop in order to comply with the OpenMP Canonical Loop Form",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR024"
    },
    {
      "Check": "PWR024",
      "Level": "L2",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/library/bignum_core.c:387:9",
      "Title": "Loop can be rewritten in OpenMP canonical form",
      "RelatedCodeList": null,
      "Suggestion": "Rewrite the loop in order to comply with the OpenMP Canonical Loop Form",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR024"
    },
    {
      "Check": "PWR024",
      "Level": "L2",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/library/lmots.c:89:5",
      "Title": "Loop can be rewritten in OpenMP canonical form",
      "RelatedCodeList": null,
      "Suggestion": "Rewrite the loop in order to comply with the OpenMP Canonical Loop Form",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR024"
    },
    {
      "Check": "PWR034",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/library/des.c:497:5",
      "Title": "Avoid strided array access to improve performance",
      "RelatedCodeList": {
        "Subtitle": "Strided array access",
        "Code": [
          "        dsk[i] = esk[30 - i];",
          "        dsk[i +  1] = esk[31 - i];",
          "        esk[i + 32] = dsk[62 - i];",
          "        esk[i + 33] = dsk[63 - i];",
          "        esk[i + 64] = esk[i];",
          "        esk[i + 65] = esk[i + 1];",
          "        dsk[i + 64] = dsk[i];",
          "        dsk[i + 65] = dsk[i + 1];"
        ]
      },
      "Suggestion": "Consider using techniques like loop fusion, loop interchange, loop tiling or changing the data layout to avoid non-sequential access to variables 'esk' and 'dsk'",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR034"
    },
    {
      "Check": "PWR034",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/library/des.c:550:5",
      "Title": "Avoid strided array access to improve performance",
      "RelatedCodeList": {
        "Subtitle": "Strided array access",
        "Code": [
          "        dsk[i] = esk[94 - i];",
          "        dsk[i +  1] = esk[95 - i];",
          "        esk[i + 32] = dsk[62 - i];",
          "        esk[i + 33] = dsk[63 - i];",
          "        dsk[i + 64] = esk[30 - i];",
          "        dsk[i + 65] = esk[31 - i];"
        ]
      },
      "Suggestion": "Consider using techniques like loop fusion, loop interchange, loop tiling or changing the data layout to avoid non-sequential access to variables 'esk' and 'dsk'",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR034"
    },
    {
      "Check": "PWR034",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/library/pkcs12.c:98:5",
      "Title": "Avoid strided array access to improve performance",
      "RelatedCodeList": {
        "Subtitle": "Strided array access",
        "Code": [
          "        unipwd[i * 2 + 1] = pwd[i];"
        ]
      },
      "Suggestion": "Consider using techniques like loop fusion, loop interchange, loop tiling or changing the data layout to avoid non-sequential access to variable 'unipwd'",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR034"
    },
    {
      "Check": "PWR001",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/tests/src/drivers/platform_builtin_keys.c:59:1",
      "Title": "Declare global variables as function parameters",
      "RelatedCodeList": {
        "Subtitle": "Usages",
        "Code": [
          "         i < (sizeof(builtin_keys) / sizeof(builtin_keys[0])); i++) {",
          "        builtin_key = &builtin_keys[i];"
        ]
      },
      "Suggestion": "Consider passing 'builtin_keys' explicitly as argument to the function 'mbedtls_psa_platform_get_builtin_key' and use that argument instead; use the 'restrict' keyword for 'builtin_keys' to hint the compiler that it is free of aliasing",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR001"
    },
    {
      "Check": "PWR001",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/tests/src/helpers.c:36:1",
      "Title": "Declare global variables as function parameters",
      "RelatedCodeList": {
        "Subtitle": "Usages",
        "Code": [
          "    result =  mbedtls_test_info.result;"
        ]
      },
      "Suggestion": "Consider passing 'mbedtls_test_info' explicitly as argument to the function 'mbedtls_test_get_result' and use that argument instead; use the 'restrict' keyword for 'mbedtls_test_info' to hint the compiler that it is free of aliasing",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR001"
    },
    {
      "Check": "PWR001",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/tests/src/helpers.c:53:1",
      "Title": "Declare global variables as function parameters",
      "RelatedCodeList": {
        "Subtitle": "Usages",
        "Code": [
          "    mbedtls_test_info.result = result;",
          "    mbedtls_test_info.test = test;",
          "    mbedtls_test_info.line_no = line_no;",
          "    mbedtls_test_info.filename = filename;"
        ]
      },
      "Suggestion": "Consider passing 'mbedtls_test_info' explicitly as argument to the function 'mbedtls_test_set_result' and use that argument instead; use the 'restrict' keyword for 'mbedtls_test_info' to hint the compiler that it is free of aliasing",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR001"
    },
    {
      "Check": "PWR001",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/tests/src/helpers.c:65:1",
      "Title": "Declare global variables as function parameters",
      "RelatedCodeList": {
        "Subtitle": "Usages",
        "Code": [
          "    test = mbedtls_test_info.test;"
        ]
      },
      "Suggestion": "Consider passing 'mbedtls_test_info' explicitly as argument to the function 'mbedtls_test_get_test' and use that argument instead; use the 'restrict' keyword for 'mbedtls_test_info' to hint the compiler that it is free of aliasing",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR001"
    },
    {
      "Check": "PWR001",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/tests/src/helpers.c:81:1",
      "Title": "Declare global variables as function parameters",
      "RelatedCodeList": {
        "Subtitle": "Usages",
        "Code": [
          "    filename = mbedtls_test_info.filename;"
        ]
      },
      "Suggestion": "Consider passing 'mbedtls_test_info' explicitly as argument to the function 'mbedtls_get_test_filename' and use that argument instead; use the 'restrict' keyword for 'mbedtls_test_info' to hint the compiler that it is free of aliasing",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR001"
    },
    {
      "Check": "PWR001",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/tests/src/helpers.c:100:1",
      "Title": "Declare global variables as function parameters",
      "RelatedCodeList": {
        "Subtitle": "Usages",
        "Code": [
          "    line_no = mbedtls_test_info.line_no;"
        ]
      },
      "Suggestion": "Consider passing 'mbedtls_test_info' explicitly as argument to the function 'mbedtls_test_get_line_no' and use that argument instead; use the 'restrict' keyword for 'mbedtls_test_info' to hint the compiler that it is free of aliasing",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR001"
    },
    {
      "Check": "PWR001",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/tests/src/helpers.c:117:1",
      "Title": "Declare global variables as function parameters",
      "RelatedCodeList": {
        "Subtitle": "Usages",
        "Code": [
          "    ++mbedtls_test_info.step;"
        ]
      },
      "Suggestion": "Consider passing 'mbedtls_test_info' explicitly as argument to the function 'mbedtls_test_increment_step' and use that argument instead; use the 'restrict' keyword for 'mbedtls_test_info' to hint the compiler that it is free of aliasing",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR001"
    },
    {
      "Check": "PWR001",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/tests/src/helpers.c:130:1",
      "Title": "Declare global variables as function parameters",
      "RelatedCodeList": {
        "Subtitle": "Usages",
        "Code": [
          "    step = mbedtls_test_info.step;"
        ]
      },
      "Suggestion": "Consider passing 'mbedtls_test_info' explicitly as argument to the function 'mbedtls_test_get_step' and use that argument instead; use the 'restrict' keyword for 'mbedtls_test_info' to hint the compiler that it is free of aliasing",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR001"
    },
    {
      "Check": "PWR001",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/tests/src/helpers.c:147:1",
      "Title": "Declare global variables as function parameters",
      "RelatedCodeList": {
        "Subtitle": "Usages",
        "Code": [
          "    mbedtls_test_info.step = (unsigned long) (-1);"
        ]
      },
      "Suggestion": "Consider passing 'mbedtls_test_info' explicitly as argument to the function 'mbedtls_test_reset_step' and use that argument instead; use the 'restrict' keyword for 'mbedtls_test_info' to hint the compiler that it is free of aliasing",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR001"
    },
    {
      "Check": "PWR001",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/tests/src/helpers.c:155:1",
      "Title": "Declare global variables as function parameters",
      "RelatedCodeList": {
        "Subtitle": "Usages",
        "Code": [
          "    mbedtls_test_info.step = step;"
        ]
      },
      "Suggestion": "Consider passing 'mbedtls_test_info' explicitly as argument to the function 'mbedtls_test_set_step' and use that argument instead; use the 'restrict' keyword for 'mbedtls_test_info' to hint the compiler that it is free of aliasing",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR001"
    },
    {
      "Check": "PWR001",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/tests/src/helpers.c:168:1",
      "Title": "Declare global variables as function parameters",
      "RelatedCodeList": {
        "Subtitle": "Usages",
        "Code": [
          "    memcpy(line, mbedtls_test_info.line1, MBEDTLS_TEST_LINE_LENGTH);"
        ]
      },
      "Suggestion": "Consider passing 'mbedtls_test_info' explicitly as argument to the function 'mbedtls_test_get_line1' and use that argument instead; use the 'restrict' keyword for 'mbedtls_test_info' to hint the compiler that it is free of aliasing",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR001"
    },
    {
      "Check": "PWR001",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/tests/src/helpers.c:181:1",
      "Title": "Declare global variables as function parameters",
      "RelatedCodeList": {
        "Subtitle": "Usages",
        "Code": [
          "        memset(mbedtls_test_info.line1, 0, MBEDTLS_TEST_LINE_LENGTH);",
          "        memcpy(mbedtls_test_info.line1, line, MBEDTLS_TEST_LINE_LENGTH);"
        ]
      },
      "Suggestion": "Consider passing 'mbedtls_test_info' explicitly as argument to the function 'mbedtls_test_set_line1' and use that argument instead; use the 'restrict' keyword for 'mbedtls_test_info' to hint the compiler that it is free of aliasing",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR001"
    },
    {
      "Check": "PWR001",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/tests/src/helpers.c:193:1",
      "Title": "Declare global variables as function parameters",
      "RelatedCodeList": {
        "Subtitle": "Usages",
        "Code": [
          "    memcpy(line, mbedtls_test_info.line2, MBEDTLS_TEST_LINE_LENGTH);"
        ]
      },
      "Suggestion": "Consider passing 'mbedtls_test_info' explicitly as argument to the function 'mbedtls_test_get_line2' and use that argument instead; use the 'restrict' keyword for 'mbedtls_test_info' to hint the compiler that it is free of aliasing",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR001"
    },
    {
      "Check": "PWR001",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/tests/src/helpers.c:206:1",
      "Title": "Declare global variables as function parameters",
      "RelatedCodeList": {
        "Subtitle": "Usages",
        "Code": [
          "        memset(mbedtls_test_info.line2, 0, MBEDTLS_TEST_LINE_LENGTH);",
          "        memcpy(mbedtls_test_info.line2, line, MBEDTLS_TEST_LINE_LENGTH);"
        ]
      },
      "Suggestion": "Consider passing 'mbedtls_test_info' explicitly as argument to the function 'mbedtls_test_set_line2' and use that argument instead; use the 'restrict' keyword for 'mbedtls_test_info' to hint the compiler that it is free of aliasing",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR001"
    },
    {
      "Check": "PWR001",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/tests/src/helpers.c:243:1",
      "Title": "Declare global variables as function parameters",
      "RelatedCodeList": {
        "Subtitle": "Usages",
        "Code": [
          "    test_case_uses_negative_0 = mbedtls_test_info.case_uses_negative_0;"
        ]
      },
      "Suggestion": "Consider passing 'mbedtls_test_info' explicitly as argument to the function 'mbedtls_test_get_case_uses_negative_0' and use that argument instead; use the 'restrict' keyword for 'mbedtls_test_info' to hint the compiler that it is free of aliasing",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR001"
    },
    {
      "Check": "PWR001",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/tests/src/helpers.c:258:1",
      "Title": "Declare global variables as function parameters",
      "RelatedCodeList": {
        "Subtitle": "Usages",
        "Code": [
          "    mbedtls_test_info.case_uses_negative_0 = uses;"
        ]
      },
      "Suggestion": "Consider passing 'mbedtls_test_info' explicitly as argument to the function 'mbedtls_test_set_case_uses_negative_0' and use that argument instead; use the 'restrict' keyword for 'mbedtls_test_info' to hint the compiler that it is free of aliasing",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR001"
    },
    {
      "Check": "PWR001",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/tests/src/helpers.c:266:1",
      "Title": "Declare global variables as function parameters",
      "RelatedCodeList": {
        "Subtitle": "Usages",
        "Code": [
          "    ++mbedtls_test_info.case_uses_negative_0;"
        ]
      },
      "Suggestion": "Consider passing 'mbedtls_test_info' explicitly as argument to the function 'mbedtls_test_increment_case_uses_negative_0' and use that argument instead; use the 'restrict' keyword for 'mbedtls_test_info' to hint the compiler that it is free of aliasing",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR001"
    },
    {
      "Check": "PWR001",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/tests/src/helpers.c:292:1",
      "Title": "Declare global variables as function parameters",
      "RelatedCodeList": {
        "Subtitle": "Usages",
        "Code": [
          "    ret = mbedtls_platform_setup(&platform_ctx);"
        ]
      },
      "Suggestion": "Consider passing 'platform_ctx' explicitly as argument to the function 'mbedtls_test_platform_setup' and use that argument instead; use the 'restrict' keyword for 'platform_ctx' to hint the compiler that it is free of aliasing",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR001"
    },
    {
      "Check": "PWR001",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/tests/src/helpers.c:318:1",
      "Title": "Declare global variables as function parameters",
      "RelatedCodeList": {
        "Subtitle": "Usages",
        "Code": [
          "    mbedtls_platform_teardown(&platform_ctx);"
        ]
      },
      "Suggestion": "Consider passing 'platform_ctx' explicitly as argument to the function 'mbedtls_test_platform_teardown' and use that argument instead; use the 'restrict' keyword for 'platform_ctx' to hint the compiler that it is free of aliasing",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR001"
    },
    {
      "Check": "PWR001",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/tests/src/helpers.c:344:1",
      "Title": "Declare global variables as function parameters",
      "RelatedCodeList": {
        "Subtitle": "Usages",
        "Code": [
          "    if (mbedtls_test_info.result != MBEDTLS_TEST_RESULT_FAILED) {"
        ]
      },
      "Suggestion": "Consider passing 'mbedtls_test_info' explicitly as argument to the function 'mbedtls_test_fail_internal' and use that argument instead; use the 'restrict' keyword for 'mbedtls_test_info' to hint the compiler that it is free of aliasing",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR001"
    },
    {
      "Check": "PWR001",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/tests/src/helpers.c:403:1",
      "Title": "Declare global variables as function parameters",
      "RelatedCodeList": {
        "Subtitle": "Usages",
        "Code": [
          "    if (mbedtls_test_info.result != MBEDTLS_TEST_RESULT_FAILED) {"
        ]
      },
      "Suggestion": "Consider passing 'mbedtls_test_info' explicitly as argument to the function 'mbedtls_test_equal' and use that argument instead; use the 'restrict' keyword for 'mbedtls_test_info' to hint the compiler that it is free of aliasing",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR001"
    },
    {
      "Check": "PWR001",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/tests/src/helpers.c:441:1",
      "Title": "Declare global variables as function parameters",
      "RelatedCodeList": {
        "Subtitle": "Usages",
        "Code": [
          "    if (mbedtls_test_info.result != MBEDTLS_TEST_RESULT_FAILED) {"
        ]
      },
      "Suggestion": "Consider passing 'mbedtls_test_info' explicitly as argument to the function 'mbedtls_test_le_u' and use that argument instead; use the 'restrict' keyword for 'mbedtls_test_info' to hint the compiler that it is free of aliasing",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR001"
    },
    {
      "Check": "PWR001",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/tests/src/helpers.c:479:1",
      "Title": "Declare global variables as function parameters",
      "RelatedCodeList": {
        "Subtitle": "Usages",
        "Code": [
          "    if (mbedtls_test_info.result != MBEDTLS_TEST_RESULT_FAILED) {"
        ]
      },
      "Suggestion": "Consider passing 'mbedtls_test_info' explicitly as argument to the function 'mbedtls_test_le_s' and use that argument instead; use the 'restrict' keyword for 'mbedtls_test_info' to hint the compiler that it is free of aliasing",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR001"
    },
    {
      "Check": "PWR001",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/tests/src/psa_crypto_helpers.c:27:1",
      "Title": "Declare global variables as function parameters",
      "RelatedCodeList": {
        "Subtitle": "Usages",
        "Code": [
          "    for (i = 0; i < num_key_ids_used; i++) {",
          "        if (mbedtls_svc_key_id_equal(key_id, key_ids_used_in_test[i])) {",
          "    if (num_key_ids_used == ARRAY_LENGTH(key_ids_used_in_test)) {",
          "    key_ids_used_in_test[num_key_ids_used] = key_id;",
          "    ++num_key_ids_used;"
        ]
      },
      "Suggestion": "Consider passing 'num_key_ids_used' and 'key_ids_used_in_test' explicitly as arguments to the function 'mbedtls_test_uses_key_id' and use those arguments instead; use the 'restrict' keyword for 'num_key_ids_used' and 'key_ids_used_in_test' to hint the compiler that they are free of aliasing",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR001"
    },
    {
      "Check": "PWR001",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/tests/src/psa_crypto_helpers.c:48:1",
      "Title": "Declare global variables as function parameters",
      "RelatedCodeList": {
        "Subtitle": "Usages",
        "Code": [
          "    for (i = 0; i < num_key_ids_used; i++) {",
          "        psa_destroy_persistent_key(key_ids_used_in_test[i]);",
          "    num_key_ids_used = 0;"
        ]
      },
      "Suggestion": "Consider passing 'num_key_ids_used' and 'key_ids_used_in_test' explicitly as arguments to the function 'mbedtls_test_psa_purge_key_storage' and use those arguments instead; use the 'restrict' keyword for 'num_key_ids_used' and 'key_ids_used_in_test' to hint the compiler that they are free of aliasing",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR001"
    },
    {
      "Check": "PWR001",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/tests/src/psa_crypto_helpers.c:57:1",
      "Title": "Declare global variables as function parameters",
      "RelatedCodeList": {
        "Subtitle": "Usages",
        "Code": [
          "    for (i = 0; i < num_key_ids_used; i++) {",
          "        psa_purge_key(key_ids_used_in_test[i]);"
        ]
      },
      "Suggestion": "Consider passing 'num_key_ids_used' and 'key_ids_used_in_test' explicitly as arguments to the function 'mbedtls_test_psa_purge_key_cache' and use those arguments instead; use the 'restrict' keyword for 'num_key_ids_used' and 'key_ids_used_in_test' to hint the compiler that they are free of aliasing",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR001"
    },
    {
      "Check": "PWR001",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/tests/src/test_helpers/ssl_helpers.c:45:1",
      "Title": "Declare global variables as function parameters",
      "RelatedCodeList": {
        "Subtitle": "Usages",
        "Code": [
          "    srand(rng_seed);",
          "    rng_seed += 0xD0;"
        ]
      },
      "Suggestion": "Consider passing 'rng_seed' explicitly as argument to the function 'mbedtls_test_init_handshake_options' and use that argument instead; use the 'restrict' keyword for 'rng_seed' to hint the compiler that it is free of aliasing",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR001"
    },
    {
      "Check": "PWR001",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/tests/src/test_helpers/ssl_helpers.c:591:1",
      "Title": "Declare global variables as function parameters",
      "RelatedCodeList": {
        "Subtitle": "Usages",
        "Code": [
          "    for (i = 0; mbedtls_test_cas_der[i] != NULL; i++) {",
          "            (const unsigned char *) mbedtls_test_cas_der[i],",
          "            mbedtls_test_cas_der_len[i]);",
          "                (const unsigned char *) mbedtls_test_srv_crt_rsa_sha256_der,",
          "                (const unsigned char *) mbedtls_test_srv_key_rsa_der,",
          "                (const unsigned char *) mbedtls_test_srv_crt_ec_der,",
          "                (const unsigned char *) mbedtls_test_srv_key_ec_der,",
          "                (const unsigned char *) mbedtls_test_cli_crt_rsa_der,",
          "                (const unsigned char *) mbedtls_test_cli_key_rsa_der,",
          "                (const unsigned char *) mbedtls_test_cli_crt_ec_der,",
          "                (const unsigned char *) mbedtls_test_cli_key_ec_der,"
        ]
      },
      "Suggestion": "Consider passing 'mbedtls_test_cas_der', 'mbedtls_test_cas_der_len', 'mbedtls_test_srv_crt_rsa_sha256_der', 'mbedtls_test_srv_key_rsa_der', 'mbedtls_test_srv_crt_ec_der', 'mbedtls_test_srv_key_ec_der', 'mbedtls_test_cli_crt_rsa_der', 'mbedtls_test_cli_key_rsa_der', 'mbedtls_test_cli_crt_ec_der' and 'mbedtls_test_cli_key_ec_der' explicitly as arguments to the function 'mbedtls_test_ssl_endpoint_certificate_init' and use those arguments instead; use the 'restrict' keyword for 'mbedtls_test_cas_der', 'mbedtls_test_cas_der_len', 'mbedtls_test_srv_crt_rsa_sha256_der', 'mbedtls_test_srv_key_rsa_der', 'mbedtls_test_srv_crt_ec_der', 'mbedtls_test_srv_key_ec_der', 'mbedtls_test_cli_crt_rsa_der', 'mbedtls_test_cli_key_rsa_der', 'mbedtls_test_cli_crt_ec_der' and 'mbedtls_test_cli_key_ec_der' to hint the compiler that they are free of aliasing",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR001"
    },
    {
      "Check": "PWR001",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/library/aes.c:375:1",
      "Title": "Declare global variables as function parameters",
      "RelatedCodeList": {
        "Subtitle": "Usages",
        "Code": [
          "        round_constants[i] = x;",
          "    FSb[0x00] = 0x63;",
          "    RSb[0x63] = 0x00;",
          "        FSb[i] = x;",
          "        RSb[x] = (unsigned char) i;",
          "        x = FSb[i];",
          "        FT0[i] = ((uint32_t) y) ^",
          "        FT1[i] = ROTL8(FT0[i]);",
          "        FT2[i] = ROTL8(FT1[i]);",
          "        FT3[i] = ROTL8(FT2[i]);",
          "        x = RSb[i];",
          "        RT0[i] = ((uint32_t) MUL(0x0E, x)) ^",
          "        RT1[i] = ROTL8(RT0[i]);",
          "        RT2[i] = ROTL8(RT1[i]);",
          "        RT3[i] = ROTL8(RT2[i]);"
        ]
      },
      "Suggestion": "Consider passing 'round_constants', 'FSb', 'RSb', 'FT0', 'FT1', 'FT2', 'FT3', 'RT0', 'RT1', 'RT2' and 'RT3' explicitly as arguments to the function 'aes_gen_tables' and use those arguments instead; use the 'restrict' keyword for 'round_constants', 'FSb', 'RSb', 'FT0', 'FT1', 'FT2', 'FT3', 'RT0', 'RT1', 'RT2' and 'RT3' to hint the compiler that they are free of aliasing",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR001"
    },
    {
      "Check": "PWR001",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/library/aes.c:576:1",
      "Title": "Declare global variables as function parameters",
      "RelatedCodeList": {
        "Subtitle": "Usages",
        "Code": [
          "    if (aes_init_done == 0) {",
          "        aes_init_done = 1;",
          "                RK[4]  = RK[0] ^ round_constants[i] ^",
          "                         ((uint32_t) FSb[MBEDTLS_BYTE_1(RK[3])]) ^",
          "                         ((uint32_t) FSb[MBEDTLS_BYTE_2(RK[3])] <<  8) ^",
          "                         ((uint32_t) FSb[MBEDTLS_BYTE_3(RK[3])] << 16) ^",
          "                         ((uint32_t) FSb[MBEDTLS_BYTE_0(RK[3])] << 24);",
          "                RK[6]  = RK[0] ^ round_constants[i] ^",
          "                         ((uint32_t) FSb[MBEDTLS_BYTE_1(RK[5])]) ^",
          "                         ((uint32_t) FSb[MBEDTLS_BYTE_2(RK[5])] <<  8) ^",
          "                         ((uint32_t) FSb[MBEDTLS_BYTE_3(RK[5])] << 16) ^",
          "                         ((uint32_t) FSb[MBEDTLS_BYTE_0(RK[5])] << 24);",
          "                RK[8]  = RK[0] ^ round_constants[i] ^",
          "                         ((uint32_t) FSb[MBEDTLS_BYTE_1(RK[7])]) ^",
          "                         ((uint32_t) FSb[MBEDTLS_BYTE_2(RK[7])] <<  8) ^",
          "                         ((uint32_t) FSb[MBEDTLS_BYTE_3(RK[7])] << 16) ^",
          "                         ((uint32_t) FSb[MBEDTLS_BYTE_0(RK[7])] << 24);",
          "                         ((uint32_t) FSb[MBEDTLS_BYTE_0(RK[11])]) ^",
          "                         ((uint32_t) FSb[MBEDTLS_BYTE_1(RK[11])] <<  8) ^",
          "                         ((uint32_t) FSb[MBEDTLS_BYTE_2(RK[11])] << 16) ^",
          "                         ((uint32_t) FSb[MBEDTLS_BYTE_3(RK[11])] << 24);"
        ]
      },
      "Suggestion": "Consider passing 'aes_init_done', 'round_constants' and 'FSb' explicitly as arguments to the function 'mbedtls_aes_setkey_enc' and use those arguments instead; use the 'restrict' keyword for 'aes_init_done', 'round_constants' and 'FSb' to hint the compiler that they are free of aliasing",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR001"
    },
    {
      "Check": "PWR001",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/library/aes.c:687:1",
      "Title": "Declare global variables as function parameters",
      "RelatedCodeList": {
        "Subtitle": "Usages",
        "Code": [
          "            *RK++ = AES_RT0(FSb[MBEDTLS_BYTE_0(*SK)]) ^",
          "                    AES_RT1(FSb[MBEDTLS_BYTE_1(*SK)]) ^",
          "                    AES_RT2(FSb[MBEDTLS_BYTE_2(*SK)]) ^",
          "                    AES_RT3(FSb[MBEDTLS_BYTE_3(*SK)]);"
        ]
      },
      "Suggestion": "Consider passing 'RT0', 'FSb', 'RT1', 'RT2' and 'RT3' explicitly as arguments to the function 'mbedtls_aes_setkey_dec' and use those arguments instead; use the 'restrict' keyword for 'RT0', 'FSb', 'RT1', 'RT2' and 'RT3' to hint the compiler that they are free of aliasing",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR001"
    },
    {
      "Check": "PWR001",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/library/aes.c:883:1",
      "Title": "Declare global variables as function parameters",
      "RelatedCodeList": {
        "Subtitle": "Usages",
        "Code": [
          "        AES_FROUND(t.Y[0], t.Y[1], t.Y[2], t.Y[3], t.X[0], t.X[1], t.X[2], t.X[3]);",
          "        AES_FROUND(t.X[0], t.X[1], t.X[2], t.X[3], t.Y[0], t.Y[1], t.Y[2], t.Y[3]);",
          "    AES_FROUND(t.Y[0], t.Y[1], t.Y[2], t.Y[3], t.X[0], t.X[1], t.X[2], t.X[3]);",
          "             ((uint32_t) FSb[MBEDTLS_BYTE_0(t.Y[0])]) ^",
          "             ((uint32_t) FSb[MBEDTLS_BYTE_1(t.Y[1])] <<  8) ^",
          "             ((uint32_t) FSb[MBEDTLS_BYTE_2(t.Y[2])] << 16) ^",
          "             ((uint32_t) FSb[MBEDTLS_BYTE_3(t.Y[3])] << 24);",
          "             ((uint32_t) FSb[MBEDTLS_BYTE_0(t.Y[1])]) ^",
          "             ((uint32_t) FSb[MBEDTLS_BYTE_1(t.Y[2])] <<  8) ^",
          "             ((uint32_t) FSb[MBEDTLS_BYTE_2(t.Y[3])] << 16) ^",
          "             ((uint32_t) FSb[MBEDTLS_BYTE_3(t.Y[0])] << 24);",
          "             ((uint32_t) FSb[MBEDTLS_BYTE_0(t.Y[2])]) ^",
          "             ((uint32_t) FSb[MBEDTLS_BYTE_1(t.Y[3])] <<  8) ^",
          "             ((uint32_t) FSb[MBEDTLS_BYTE_2(t.Y[0])] << 16) ^",
          "             ((uint32_t) FSb[MBEDTLS_BYTE_3(t.Y[1])] << 24);",
          "             ((uint32_t) FSb[MBEDTLS_BYTE_0(t.Y[3])]) ^",
          "             ((uint32_t) FSb[MBEDTLS_BYTE_1(t.Y[0])] <<  8) ^",
          "             ((uint32_t) FSb[MBEDTLS_BYTE_2(t.Y[1])] << 16) ^",
          "             ((uint32_t) FSb[MBEDTLS_BYTE_3(t.Y[2])] << 24);"
        ]
      },
      "Suggestion": "Consider passing 'FT0', 'FT1', 'FT2', 'FT3' and 'FSb' explicitly as arguments to the function 'mbedtls_internal_aes_encrypt' and use those arguments instead; use the 'restrict' keyword for 'FT0', 'FT1', 'FT2', 'FT3' and 'FSb' to hint the compiler that they are free of aliasing",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR001"
    },
    {
      "Check": "PWR001",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/library/aes.c:945:1",
      "Title": "Declare global variables as function parameters",
      "RelatedCodeList": {
        "Subtitle": "Usages",
        "Code": [
          "        AES_RROUND(t.Y[0], t.Y[1], t.Y[2], t.Y[3], t.X[0], t.X[1], t.X[2], t.X[3]);",
          "        AES_RROUND(t.X[0], t.X[1], t.X[2], t.X[3], t.Y[0], t.Y[1], t.Y[2], t.Y[3]);",
          "    AES_RROUND(t.Y[0], t.Y[1], t.Y[2], t.Y[3], t.X[0], t.X[1], t.X[2], t.X[3]);",
          "             ((uint32_t) RSb[MBEDTLS_BYTE_0(t.Y[0])]) ^",
          "             ((uint32_t) RSb[MBEDTLS_BYTE_1(t.Y[3])] <<  8) ^",
          "             ((uint32_t) RSb[MBEDTLS_BYTE_2(t.Y[2])] << 16) ^",
          "             ((uint32_t) RSb[MBEDTLS_BYTE_3(t.Y[1])] << 24);",
          "             ((uint32_t) RSb[MBEDTLS_BYTE_0(t.Y[1])]) ^",
          "             ((uint32_t) RSb[MBEDTLS_BYTE_1(t.Y[0])] <<  8) ^",
          "             ((uint32_t) RSb[MBEDTLS_BYTE_2(t.Y[3])] << 16) ^",
          "             ((uint32_t) RSb[MBEDTLS_BYTE_3(t.Y[2])] << 24);",
          "             ((uint32_t) RSb[MBEDTLS_BYTE_0(t.Y[2])]) ^",
          "             ((uint32_t) RSb[MBEDTLS_BYTE_1(t.Y[1])] <<  8) ^",
          "             ((uint32_t) RSb[MBEDTLS_BYTE_2(t.Y[0])] << 16) ^",
          "             ((uint32_t) RSb[MBEDTLS_BYTE_3(t.Y[3])] << 24);",
          "             ((uint32_t) RSb[MBEDTLS_BYTE_0(t.Y[3])]) ^",
          "             ((uint32_t) RSb[MBEDTLS_BYTE_1(t.Y[2])] <<  8) ^",
          "             ((uint32_t) RSb[MBEDTLS_BYTE_2(t.Y[1])] << 16) ^",
          "             ((uint32_t) RSb[MBEDTLS_BYTE_3(t.Y[0])] << 24);"
        ]
      },
      "Suggestion": "Consider passing 'RT0', 'RT1', 'RT2', 'RT3' and 'RSb' explicitly as arguments to the function 'mbedtls_internal_aes_decrypt' and use those arguments instead; use the 'restrict' keyword for 'RT0', 'RT1', 'RT2', 'RT3' and 'RSb' to hint the compiler that they are free of aliasing",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR001"
    },
    {
      "Check": "PWR001",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/library/aes.c:1817:1",
      "Title": "Declare global variables as function parameters",
      "RelatedCodeList": {
        "Subtitle": "Usages",
        "Code": [
          "            sizeof(aes_test_ecb_enc) / sizeof(*aes_test_ecb_enc);",
          "                aes_tests = aes_test_ecb_dec[u];",
          "                aes_tests = aes_test_ecb_enc[u];",
          "            sizeof(aes_test_cbc_dec) / sizeof(*aes_test_cbc_dec);",
          "                aes_tests = aes_test_cbc_dec[u];",
          "                aes_tests = aes_test_cbc_enc[u];",
          "            sizeof(aes_test_cfb128_key) / sizeof(*aes_test_cfb128_key);",
          "            memcpy(iv,  aes_test_cfb128_iv, 16);",
          "            memcpy(key, aes_test_cfb128_key[u], keybits / 8);",
          "                memcpy(buf, aes_test_cfb128_ct[u], 64);",
          "                aes_tests = aes_test_cfb128_pt;",
          "                memcpy(buf, aes_test_cfb128_pt, 64);",
          "                aes_tests = aes_test_cfb128_ct[u];",
          "            sizeof(aes_test_ofb_key) / sizeof(*aes_test_ofb_key);",
          "            memcpy(iv,  aes_test_ofb_iv, 16);",
          "            memcpy(key, aes_test_ofb_key[u], keybits / 8);",
          "                memcpy(buf, aes_test_ofb_ct[u], 64);",
          "                aes_tests = aes_test_ofb_pt;",
          "                memcpy(buf, aes_test_ofb_pt, 64);",
          "                aes_tests = aes_test_ofb_ct[u];",
          "            sizeof(aes_test_ctr_key) / sizeof(*aes_test_ctr_key);",
          "            memcpy(nonce_counter, aes_test_ctr_nonce_counter[u], 16);",
          "            memcpy(key, aes_test_ctr_key[u], 16);",
          "            len = aes_test_ctr_len[u];",
          "                memcpy(buf, aes_test_ctr_ct[u], len);",
          "                aes_tests = aes_test_ctr_pt[u];",
          "                memcpy(buf, aes_test_ctr_pt[u], len);",
          "                aes_tests = aes_test_ctr_ct[u];",
          "            sizeof(aes_test_xts_key) / sizeof(*aes_test_xts_key);",
          "            memcpy(key, aes_test_xts_key[u], 32);",
          "            data_unit = aes_test_xts_data_unit[u];",
          "            len = sizeof(*aes_test_xts_ct32);",
          "                memcpy(buf, aes_test_xts_ct32[u], len);",
          "                aes_tests = aes_test_xts_pt32[u];",
          "                memcpy(buf, aes_test_xts_pt32[u], len);",
          "                aes_tests = aes_test_xts_ct32[u];"
        ]
      },
      "Suggestion": "Consider passing 'aes_test_ecb_enc', 'aes_test_ecb_dec', 'aes_test_cbc_dec', 'aes_test_cbc_enc', 'aes_test_cfb128_key', 'aes_test_cfb128_iv', 'aes_test_cfb128_ct', 'aes_test_cfb128_pt', 'aes_test_ofb_key', 'aes_test_ofb_iv', 'aes_test_ofb_ct', 'aes_test_ofb_pt', 'aes_test_ctr_key', 'aes_test_ctr_nonce_counter', 'aes_test_ctr_len', 'aes_test_ctr_ct', 'aes_test_ctr_pt', 'aes_test_xts_key', 'aes_test_xts_data_unit', 'aes_test_xts_ct32' and 'aes_test_xts_pt32' explicitly as arguments to the function 'mbedtls_aes_self_test' and use those arguments instead; use the 'restrict' keyword for 'aes_test_ecb_enc', 'aes_test_ecb_dec', 'aes_test_cbc_dec', 'aes_test_cbc_enc', 'aes_test_cfb128_key', 'aes_test_cfb128_iv', 'aes_test_cfb128_ct', 'aes_test_cfb128_pt', 'aes_test_ofb_key', 'aes_test_ofb_iv', 'aes_test_ofb_ct', 'aes_test_ofb_pt', 'aes_test_ctr_key', 'aes_test_ctr_nonce_counter', 'aes_test_ctr_len', 'aes_test_ctr_ct', 'aes_test_ctr_pt', 'aes_test_xts_key', 'aes_test_xts_data_unit', 'aes_test_xts_ct32' and 'aes_test_xts_pt32' to hint the compiler that they are free of aliasing",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR001"
    },
    {
      "Check": "PWR001",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/library/aesni.c:49:1",
      "Title": "Declare global variables as function parameters",
      "RelatedCodeList": {
        "Subtitle": "Usages",
        "Code": [
          "    if (!done) {",
          "             : \"=c\" (c)",
          "        done = 1;",
          "    return (c & what) != 0;"
        ]
      },
      "Suggestion": "Consider passing 'done' and 'c' explicitly as arguments to the function 'mbedtls_aesni_has_support' and use those arguments instead; use the 'restrict' keyword for 'done' and 'c' to hint the compiler that they are free of aliasing",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR001"
    },
    {
      "Check": "PWR001",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/library/aria.c:274:1",
      "Title": "Declare global variables as function parameters",
      "RelatedCodeList": {
        "Subtitle": "Usages",
        "Code": [
          "    aria_sl(&a, &b, &c, &d, aria_sb1, aria_sb2, aria_is1, aria_is2);"
        ]
      },
      "Suggestion": "Consider passing 'aria_sb1', 'aria_sb2', 'aria_is1' and 'aria_is2' explicitly as arguments to the function 'aria_fo_xor' and use those arguments instead; use the 'restrict' keyword for 'aria_sb1', 'aria_sb2', 'aria_is1' and 'aria_is2' to hint the compiler that they are free of aliasing",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR001"
    },
    {
      "Check": "PWR001",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/library/aria.c:296:1",
      "Title": "Declare global variables as function parameters",
      "RelatedCodeList": {
        "Subtitle": "Usages",
        "Code": [
          "    aria_sl(&a, &b, &c, &d, aria_is1, aria_is2, aria_sb1, aria_sb2);"
        ]
      },
      "Suggestion": "Consider passing 'aria_is1', 'aria_is2', 'aria_sb1' and 'aria_sb2' explicitly as arguments to the function 'aria_fe_xor' and use those arguments instead; use the 'restrict' keyword for 'aria_is1', 'aria_is2', 'aria_sb1' and 'aria_sb2' to hint the compiler that they are free of aliasing",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR001"
    },
    {
      "Check": "PWR001",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/library/aria.c:441:1",
      "Title": "Declare global variables as function parameters",
      "RelatedCodeList": {
        "Subtitle": "Usages",
        "Code": [
          "        aria_sl(&a, &b, &c, &d, aria_sb1, aria_sb2, aria_is1, aria_is2);",
          "        aria_sl(&a, &b, &c, &d, aria_is1, aria_is2, aria_sb1, aria_sb2);"
        ]
      },
      "Suggestion": "Consider passing 'aria_sb1', 'aria_sb2', 'aria_is1' and 'aria_is2' explicitly as arguments to the function 'mbedtls_aria_crypt_ecb' and use those arguments instead; use the 'restrict' keyword for 'aria_sb1', 'aria_sb2', 'aria_is1' and 'aria_is2' to hint the compiler that they are free of aliasing",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR001"
    },
    {
      "Check": "PWR001",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/library/aria.c:811:1",
      "Title": "Declare global variables as function parameters",
      "RelatedCodeList": {
        "Subtitle": "Usages",
        "Code": [
          "        mbedtls_aria_setkey_enc(&ctx, aria_test1_ecb_key, 128 + 64 * i);",
          "        mbedtls_aria_crypt_ecb(&ctx, aria_test1_ecb_pt, blk);",
          "            memcmp(blk, aria_test1_ecb_ct[i], MBEDTLS_ARIA_BLOCKSIZE)",
          "        mbedtls_aria_setkey_dec(&ctx, aria_test1_ecb_key, 128 + 64 * i);",
          "        mbedtls_aria_crypt_ecb(&ctx, aria_test1_ecb_ct[i], blk);",
          "            memcmp(blk, aria_test1_ecb_pt, MBEDTLS_ARIA_BLOCKSIZE)",
          "        mbedtls_aria_setkey_enc(&ctx, aria_test2_key, 128 + 64 * i);",
          "        memcpy(iv, aria_test2_iv, MBEDTLS_ARIA_BLOCKSIZE);",
          "                               aria_test2_pt, buf);",
          "        ARIA_SELF_TEST_ASSERT(memcmp(buf, aria_test2_cbc_ct[i], 48)",
          "        mbedtls_aria_setkey_dec(&ctx, aria_test2_key, 128 + 64 * i);",
          "        memcpy(iv, aria_test2_iv, MBEDTLS_ARIA_BLOCKSIZE);",
          "                               aria_test2_cbc_ct[i], buf);",
          "        ARIA_SELF_TEST_ASSERT(memcmp(buf, aria_test2_pt, 48) != 0);",
          "        mbedtls_aria_setkey_enc(&ctx, aria_test2_key, 128 + 64 * i);",
          "        memcpy(iv, aria_test2_iv, MBEDTLS_ARIA_BLOCKSIZE);",
          "                                  aria_test2_pt, buf);",
          "        ARIA_SELF_TEST_ASSERT(memcmp(buf, aria_test2_cfb_ct[i], 48) != 0);",
          "        mbedtls_aria_setkey_enc(&ctx, aria_test2_key, 128 + 64 * i);",
          "        memcpy(iv, aria_test2_iv, MBEDTLS_ARIA_BLOCKSIZE);",
          "                                  iv, aria_test2_cfb_ct[i], buf);",
          "        ARIA_SELF_TEST_ASSERT(memcmp(buf, aria_test2_pt, 48) != 0);",
          "        mbedtls_aria_setkey_enc(&ctx, aria_test2_key, 128 + 64 * i);",
          "                               aria_test2_pt, buf);",
          "        ARIA_SELF_TEST_ASSERT(memcmp(buf, aria_test2_ctr_ct[i], 48) != 0);",
          "        mbedtls_aria_setkey_enc(&ctx, aria_test2_key, 128 + 64 * i);",
          "                               aria_test2_ctr_ct[i], buf);",
          "        ARIA_SELF_TEST_ASSERT(memcmp(buf, aria_test2_pt, 48) != 0);"
        ]
      },
      "Suggestion": "Consider passing 'aria_test1_ecb_key', 'aria_test1_ecb_pt', 'aria_test1_ecb_ct', 'aria_test2_key', 'aria_test2_iv', 'aria_test2_pt', 'aria_test2_cbc_ct', 'aria_test2_cfb_ct' and 'aria_test2_ctr_ct' explicitly as arguments to the function 'mbedtls_aria_self_test' and use those arguments instead; use the 'restrict' keyword for 'aria_test1_ecb_key', 'aria_test1_ecb_pt', 'aria_test1_ecb_ct', 'aria_test2_key', 'aria_test2_iv', 'aria_test2_pt', 'aria_test2_cbc_ct', 'aria_test2_cfb_ct' and 'aria_test2_ctr_ct' to hint the compiler that they are free of aliasing",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR001"
    },
    {
      "Check": "PWR001",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/library/base64.c:254:1",
      "Title": "Declare global variables as function parameters",
      "RelatedCodeList": {
        "Subtitle": "Usages",
        "Code": [
          "    src = base64_test_dec;",
          "        memcmp(base64_test_enc, buffer, 88) != 0) {",
          "    src = base64_test_enc;",
          "        memcmp(base64_test_dec, buffer, 64) != 0) {"
        ]
      },
      "Suggestion": "Consider passing 'base64_test_dec' and 'base64_test_enc' explicitly as arguments to the function 'mbedtls_base64_self_test' and use those arguments instead; use the 'restrict' keyword for 'base64_test_dec' and 'base64_test_enc' to hint the compiler that they are free of aliasing",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR001"
    },
    {
      "Check": "PWR001",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/library/bignum.c:2251:1",
      "Title": "Declare global variables as function parameters",
      "RelatedCodeList": {
        "Subtitle": "Usages",
        "Code": [
          "    for (i = 0; i < sizeof(small_prime_gaps); p += small_prime_gaps[i], i++) {"
        ]
      },
      "Suggestion": "Consider passing 'small_prime_gaps' explicitly as argument to the function 'mpi_check_small_factors' and use that argument instead; use the 'restrict' keyword for 'small_prime_gaps' to hint the compiler that it is free of aliasing",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR001"
    },
    {
      "Check": "PWR001",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/library/bignum.c:2541:1",
      "Title": "Declare global variables as function parameters",
      "RelatedCodeList": {
        "Subtitle": "Usages",
        "Code": [
          "        MBEDTLS_MPI_CHK(mbedtls_mpi_lset(&X, gcd_pairs[i][0]));",
          "        MBEDTLS_MPI_CHK(mbedtls_mpi_lset(&Y, gcd_pairs[i][1]));",
          "        if (mbedtls_mpi_cmp_int(&A, gcd_pairs[i][2]) != 0) {"
        ]
      },
      "Suggestion": "Consider passing 'gcd_pairs' explicitly as argument to the function 'mbedtls_mpi_self_test' and use that argument instead; use the 'restrict' keyword for 'gcd_pairs' to hint the compiler that it is free of aliasing",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR001"
    },
    {
      "Check": "PWR001",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/library/camellia.c:249:1",
      "Title": "Declare global variables as function parameters",
      "RelatedCodeList": {
        "Subtitle": "Usages",
        "Code": [
          "    I0 = ((uint32_t) SBOX1(MBEDTLS_BYTE_3(I0)) << 24) |",
          "         ((uint32_t) SBOX2(MBEDTLS_BYTE_2(I0)) << 16) |",
          "         ((uint32_t) SBOX3(MBEDTLS_BYTE_1(I0)) <<  8) |",
          "         ((uint32_t) SBOX4(MBEDTLS_BYTE_0(I0)));",
          "    I1 = ((uint32_t) SBOX2(MBEDTLS_BYTE_3(I1)) << 24) |",
          "         ((uint32_t) SBOX3(MBEDTLS_BYTE_2(I1)) << 16) |",
          "         ((uint32_t) SBOX4(MBEDTLS_BYTE_1(I1)) <<  8) |",
          "         ((uint32_t) SBOX1(MBEDTLS_BYTE_0(I1)));"
        ]
      },
      "Suggestion": "Consider passing 'FSb', 'FSb2', 'FSb3' and 'FSb4' explicitly as arguments to the function 'camellia_feistel' and use those arguments instead; use the 'restrict' keyword for 'FSb', 'FSb2', 'FSb3' and 'FSb4' to hint the compiler that they are free of aliasing",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR001"
    },
    {
      "Check": "PWR001",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/library/camellia.c:291:1",
      "Title": "Declare global variables as function parameters",
      "RelatedCodeList": {
        "Subtitle": "Usages",
        "Code": [
          "        SIGMA[i][0] = MBEDTLS_GET_UINT32_BE(SIGMA_CHARS[i], 0);",
          "        SIGMA[i][1] = MBEDTLS_GET_UINT32_BE(SIGMA_CHARS[i], 4);",
          "    SHIFT_AND_PLACE(idx, 0);",
          "        SHIFT_AND_PLACE(idx, 1);",
          "    SHIFT_AND_PLACE(idx, 2);",
          "        SHIFT_AND_PLACE(idx, 3);",
          "        if (transposes[idx][i] != -1) {",
          "            RK[32 + 12 * idx + i] = RK[transposes[idx][i]];"
        ]
      },
      "Suggestion": "Consider passing 'SIGMA_CHARS', 'shifts', 'indexes' and 'transposes' explicitly as arguments to the function 'mbedtls_camellia_setkey_enc' and use those arguments instead; use the 'restrict' keyword for 'SIGMA_CHARS', 'shifts', 'indexes' and 'transposes' to hint the compiler that they are free of aliasing",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR001"
    },
    {
      "Check": "PWR001",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/library/camellia.c:862:1",
      "Title": "Declare global variables as function parameters",
      "RelatedCodeList": {
        "Subtitle": "Usages",
        "Code": [
          "            memcpy(key, camellia_test_ecb_key[u][i], 16 + 8 * u);",
          "                memcpy(src, camellia_test_ecb_cipher[u][i], 16);",
          "                memcpy(dst, camellia_test_ecb_plain[i], 16);",
          "                memcpy(src, camellia_test_ecb_plain[i], 16);",
          "                memcpy(dst, camellia_test_ecb_cipher[u][i], 16);",
          "        memcpy(src, camellia_test_cbc_iv, 16);",
          "        memcpy(dst, camellia_test_cbc_iv, 16);",
          "        memcpy(key, camellia_test_cbc_key[u], 16 + 8 * u);",
          "                memcpy(src, camellia_test_cbc_cipher[u][i], 16);",
          "                memcpy(dst, camellia_test_cbc_plain[i], 16);",
          "                memcpy(src, camellia_test_cbc_plain[i], 16);",
          "                memcpy(dst, camellia_test_cbc_cipher[u][i], 16);",
          "        memcpy(nonce_counter, camellia_test_ctr_nonce_counter[u], 16);",
          "        memcpy(key, camellia_test_ctr_key[u], 16);",
          "            len = camellia_test_ctr_len[u];",
          "            memcpy(buf, camellia_test_ctr_ct[u], len);",
          "            if (memcmp(buf, camellia_test_ctr_pt[u], len) != 0) {",
          "            len = camellia_test_ctr_len[u];",
          "            memcpy(buf, camellia_test_ctr_pt[u], len);",
          "            if (memcmp(buf, camellia_test_ctr_ct[u], len) != 0) {"
        ]
      },
      "Suggestion": "Consider passing 'camellia_test_ecb_key', 'camellia_test_ecb_cipher', 'camellia_test_ecb_plain', 'camellia_test_cbc_iv', 'camellia_test_cbc_key', 'camellia_test_cbc_cipher', 'camellia_test_cbc_plain', 'camellia_test_ctr_nonce_counter', 'camellia_test_ctr_key', 'camellia_test_ctr_len', 'camellia_test_ctr_ct' and 'camellia_test_ctr_pt' explicitly as arguments to the function 'mbedtls_camellia_self_test' and use those arguments instead; use the 'restrict' keyword for 'camellia_test_ecb_key', 'camellia_test_ecb_cipher', 'camellia_test_ecb_plain', 'camellia_test_cbc_iv', 'camellia_test_cbc_key', 'camellia_test_cbc_cipher', 'camellia_test_cbc_plain', 'camellia_test_ctr_nonce_counter', 'camellia_test_ctr_key', 'camellia_test_ctr_len', 'camellia_test_ctr_ct' and 'camellia_test_ctr_pt' to hint the compiler that they are free of aliasing",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR001"
    },
    {
      "Check": "PWR001",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/library/ccm.c:680:1",
      "Title": "Declare global variables as function parameters",
      "RelatedCodeList": {
        "Subtitle": "Usages",
        "Code": [
          "    if (mbedtls_ccm_setkey(&ctx, MBEDTLS_CIPHER_ID_AES, key_test_data,",
          "                           8 * sizeof(key_test_data)) != 0) {",
          "        memcpy(plaintext, msg_test_data, msg_len_test_data[i]);",
          "        ret = mbedtls_ccm_encrypt_and_tag(&ctx, msg_len_test_data[i],",
          "                                          iv_test_data, iv_len_test_data[i],",
          "                                          ad_test_data, add_len_test_data[i],",
          "                                          ciphertext + msg_len_test_data[i],",
          "                                          tag_len_test_data[i]);",
          "            memcmp(ciphertext, res_test_data[i],",
          "                   msg_len_test_data[i] + tag_len_test_data[i]) != 0) {",
          "        ret = mbedtls_ccm_auth_decrypt(&ctx, msg_len_test_data[i],",
          "                                       iv_test_data, iv_len_test_data[i],",
          "                                       ad_test_data, add_len_test_data[i],",
          "                                       ciphertext + msg_len_test_data[i],",
          "                                       tag_len_test_data[i]);",
          "            memcmp(plaintext, msg_test_data, msg_len_test_data[i]) != 0) {"
        ]
      },
      "Suggestion": "Consider passing 'key_test_data', 'msg_test_data', 'msg_len_test_data', 'iv_test_data', 'iv_len_test_data', 'ad_test_data', 'add_len_test_data', 'tag_len_test_data' and 'res_test_data' explicitly as arguments to the function 'mbedtls_ccm_self_test' and use those arguments instead; use the 'restrict' keyword for 'key_test_data', 'msg_test_data', 'msg_len_test_data', 'iv_test_data', 'iv_len_test_data', 'ad_test_data', 'add_len_test_data', 'tag_len_test_data' and 'res_test_data' to hint the compiler that they are free of aliasing",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR001"
    },
    {
      "Check": "PWR001",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/library/chacha20.c:460:1",
      "Title": "Declare global variables as function parameters",
      "RelatedCodeList": {
        "Subtitle": "Usages",
        "Code": [
          "        ret = mbedtls_chacha20_crypt(test_keys[i],",
          "                                     test_nonces[i],",
          "                                     test_counters[i],",
          "                                     test_lengths[i],",
          "                                     test_input[i],",
          "        ASSERT(0 == memcmp(output, test_output[i], test_lengths[i]),"
        ]
      },
      "Suggestion": "Consider passing 'test_keys', 'test_nonces', 'test_counters', 'test_lengths', 'test_input' and 'test_output' explicitly as arguments to the function 'mbedtls_chacha20_self_test' and use those arguments instead; use the 'restrict' keyword for 'test_keys', 'test_nonces', 'test_counters', 'test_lengths', 'test_input' and 'test_output' to hint the compiler that they are free of aliasing",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR001"
    },
    {
      "Check": "PWR001",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/library/chachapoly.c:427:1",
      "Title": "Declare global variables as function parameters",
      "RelatedCodeList": {
        "Subtitle": "Usages",
        "Code": [
          "        ret = mbedtls_chachapoly_setkey(&ctx, test_key[i]);",
          "                                                 test_input_len[i],",
          "                                                 test_nonce[i],",
          "                                                 test_aad[i],",
          "                                                 test_aad_len[i],",
          "                                                 test_input[i],",
          "        ASSERT(0 == memcmp(output, test_output[i], test_input_len[i]),",
          "        ASSERT(0 == memcmp(mac, test_mac[i], 16U),"
        ]
      },
      "Suggestion": "Consider passing 'test_key', 'test_input_len', 'test_nonce', 'test_aad', 'test_aad_len', 'test_input', 'test_output' and 'test_mac' explicitly as arguments to the function 'mbedtls_chachapoly_self_test' and use those arguments instead; use the 'restrict' keyword for 'test_key', 'test_input_len', 'test_nonce', 'test_aad', 'test_aad_len', 'test_input', 'test_output' and 'test_mac' to hint the compiler that they are free of aliasing",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR001"
    },
    {
      "Check": "PWR001",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/library/cipher.c:58:1",
      "Title": "Declare global variables as function parameters",
      "RelatedCodeList": {
        "Subtitle": "Usages",
        "Code": [
          "    return mbedtls_cipher_base_lookup_table[info->base_idx];"
        ]
      },
      "Suggestion": "Consider passing 'mbedtls_cipher_base_lookup_table' explicitly as argument to the function 'mbedtls_cipher_get_base' and use that argument instead; use the 'restrict' keyword for 'mbedtls_cipher_base_lookup_table' to hint the compiler that it is free of aliasing",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR001"
    },
    {
      "Check": "PWR001",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/library/cipher.c:64:1",
      "Title": "Declare global variables as function parameters",
      "RelatedCodeList": {
        "Subtitle": "Usages",
        "Code": [
          "    if (!supported_init) {",
          "        def = mbedtls_cipher_definitions;",
          "        type = mbedtls_cipher_supported;",
          "        supported_init = 1;",
          "    return mbedtls_cipher_supported;"
        ]
      },
      "Suggestion": "Consider passing 'supported_init', 'mbedtls_cipher_definitions' and 'mbedtls_cipher_supported' explicitly as arguments to the function 'mbedtls_cipher_list' and use those arguments instead; use the 'restrict' keyword for 'supported_init', 'mbedtls_cipher_definitions' and 'mbedtls_cipher_supported' to hint the compiler that they are free of aliasing",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR001"
    },
    {
      "Check": "PWR001",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/library/cipher.c:85:1",
      "Title": "Declare global variables as function parameters",
      "RelatedCodeList": {
        "Subtitle": "Usages",
        "Code": [
          "    for (def = mbedtls_cipher_definitions; def->info != NULL; def++) {"
        ]
      },
      "Suggestion": "Consider passing 'mbedtls_cipher_definitions' explicitly as argument to the function 'mbedtls_cipher_info_from_type' and use that argument instead; use the 'restrict' keyword for 'mbedtls_cipher_definitions' to hint the compiler that it is free of aliasing",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR001"
    },
    {
      "Check": "PWR001",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/library/cipher.c:99:1",
      "Title": "Declare global variables as function parameters",
      "RelatedCodeList": {
        "Subtitle": "Usages",
        "Code": [
          "    for (def = mbedtls_cipher_definitions; def->info != NULL; def++) {"
        ]
      },
      "Suggestion": "Consider passing 'mbedtls_cipher_definitions' explicitly as argument to the function 'mbedtls_cipher_info_from_string' and use that argument instead; use the 'restrict' keyword for 'mbedtls_cipher_definitions' to hint the compiler that it is free of aliasing",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR001"
    },
    {
      "Check": "PWR001",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/library/cipher.c:117:1",
      "Title": "Declare global variables as function parameters",
      "RelatedCodeList": {
        "Subtitle": "Usages",
        "Code": [
          "    for (def = mbedtls_cipher_definitions; def->info != NULL; def++) {"
        ]
      },
      "Suggestion": "Consider passing 'mbedtls_cipher_definitions' explicitly as argument to the function 'mbedtls_cipher_info_from_values' and use that argument instead; use the 'restrict' keyword for 'mbedtls_cipher_definitions' to hint the compiler that it is free of aliasing",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR001"
    },
    {
      "Check": "PWR001",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/library/cmac.c:890:1",
      "Title": "Declare global variables as function parameters",
      "RelatedCodeList": {
        "Subtitle": "Usages",
        "Code": [
          "        ret = mbedtls_aes_cmac_prf_128(PRFK, PRFKlen[i], PRFM, 20, output);",
          "            memcmp(output, PRFT[i], MBEDTLS_AES_BLOCK_SIZE) != 0) {"
        ]
      },
      "Suggestion": "Consider passing 'PRFK', 'PRFKlen', 'PRFM' and 'PRFT' explicitly as arguments to the function 'test_aes128_cmac_prf' and use those arguments instead; use the 'restrict' keyword for 'PRFK', 'PRFKlen', 'PRFM' and 'PRFT' to hint the compiler that they are free of aliasing",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR001"
    },
    {
      "Check": "PWR001",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/library/cmac.c:915:1",
      "Title": "Declare global variables as function parameters",
      "RelatedCodeList": {
        "Subtitle": "Usages",
        "Code": [
          "                                 aes_128_key,",
          "                                 (const unsigned char *) aes_128_subkeys,",
          "                                    aes_128_key,",
          "                                    test_message,",
          "                                    aes_message_lengths,",
          "                                    (const unsigned char *) aes_128_expected_result,",
          "                                 aes_192_key,",
          "                                 (const unsigned char *) aes_192_subkeys,",
          "                                    aes_192_key,",
          "                                    test_message,",
          "                                    aes_message_lengths,",
          "                                    (const unsigned char *) aes_192_expected_result,",
          "                                 aes_256_key,",
          "                                 (const unsigned char *) aes_256_subkeys,",
          "                                    aes_256_key,",
          "                                    test_message,",
          "                                    aes_message_lengths,",
          "                                    (const unsigned char *) aes_256_expected_result,",
          "                                 des3_2key_key,",
          "                                 (const unsigned char *) des3_2key_subkeys,",
          "                                    des3_2key_key,",
          "                                    test_message,",
          "                                    des3_message_lengths,",
          "                                    (const unsigned char *) des3_2key_expected_result,",
          "                                 des3_3key_key,",
          "                                 (const unsigned char *) des3_3key_subkeys,",
          "                                    des3_3key_key,",
          "                                    test_message,",
          "                                    des3_message_lengths,",
          "                                    (const unsigned char *) des3_3key_expected_result,"
        ]
      },
      "Suggestion": "Consider passing 'aes_128_key', 'aes_128_subkeys', 'test_message', 'aes_message_lengths', 'aes_128_expected_result', 'aes_192_key', 'aes_192_subkeys', 'aes_192_expected_result', 'aes_256_key', 'aes_256_subkeys', 'aes_256_expected_result', 'des3_2key_key', 'des3_2key_subkeys', 'des3_message_lengths', 'des3_2key_expected_result', 'des3_3key_key', 'des3_3key_subkeys' and 'des3_3key_expected_result' explicitly as arguments to the function 'mbedtls_cmac_self_test' and use those arguments instead; use the 'restrict' keyword for 'aes_128_key', 'aes_128_subkeys', 'test_message', 'aes_message_lengths', 'aes_128_expected_result', 'aes_192_key', 'aes_192_subkeys', 'aes_192_expected_result', 'aes_256_key', 'aes_256_subkeys', 'aes_256_expected_result', 'des3_2key_key', 'des3_2key_subkeys', 'des3_message_lengths', 'des3_2key_expected_result', 'des3_3key_key', 'des3_3key_subkeys' and 'des3_3key_expected_result' to hint the compiler that they are free of aliasing",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR001"
    },
    {
      "Check": "PWR001",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/library/ctr_drbg.c:928:1",
      "Title": "Declare global variables as function parameters",
      "RelatedCodeList": {
        "Subtitle": "Usages",
        "Code": [
          "    memcpy(buf, p + test_offset, len);",
          "    test_offset += len;"
        ]
      },
      "Suggestion": "Consider passing 'test_offset' explicitly as argument to the function 'ctr_drbg_self_test_entropy' and use that argument instead; use the 'restrict' keyword for 'test_offset' to hint the compiler that it is free of aliasing",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR001"
    },
    {
      "Check": "PWR001",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/library/ctr_drbg.c:949:1",
      "Title": "Declare global variables as function parameters",
      "RelatedCodeList": {
        "Subtitle": "Usages",
        "Code": [
          "    unsigned char buf[sizeof(result_pr)];",
          "    test_offset = 0;",
          "                              (void *) entropy_source_pr,",
          "                              pers_pr, MBEDTLS_CTR_DRBG_KEYSIZE));",
          "    CHK(mbedtls_ctr_drbg_random(&ctx, buf, sizeof(result_pr)));",
          "    CHK(memcmp(buf, result_pr, sizeof(result_pr)));",
          "    test_offset = 0;",
          "                              (void *) entropy_source_nopr,",
          "                              pers_nopr, MBEDTLS_CTR_DRBG_KEYSIZE));",
          "    CHK(mbedtls_ctr_drbg_random(&ctx, buf, sizeof(result_nopr)));",
          "    CHK(memcmp(buf, result_nopr, sizeof(result_nopr)));"
        ]
      },
      "Suggestion": "Consider passing 'result_pr', 'test_offset', 'entropy_source_pr', 'pers_pr', 'entropy_source_nopr', 'pers_nopr' and 'result_nopr' explicitly as arguments to the function 'mbedtls_ctr_drbg_self_test' and use those arguments instead; use the 'restrict' keyword for 'result_pr', 'test_offset', 'entropy_source_pr', 'pers_pr', 'entropy_source_nopr', 'pers_nopr' and 'result_nopr' to hint the compiler that they are free of aliasing",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR001"
    },
    {
      "Check": "PWR001",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/library/des.c:312:1",
      "Title": "Declare global variables as function parameters",
      "RelatedCodeList": {
        "Subtitle": "Usages",
        "Code": [
          "        key[i] = odd_parity_table[key[i] / 2];"
        ]
      },
      "Suggestion": "Consider passing 'odd_parity_table' explicitly as argument to the function 'mbedtls_des_key_set_parity' and use that argument instead; use the 'restrict' keyword for 'odd_parity_table' to hint the compiler that it is free of aliasing",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR001"
    },
    {
      "Check": "PWR001",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/library/des.c:324:1",
      "Title": "Declare global variables as function parameters",
      "RelatedCodeList": {
        "Subtitle": "Usages",
        "Code": [
          "        if (key[i] != odd_parity_table[key[i] / 2]) {"
        ]
      },
      "Suggestion": "Consider passing 'odd_parity_table' explicitly as argument to the function 'mbedtls_des_key_check_key_parity' and use that argument instead; use the 'restrict' keyword for 'odd_parity_table' to hint the compiler that it is free of aliasing",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR001"
    },
    {
      "Check": "PWR001",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/library/des.c:381:1",
      "Title": "Declare global variables as function parameters",
      "RelatedCodeList": {
        "Subtitle": "Usages",
        "Code": [
          "        if (memcmp(weak_key_table[i], key, MBEDTLS_DES_KEY_SIZE) == 0) {"
        ]
      },
      "Suggestion": "Consider passing 'weak_key_table' explicitly as argument to the function 'mbedtls_des_key_check_weak' and use that argument instead; use the 'restrict' keyword for 'weak_key_table' to hint the compiler that it is free of aliasing",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR001"
    },
    {
      "Check": "PWR001",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/library/des.c:395:1",
      "Title": "Declare global variables as function parameters",
      "RelatedCodeList": {
        "Subtitle": "Usages",
        "Code": [
          "    X =   (LHs[(X) & 0xF] << 3) | (LHs[(X >>  8) & 0xF] << 2)",
          "        | (LHs[(X >> 16) & 0xF] << 1) | (LHs[(X >> 24) & 0xF])",
          "        | (LHs[(X >>  5) & 0xF] << 7) | (LHs[(X >> 13) & 0xF] << 6)",
          "        | (LHs[(X >> 21) & 0xF] << 5) | (LHs[(X >> 29) & 0xF] << 4);",
          "    Y =   (RHs[(Y >>  1) & 0xF] << 3) | (RHs[(Y >>  9) & 0xF] << 2)",
          "        | (RHs[(Y >> 17) & 0xF] << 1) | (RHs[(Y >> 25) & 0xF])",
          "        | (RHs[(Y >>  4) & 0xF] << 7) | (RHs[(Y >> 12) & 0xF] << 6)",
          "        | (RHs[(Y >> 20) & 0xF] << 5) | (RHs[(Y >> 28) & 0xF] << 4);"
        ]
      },
      "Suggestion": "Consider passing 'LHs' and 'RHs' explicitly as arguments to the function 'mbedtls_des_setkey' and use those arguments instead; use the 'restrict' keyword for 'LHs' and 'RHs' to hint the compiler that they are free of aliasing",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR001"
    },
    {
      "Check": "PWR001",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/library/des.c:594:1",
      "Title": "Declare global variables as function parameters",
      "RelatedCodeList": {
        "Subtitle": "Usages",
        "Code": [
          "        DES_ROUND(Y, X);",
          "        DES_ROUND(X, Y);"
        ]
      },
      "Suggestion": "Consider passing 'SB8', 'SB6', 'SB4', 'SB2', 'SB7', 'SB5', 'SB3' and 'SB1' explicitly as arguments to the function 'mbedtls_des_crypt_ecb' and use those arguments instead; use the 'restrict' keyword for 'SB8', 'SB6', 'SB4', 'SB2', 'SB7', 'SB5', 'SB3' and 'SB1' to hint the compiler that they are free of aliasing",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR001"
    },
    {
      "Check": "PWR001",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/library/des.c:682:1",
      "Title": "Declare global variables as function parameters",
      "RelatedCodeList": {
        "Subtitle": "Usages",
        "Code": [
          "        DES_ROUND(Y, X);",
          "        DES_ROUND(X, Y);",
          "        DES_ROUND(X, Y);",
          "        DES_ROUND(Y, X);",
          "        DES_ROUND(Y, X);",
          "        DES_ROUND(X, Y);"
        ]
      },
      "Suggestion": "Consider passing 'SB8', 'SB6', 'SB4', 'SB2', 'SB7', 'SB5', 'SB3' and 'SB1' explicitly as arguments to the function 'mbedtls_des3_crypt_ecb' and use those arguments instead; use the 'restrict' keyword for 'SB8', 'SB6', 'SB4', 'SB2', 'SB7', 'SB5', 'SB3' and 'SB1' to hint the compiler that they are free of aliasing",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR001"
    },
    {
      "Check": "PWR001",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/library/des.c:834:1",
      "Title": "Declare global variables as function parameters",
      "RelatedCodeList": {
        "Subtitle": "Usages",
        "Code": [
          "        memcpy(buf, des3_test_buf, 8);",
          "                ret = mbedtls_des_setkey_dec(&ctx, des3_test_keys);",
          "                ret = mbedtls_des_setkey_enc(&ctx, des3_test_keys);",
          "                ret = mbedtls_des3_set2key_dec(&ctx3, des3_test_keys);",
          "                ret = mbedtls_des3_set2key_enc(&ctx3, des3_test_keys);",
          "                ret = mbedtls_des3_set3key_dec(&ctx3, des3_test_keys);",
          "                ret = mbedtls_des3_set3key_enc(&ctx3, des3_test_keys);",
          "             memcmp(buf, des3_test_ecb_dec[u], 8) != 0) ||",
          "             memcmp(buf, des3_test_ecb_enc[u], 8) != 0)) {",
          "        memcpy(iv,  des3_test_iv,  8);",
          "        memcpy(prv, des3_test_iv,  8);",
          "        memcpy(buf, des3_test_buf, 8);",
          "                ret = mbedtls_des_setkey_dec(&ctx, des3_test_keys);",
          "                ret = mbedtls_des_setkey_enc(&ctx, des3_test_keys);",
          "                ret = mbedtls_des3_set2key_dec(&ctx3, des3_test_keys);",
          "                ret = mbedtls_des3_set2key_enc(&ctx3, des3_test_keys);",
          "                ret = mbedtls_des3_set3key_dec(&ctx3, des3_test_keys);",
          "                ret = mbedtls_des3_set3key_enc(&ctx3, des3_test_keys);",
          "             memcmp(buf, des3_test_cbc_dec[u], 8) != 0) ||",
          "             memcmp(buf, des3_test_cbc_enc[u], 8) != 0)) {"
        ]
      },
      "Suggestion": "Consider passing 'des3_test_buf', 'des3_test_keys', 'des3_test_ecb_dec', 'des3_test_ecb_enc', 'des3_test_iv', 'des3_test_cbc_dec' and 'des3_test_cbc_enc' explicitly as arguments to the function 'mbedtls_des_self_test' and use those arguments instead; use the 'restrict' keyword for 'des3_test_buf', 'des3_test_keys', 'des3_test_ecb_dec', 'des3_test_ecb_enc', 'des3_test_iv', 'des3_test_cbc_dec' and 'des3_test_cbc_enc' to hint the compiler that they are free of aliasing",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR001"
    },
    {
      "Check": "PWR001",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/library/dhm.c:678:1",
      "Title": "Declare global variables as function parameters",
      "RelatedCodeList": {
        "Subtitle": "Usages",
        "Code": [
          "                                     (const unsigned char *) mbedtls_test_dhm_params,"
        ]
      },
      "Suggestion": "Consider passing 'mbedtls_test_dhm_params' explicitly as argument to the function 'mbedtls_dhm_self_test' and use that argument instead; use the 'restrict' keyword for 'mbedtls_test_dhm_params' to hint the compiler that it is free of aliasing",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR001"
    },
    {
      "Check": "PWR001",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/library/ecjpake.c:516:1",
      "Title": "Declare global variables as function parameters",
      "RelatedCodeList": {
        "Subtitle": "Usages",
        "Code": [
          "                             &ctx->Xp1, &ctx->Xp2, ID_PEER,"
        ]
      },
      "Suggestion": "Consider passing 'ecjpake_id' explicitly as argument to the function 'mbedtls_ecjpake_read_round_one' and use that argument instead; use the 'restrict' keyword for 'ecjpake_id' to hint the compiler that it is free of aliasing",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR001"
    },
    {
      "Check": "PWR001",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/library/ecjpake.c:529:1",
      "Title": "Declare global variables as function parameters",
      "RelatedCodeList": {
        "Subtitle": "Usages",
        "Code": [
          "                              ID_MINE, buf, len, olen, f_rng, p_rng);"
        ]
      },
      "Suggestion": "Consider passing 'ecjpake_id' explicitly as argument to the function 'mbedtls_ecjpake_write_round_one' and use that argument instead; use the 'restrict' keyword for 'ecjpake_id' to hint the compiler that it is free of aliasing",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR001"
    },
    {
      "Check": "PWR001",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/library/ecjpake.c:566:1",
      "Title": "Declare global variables as function parameters",
      "RelatedCodeList": {
        "Subtitle": "Usages",
        "Code": [
          "                                     &G, &ctx->Xp, ID_PEER, &p, end));"
        ]
      },
      "Suggestion": "Consider passing 'ecjpake_id' explicitly as argument to the function 'mbedtls_ecjpake_read_round_two' and use that argument instead; use the 'restrict' keyword for 'ecjpake_id' to hint the compiler that it is free of aliasing",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR001"
    },
    {
      "Check": "PWR001",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/library/ecjpake.c:652:1",
      "Title": "Declare global variables as function parameters",
      "RelatedCodeList": {
        "Subtitle": "Usages",
        "Code": [
          "                                      &G, &xm, &Xm, ID_MINE,"
        ]
      },
      "Suggestion": "Consider passing 'ecjpake_id' explicitly as argument to the function 'mbedtls_ecjpake_write_round_two' and use that argument instead; use the 'restrict' keyword for 'ecjpake_id' to hint the compiler that it is free of aliasing",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR001"
    },
    {
      "Check": "PWR001",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/library/ecjpake.c:987:1",
      "Title": "Declare global variables as function parameters",
      "RelatedCodeList": {
        "Subtitle": "Usages",
        "Code": [
          "        state = state * 1664525u + 1013904223u;",
          "        out[i] = (unsigned char) state;"
        ]
      },
      "Suggestion": "Consider passing 'state' explicitly as argument to the function 'self_test_rng' and use that argument instead; use the 'restrict' keyword for 'state' to hint the compiler that it is free of aliasing",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR001"
    },
    {
      "Check": "PWR001",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/library/ecjpake.c:1023:1",
      "Title": "Declare global variables as function parameters",
      "RelatedCodeList": {
        "Subtitle": "Usages",
        "Code": [
          "        x = 1664525 * x + 1013904223;",
          "        memcpy(out, &x, use_len);"
        ]
      },
      "Suggestion": "Consider passing 'x' explicitly as argument to the function 'ecjpake_lgc' and use that argument instead; use the 'restrict' keyword for 'x' to hint the compiler that it is free of aliasing",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR001"
    },
    {
      "Check": "PWR001",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/library/ecjpake.c:1053:1",
      "Title": "Declare global variables as function parameters",
      "RelatedCodeList": {
        "Subtitle": "Usages",
        "Code": [
          "                                      ecjpake_test_password,",
          "                                      sizeof(ecjpake_test_password)) == 0);",
          "                                      ecjpake_test_password,",
          "                                      sizeof(ecjpake_test_password)) == 0);",
          "                                      ecjpake_test_x1, sizeof(ecjpake_test_x1),",
          "                                      ecjpake_test_x2, sizeof(ecjpake_test_x2)));",
          "                                      ecjpake_test_x3, sizeof(ecjpake_test_x3),",
          "                                      ecjpake_test_x4, sizeof(ecjpake_test_x4)));",
          "                                               ecjpake_test_cli_one,",
          "                                               sizeof(ecjpake_test_cli_one)) == 0);",
          "                                               ecjpake_test_srv_one,",
          "                                               sizeof(ecjpake_test_srv_one)) == 0);",
          "                                               ecjpake_test_srv_two,",
          "                                               sizeof(ecjpake_test_srv_two)) == 0);",
          "                                               ecjpake_test_cli_two,",
          "                                               sizeof(ecjpake_test_cli_two)) == 0);",
          "    TEST_ASSERT(len == sizeof(ecjpake_test_pms));",
          "    TEST_ASSERT(memcmp(buf, ecjpake_test_pms, len) == 0);",
          "    TEST_ASSERT(len == sizeof(ecjpake_test_shared_key));",
          "    TEST_ASSERT(memcmp(buf, ecjpake_test_shared_key, len) == 0);",
          "    TEST_ASSERT(len == sizeof(ecjpake_test_pms));",
          "    TEST_ASSERT(memcmp(buf, ecjpake_test_pms, len) == 0);",
          "    TEST_ASSERT(len == sizeof(ecjpake_test_shared_key));",
          "    TEST_ASSERT(memcmp(buf, ecjpake_test_shared_key, len) == 0);"
        ]
      },
      "Suggestion": "Consider passing 'ecjpake_test_password', 'ecjpake_test_x1', 'ecjpake_test_x2', 'ecjpake_test_x3', 'ecjpake_test_x4', 'ecjpake_test_cli_one', 'ecjpake_test_srv_one', 'ecjpake_test_srv_two', 'ecjpake_test_cli_two', 'ecjpake_test_pms' and 'ecjpake_test_shared_key' explicitly as arguments to the function 'mbedtls_ecjpake_self_test' and use those arguments instead; use the 'restrict' keyword for 'ecjpake_test_password', 'ecjpake_test_x1', 'ecjpake_test_x2', 'ecjpake_test_x3', 'ecjpake_test_x4', 'ecjpake_test_cli_one', 'ecjpake_test_srv_one', 'ecjpake_test_srv_two', 'ecjpake_test_cli_two', 'ecjpake_test_pms' and 'ecjpake_test_shared_key' to hint the compiler that they are free of aliasing",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR001"
    },
    {
      "Check": "PWR001",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/library/ecp.c:396:1",
      "Title": "Declare global variables as function parameters",
      "RelatedCodeList": {
        "Subtitle": "Usages",
        "Code": [
          "    return ecp_supported_curves;"
        ]
      },
      "Suggestion": "Consider passing 'ecp_supported_curves' explicitly as argument to the function 'mbedtls_ecp_curve_list' and use that argument instead; use the 'restrict' keyword for 'ecp_supported_curves' to hint the compiler that it is free of aliasing",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR001"
    },
    {
      "Check": "PWR001",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/library/ecp.c:404:1",
      "Title": "Declare global variables as function parameters",
      "RelatedCodeList": {
        "Subtitle": "Usages",
        "Code": [
          "    if (!init_done) {",
          "            ecp_supported_grp_id[i++] = curve_info->grp_id;",
          "        ecp_supported_grp_id[i] = MBEDTLS_ECP_DP_NONE;",
          "        init_done = 1;",
          "    return ecp_supported_grp_id;"
        ]
      },
      "Suggestion": "Consider passing 'init_done' and 'ecp_supported_grp_id' explicitly as arguments to the function 'mbedtls_ecp_grp_id_list' and use those arguments instead; use the 'restrict' keyword for 'init_done' and 'ecp_supported_grp_id' to hint the compiler that they are free of aliasing",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR001"
    },
    {
      "Check": "PWR001",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/library/ecp.c:1055:1",
      "Title": "Declare global variables as function parameters",
      "RelatedCodeList": {
        "Subtitle": "Usages",
        "Code": [
          "    MOD_MUL(*X);"
        ]
      },
      "Suggestion": "Consider passing 'mul_count' explicitly as argument to the function 'mbedtls_mpi_mul_mod' and use that argument instead; use the 'restrict' keyword for 'mul_count' to hint the compiler that it is free of aliasing",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR001"
    },
    {
      "Check": "PWR001",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/library/ecp.c:1486:1",
      "Title": "Declare global variables as function parameters",
      "RelatedCodeList": {
        "Subtitle": "Usages",
        "Code": [
          "    dbl_count++;"
        ]
      },
      "Suggestion": "Consider passing 'dbl_count' explicitly as argument to the function 'ecp_double_jac' and use that argument instead; use the 'restrict' keyword for 'dbl_count' to hint the compiler that it is free of aliasing",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR001"
    },
    {
      "Check": "PWR001",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/library/ecp.c:1583:1",
      "Title": "Declare global variables as function parameters",
      "RelatedCodeList": {
        "Subtitle": "Usages",
        "Code": [
          "    add_count++;"
        ]
      },
      "Suggestion": "Consider passing 'add_count' explicitly as argument to the function 'ecp_add_mixed' and use that argument instead; use the 'restrict' keyword for 'add_count' to hint the compiler that it is free of aliasing",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR001"
    },
    {
      "Check": "PWR001",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/library/ecp.c:2947:1",
      "Title": "Declare global variables as function parameters",
      "RelatedCodeList": {
        "Subtitle": "Usages",
        "Code": [
          "        if (mbedtls_mpi_cmp_mpi(&XmP, &ecp_x25519_bad_point_1) == 0) {",
          "        if (mbedtls_mpi_cmp_mpi(&XmP, &ecp_x25519_bad_point_2) == 0) {"
        ]
      },
      "Suggestion": "Consider passing 'ecp_x25519_bad_point_1' and 'ecp_x25519_bad_point_2' explicitly as arguments to the function 'ecp_check_bad_points_mx' and use those arguments instead; use the 'restrict' keyword for 'ecp_x25519_bad_point_1' and 'ecp_x25519_bad_point_2' to hint the compiler that they are free of aliasing",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR001"
    },
    {
      "Check": "PWR001",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/library/ecp.c:3438:1",
      "Title": "Declare global variables as function parameters",
      "RelatedCodeList": {
        "Subtitle": "Usages",
        "Code": [
          "        state = state * 1664525u + 1013904223u;",
          "        out[i] = (unsigned char) state;"
        ]
      },
      "Suggestion": "Consider passing 'state' explicitly as argument to the function 'self_test_rng' and use that argument instead; use the 'restrict' keyword for 'state' to hint the compiler that it is free of aliasing",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR001"
    },
    {
      "Check": "PWR001",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/library/ecp.c:3489:1",
      "Title": "Declare global variables as function parameters",
      "RelatedCodeList": {
        "Subtitle": "Usages",
        "Code": [
          "    add_count = 0;",
          "    dbl_count = 0;",
          "    mul_count = 0;",
          "        add_c_prev = add_count;",
          "        dbl_c_prev = dbl_count;",
          "        mul_c_prev = mul_count;",
          "        add_count = 0;",
          "        dbl_count = 0;",
          "        mul_count = 0;",
          "        if (add_count != add_c_prev ||",
          "            dbl_count != dbl_c_prev ||",
          "            mul_count != mul_c_prev) {"
        ]
      },
      "Suggestion": "Consider passing 'add_count', 'dbl_count' and 'mul_count' explicitly as arguments to the function 'self_test_point' and use those arguments instead; use the 'restrict' keyword for 'add_count', 'dbl_count' and 'mul_count' to hint the compiler that they are free of aliasing",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR001"
    },
    {
      "Check": "PWR001",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/library/ecp_curves.c:4504:1",
      "Title": "Declare global variables as function parameters",
      "RelatedCodeList": {
        "Subtitle": "Usages",
        "Code": [
          "    X->p = (mbedtls_mpi_uint *) mpi_one; /* X->p will not be modified so the cast is safe */"
        ]
      },
      "Suggestion": "Consider passing 'mpi_one' explicitly as argument to the function 'ecp_mpi_set1' and use that argument instead; use the 'restrict' keyword for 'mpi_one' to hint the compiler that it is free of aliasing",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR001"
    },
    {
      "Check": "PWR001",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/library/ecp_curves.c:4622:1",
      "Title": "Declare global variables as function parameters",
      "RelatedCodeList": {
        "Subtitle": "Usages",
        "Code": [
          "                                            curve25519_part_of_n, sizeof(curve25519_part_of_n)));"
        ]
      },
      "Suggestion": "Consider passing 'curve25519_part_of_n' explicitly as argument to the function 'ecp_use_curve25519' and use that argument instead; use the 'restrict' keyword for 'curve25519_part_of_n' to hint the compiler that it is free of aliasing",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR001"
    },
    {
      "Check": "PWR001",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/library/ecp_curves.c:4671:1",
      "Title": "Declare global variables as function parameters",
      "RelatedCodeList": {
        "Subtitle": "Usages",
        "Code": [
          "                                            curve448_part_of_n, sizeof(curve448_part_of_n)));"
        ]
      },
      "Suggestion": "Consider passing 'curve448_part_of_n' explicitly as argument to the function 'ecp_use_curve448' and use that argument instead; use the 'restrict' keyword for 'curve448_part_of_n' to hint the compiler that it is free of aliasing",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR001"
    },
    {
      "Check": "PWR001",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/library/ecp_curves.c:4717:1",
      "Title": "Declare global variables as function parameters",
      "RelatedCodeList": {
        "Subtitle": "Usages",
        "Code": [
          "            return LOAD_GROUP(secp192r1);",
          "            return LOAD_GROUP(secp224r1);",
          "            return LOAD_GROUP(secp256r1);",
          "            return LOAD_GROUP(secp384r1);",
          "            return LOAD_GROUP(secp521r1);",
          "            return LOAD_GROUP_A(secp192k1);",
          "            return LOAD_GROUP_A(secp224k1);",
          "            return LOAD_GROUP_A(secp256k1);",
          "            return LOAD_GROUP_A(brainpoolP256r1);",
          "            return LOAD_GROUP_A(brainpoolP384r1);",
          "            return LOAD_GROUP_A(brainpoolP512r1);"
        ]
      },
      "Suggestion": "Consider passing 'secp192r1_p', 'secp192r1_b', 'secp192r1_gx', 'secp192r1_gy', 'secp192r1_n', 'secp192r1_T', 'secp224r1_p', 'secp224r1_b', 'secp224r1_gx', 'secp224r1_gy', 'secp224r1_n', 'secp224r1_T', 'secp256r1_p', 'secp256r1_b', 'secp256r1_gx', 'secp256r1_gy', 'secp256r1_n', 'secp256r1_T', 'secp384r1_p', 'secp384r1_b', 'secp384r1_gx', 'secp384r1_gy', 'secp384r1_n', 'secp384r1_T', 'secp521r1_p', 'secp521r1_b', 'secp521r1_gx', 'secp521r1_gy', 'secp521r1_n', 'secp521r1_T', 'secp192k1_p', 'secp192k1_a', 'secp192k1_b', 'secp192k1_gx', 'secp192k1_gy', 'secp192k1_n', 'secp192k1_T', 'secp224k1_p', 'secp224k1_a', 'secp224k1_b', 'secp224k1_gx', 'secp224k1_gy', 'secp224k1_n', 'secp224k1_T', 'secp256k1_p', 'secp256k1_a', 'secp256k1_b', 'secp256k1_gx', 'secp256k1_gy', 'secp256k1_n', 'secp256k1_T', 'brainpoolP256r1_p', 'brainpoolP256r1_a', 'brainpoolP256r1_b', 'brainpoolP256r1_gx', 'brainpoolP256r1_gy', 'brainpoolP256r1_n', 'brainpoolP256r1_T', 'brainpoolP384r1_p', 'brainpoolP384r1_a', 'brainpoolP384r1_b', 'brainpoolP384r1_gx', 'brainpoolP384r1_gy', 'brainpoolP384r1_n', 'brainpoolP384r1_T', 'brainpoolP512r1_p', 'brainpoolP512r1_a', 'brainpoolP512r1_b', 'brainpoolP512r1_gx', 'brainpoolP512r1_gy', 'brainpoolP512r1_n' and 'brainpoolP512r1_T' explicitly as arguments to the function 'mbedtls_ecp_group_load' and use those arguments instead; use the 'restrict' keyword for 'secp192r1_p', 'secp192r1_b', 'secp192r1_gx', 'secp192r1_gy', 'secp192r1_n', 'secp192r1_T', 'secp224r1_p', 'secp224r1_b', 'secp224r1_gx', 'secp224r1_gy', 'secp224r1_n', 'secp224r1_T', 'secp256r1_p', 'secp256r1_b', 'secp256r1_gx', 'secp256r1_gy', 'secp256r1_n', 'secp256r1_T', 'secp384r1_p', 'secp384r1_b', 'secp384r1_gx', 'secp384r1_gy', 'secp384r1_n', 'secp384r1_T', 'secp521r1_p', 'secp521r1_b', 'secp521r1_gx', 'secp521r1_gy', 'secp521r1_n', 'secp521r1_T', 'secp192k1_p', 'secp192k1_a', 'secp192k1_b', 'secp192k1_gx', 'secp192k1_gy', 'secp192k1_n', 'secp192k1_T', 'secp224k1_p', 'secp224k1_a', 'secp224k1_b', 'secp224k1_gx', 'secp224k1_gy', 'secp224k1_n', 'secp224k1_T', 'secp256k1_p', 'secp256k1_a', 'secp256k1_b', 'secp256k1_gx', 'secp256k1_gy', 'secp256k1_n', 'secp256k1_T', 'brainpoolP256r1_p', 'brainpoolP256r1_a', 'brainpoolP256r1_b', 'brainpoolP256r1_gx', 'brainpoolP256r1_gy', 'brainpoolP256r1_n', 'brainpoolP256r1_T', 'brainpoolP384r1_p', 'brainpoolP384r1_a', 'brainpoolP384r1_b', 'brainpoolP384r1_gx', 'brainpoolP384r1_gy', 'brainpoolP384r1_n', 'brainpoolP384r1_T', 'brainpoolP512r1_p', 'brainpoolP512r1_a', 'brainpoolP512r1_b', 'brainpoolP512r1_gx', 'brainpoolP512r1_gy', 'brainpoolP512r1_n' and 'brainpoolP512r1_T' to hint the compiler that they are free of aliasing",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR001"
    },
    {
      "Check": "PWR001",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/library/ecp_curves.c:5397:1",
      "Title": "Declare global variables as function parameters",
      "RelatedCodeList": {
        "Subtitle": "Usages",
        "Code": [
          "    return ecp_mod_koblitz(N, Rp, 192 / 8 / sizeof(mbedtls_mpi_uint), 0, 0,"
        ]
      },
      "Suggestion": "Consider passing 'Rp' explicitly as argument to the function 'ecp_mod_p192k1' and use that argument instead; use the 'restrict' keyword for 'Rp' to hint the compiler that it is free of aliasing",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR001"
    },
    {
      "Check": "PWR001",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/library/ecp_curves.c:5414:1",
      "Title": "Declare global variables as function parameters",
      "RelatedCodeList": {
        "Subtitle": "Usages",
        "Code": [
          "    return ecp_mod_koblitz(N, Rp, 4, 1, 32, 0xFFFFFFFF);"
        ]
      },
      "Suggestion": "Consider passing 'Rp' explicitly as argument to the function 'ecp_mod_p224k1' and use that argument instead; use the 'restrict' keyword for 'Rp' to hint the compiler that it is free of aliasing",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR001"
    },
    {
      "Check": "PWR001",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/library/ecp_curves.c:5436:1",
      "Title": "Declare global variables as function parameters",
      "RelatedCodeList": {
        "Subtitle": "Usages",
        "Code": [
          "    return ecp_mod_koblitz(N, Rp, 256 / 8 / sizeof(mbedtls_mpi_uint), 0, 0,"
        ]
      },
      "Suggestion": "Consider passing 'Rp' explicitly as argument to the function 'ecp_mod_p256k1' and use that argument instead; use the 'restrict' keyword for 'Rp' to hint the compiler that it is free of aliasing",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR001"
    },
    {
      "Check": "PWR001",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/library/gcm.c:201:1",
      "Title": "Declare global variables as function parameters",
      "RelatedCodeList": {
        "Subtitle": "Usages",
        "Code": [
          "            zh ^= (uint64_t) last4[rem] << 48;",
          "        zh ^= (uint64_t) last4[rem] << 48;"
        ]
      },
      "Suggestion": "Consider passing 'last4' explicitly as argument to the function 'gcm_mult' and use that argument instead; use the 'restrict' keyword for 'last4' to hint the compiler that it is free of aliasing",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR001"
    },
    {
      "Check": "PWR001",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/library/gcm.c:902:1",
      "Title": "Declare global variables as function parameters",
      "RelatedCodeList": {
        "Subtitle": "Usages",
        "Code": [
          "        (sizeof(ct_test_data) / sizeof(*ct_test_data)) / MAX_TESTS;",
          "                                     key_test_data[key_index_test_data[i]],",
          "                                            pt_len_test_data[i],",
          "                                            iv_test_data[iv_index_test_data[i]],",
          "                                            iv_len_test_data[i],",
          "                                            additional_test_data[add_index_test_data[i]],",
          "                                            add_len_test_data[i],",
          "                                            pt_test_data[pt_index_test_data[i]],",
          "            if (memcmp(buf, ct_test_data[j * 6 + i],",
          "                       pt_len_test_data[i]) != 0 ||",
          "                memcmp(tag_buf, tag_test_data[j * 6 + i], 16) != 0) {",
          "                                     key_test_data[key_index_test_data[i]],",
          "                                            pt_len_test_data[i],",
          "                                            iv_test_data[iv_index_test_data[i]],",
          "                                            iv_len_test_data[i],",
          "                                            additional_test_data[add_index_test_data[i]],",
          "                                            add_len_test_data[i],",
          "                                            ct_test_data[j * 6 + i], buf, 16, tag_buf);",
          "            if (memcmp(buf, pt_test_data[pt_index_test_data[i]],",
          "                       pt_len_test_data[i]) != 0 ||",
          "                memcmp(tag_buf, tag_test_data[j * 6 + i], 16) != 0) {",
          "                                     key_test_data[key_index_test_data[i]],",
          "                                     iv_test_data[iv_index_test_data[i]],",
          "                                     iv_len_test_data[i]);",
          "                                        additional_test_data[add_index_test_data[i]],",
          "                                        add_len_test_data[i]);",
          "            if (pt_len_test_data[i] > 32) {",
          "                size_t rest_len = pt_len_test_data[i] - 32;",
          "                                         pt_test_data[pt_index_test_data[i]],",
          "                                         pt_test_data[pt_index_test_data[i]] + 32,",
          "                                         pt_test_data[pt_index_test_data[i]],",
          "                                         pt_len_test_data[i],",
          "                if (olen != pt_len_test_data[i]) {",
          "            if (memcmp(buf, ct_test_data[j * 6 + i],",
          "                       pt_len_test_data[i]) != 0 ||",
          "                memcmp(tag_buf, tag_test_data[j * 6 + i], 16) != 0) {",
          "                                     key_test_data[key_index_test_data[i]],",
          "                                     iv_test_data[iv_index_test_data[i]],",
          "                                     iv_len_test_data[i]);",
          "                                        additional_test_data[add_index_test_data[i]],",
          "                                        add_len_test_data[i]);",
          "            if (pt_len_test_data[i] > 32) {",
          "                size_t rest_len = pt_len_test_data[i] - 32;",
          "                                         ct_test_data[j * 6 + i], 32,",
          "                                         ct_test_data[j * 6 + i] + 32,",
          "                                         ct_test_data[j * 6 + i],",
          "                                         pt_len_test_data[i],",
          "                if (olen != pt_len_test_data[i]) {",
          "            if (memcmp(buf, pt_test_data[pt_index_test_data[i]],",
          "                       pt_len_test_data[i]) != 0 ||",
          "                memcmp(tag_buf, tag_test_data[j * 6 + i], 16) != 0) {"
        ]
      },
      "Suggestion": "Consider passing 'ct_test_data', 'key_test_data', 'key_index_test_data', 'pt_len_test_data', 'iv_test_data', 'iv_index_test_data', 'iv_len_test_data', 'additional_test_data', 'add_index_test_data', 'add_len_test_data', 'pt_test_data', 'pt_index_test_data' and 'tag_test_data' explicitly as arguments to the function 'mbedtls_gcm_self_test' and use those arguments instead; use the 'restrict' keyword for 'ct_test_data', 'key_test_data', 'key_index_test_data', 'pt_len_test_data', 'iv_test_data', 'iv_index_test_data', 'iv_len_test_data', 'additional_test_data', 'add_index_test_data', 'add_len_test_data', 'pt_test_data', 'pt_index_test_data' and 'tag_test_data' to hint the compiler that they are free of aliasing",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR001"
    },
    {
      "Check": "PWR001",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/library/hmac_drbg.c:549:1",
      "Title": "Declare global variables as function parameters",
      "RelatedCodeList": {
        "Subtitle": "Usages",
        "Code": [
          "    memcpy(buf, p + test_offset, len);",
          "    test_offset += len;"
        ]
      },
      "Suggestion": "Consider passing 'test_offset' explicitly as argument to the function 'hmac_drbg_self_test_entropy' and use that argument instead; use the 'restrict' keyword for 'test_offset' to hint the compiler that it is free of aliasing",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR001"
    },
    {
      "Check": "PWR001",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/library/hmac_drbg.c:568:1",
      "Title": "Declare global variables as function parameters",
      "RelatedCodeList": {
        "Subtitle": "Usages",
        "Code": [
          "    test_offset = 0;",
          "                               hmac_drbg_self_test_entropy, (void *) entropy_pr,",
          "    CHK(memcmp(buf, result_pr, OUTPUT_LEN));",
          "    test_offset = 0;",
          "                               hmac_drbg_self_test_entropy, (void *) entropy_nopr,",
          "    CHK(memcmp(buf, result_nopr, OUTPUT_LEN));"
        ]
      },
      "Suggestion": "Consider passing 'test_offset', 'entropy_pr', 'result_pr', 'entropy_nopr' and 'result_nopr' explicitly as arguments to the function 'mbedtls_hmac_drbg_self_test' and use those arguments instead; use the 'restrict' keyword for 'test_offset', 'entropy_pr', 'result_pr', 'entropy_nopr' and 'result_nopr' to hint the compiler that they are free of aliasing",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR001"
    },
    {
      "Check": "PWR001",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/library/lmots.c:38:1",
      "Title": "Declare global variables as function parameters",
      "RelatedCodeList": {
        "Subtitle": "Usages",
        "Code": [
          "    return psa_status_to_mbedtls(status, psa_to_lms_errors,",
          "                                 ARRAY_LENGTH(psa_to_lms_errors),"
        ]
      },
      "Suggestion": "Consider passing 'psa_to_lms_errors' explicitly as argument to the function 'local_err_translation' and use that argument instead; use the 'restrict' keyword for 'psa_to_lms_errors' to hint the compiler that it is free of aliasing",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR001"
    },
    {
      "Check": "PWR001",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/library/lmots.c:119:1",
      "Title": "Declare global variables as function parameters",
      "RelatedCodeList": {
        "Subtitle": "Usages",
        "Code": [
          "    status = psa_hash_update(&op, D_MESSAGE_CONSTANT_BYTES, D_CONST_LEN);"
        ]
      },
      "Suggestion": "Consider passing 'D_MESSAGE_CONSTANT_BYTES' explicitly as argument to the function 'create_digit_array_with_checksum' and use that argument instead; use the 'restrict' keyword for 'D_MESSAGE_CONSTANT_BYTES' to hint the compiler that it is free of aliasing",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR001"
    },
    {
      "Check": "PWR001",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/library/lmots.c:313:1",
      "Title": "Declare global variables as function parameters",
      "RelatedCodeList": {
        "Subtitle": "Usages",
        "Code": [
          "    status = psa_hash_update(&op, D_PUBLIC_CONSTANT_BYTES, D_CONST_LEN);"
        ]
      },
      "Suggestion": "Consider passing 'D_PUBLIC_CONSTANT_BYTES' explicitly as argument to the function 'public_key_from_hashed_digit_array' and use that argument instead; use the 'restrict' keyword for 'D_PUBLIC_CONSTANT_BYTES' to hint the compiler that it is free of aliasing",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR001"
    },
    {
      "Check": "PWR001",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/library/lms.c:39:1",
      "Title": "Declare global variables as function parameters",
      "RelatedCodeList": {
        "Subtitle": "Usages",
        "Code": [
          "    return psa_status_to_mbedtls(status, psa_to_lms_errors,",
          "                                 ARRAY_LENGTH(psa_to_lms_errors),"
        ]
      },
      "Suggestion": "Consider passing 'psa_to_lms_errors' explicitly as argument to the function 'local_err_translation' and use that argument instead; use the 'restrict' keyword for 'psa_to_lms_errors' to hint the compiler that it is free of aliasing",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR001"
    },
    {
      "Check": "PWR001",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/library/lms.c:94:1",
      "Title": "Declare global variables as function parameters",
      "RelatedCodeList": {
        "Subtitle": "Usages",
        "Code": [
          "    status = psa_hash_update(&op, D_LEAF_CONSTANT_BYTES, D_CONST_LEN);"
        ]
      },
      "Suggestion": "Consider passing 'D_LEAF_CONSTANT_BYTES' explicitly as argument to the function 'create_merkle_leaf_value' and use that argument instead; use the 'restrict' keyword for 'D_LEAF_CONSTANT_BYTES' to hint the compiler that it is free of aliasing",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR001"
    },
    {
      "Check": "PWR001",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/library/lms.c:167:1",
      "Title": "Declare global variables as function parameters",
      "RelatedCodeList": {
        "Subtitle": "Usages",
        "Code": [
          "    status = psa_hash_update(&op, D_INTR_CONSTANT_BYTES, D_CONST_LEN);"
        ]
      },
      "Suggestion": "Consider passing 'D_INTR_CONSTANT_BYTES' explicitly as argument to the function 'create_merkle_internal_value' and use that argument instead; use the 'restrict' keyword for 'D_INTR_CONSTANT_BYTES' to hint the compiler that it is free of aliasing",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR001"
    },
    {
      "Check": "PWR001",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/library/md.c:139:1",
      "Title": "Declare global variables as function parameters",
      "RelatedCodeList": {
        "Subtitle": "Usages",
        "Code": [
          "            return &mbedtls_md5_info;",
          "            return &mbedtls_ripemd160_info;",
          "            return &mbedtls_sha1_info;",
          "            return &mbedtls_sha224_info;",
          "            return &mbedtls_sha256_info;",
          "            return &mbedtls_sha384_info;",
          "            return &mbedtls_sha512_info;",
          "            return &mbedtls_sha3_224_info;",
          "            return &mbedtls_sha3_256_info;",
          "            return &mbedtls_sha3_384_info;",
          "            return &mbedtls_sha3_512_info;"
        ]
      },
      "Suggestion": "Consider passing 'mbedtls_md5_info', 'mbedtls_ripemd160_info', 'mbedtls_sha1_info', 'mbedtls_sha224_info', 'mbedtls_sha256_info', 'mbedtls_sha384_info', 'mbedtls_sha512_info', 'mbedtls_sha3_224_info', 'mbedtls_sha3_256_info', 'mbedtls_sha3_384_info' and 'mbedtls_sha3_512_info' explicitly as arguments to the function 'mbedtls_md_info_from_type' and use those arguments instead; use the 'restrict' keyword for 'mbedtls_md5_info', 'mbedtls_ripemd160_info', 'mbedtls_sha1_info', 'mbedtls_sha224_info', 'mbedtls_sha256_info', 'mbedtls_sha384_info', 'mbedtls_sha512_info', 'mbedtls_sha3_224_info', 'mbedtls_sha3_256_info', 'mbedtls_sha3_384_info' and 'mbedtls_sha3_512_info' to hint the compiler that they are free of aliasing",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR001"
    },
    {
      "Check": "PWR001",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/library/md.c:765:1",
      "Title": "Declare global variables as function parameters",
      "RelatedCodeList": {
        "Subtitle": "Usages",
        "Code": [
          "    return PSA_TO_MBEDTLS_ERR_LIST(status, psa_to_md_errors,"
        ]
      },
      "Suggestion": "Consider passing 'psa_to_md_errors' explicitly as argument to the function 'mbedtls_md_error_from_psa' and use that argument instead; use the 'restrict' keyword for 'psa_to_md_errors' to hint the compiler that it is free of aliasing",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR001"
    },
    {
      "Check": "PWR001",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/library/md.c:830:1",
      "Title": "Declare global variables as function parameters",
      "RelatedCodeList": {
        "Subtitle": "Usages",
        "Code": [
          "    return supported_digests;"
        ]
      },
      "Suggestion": "Consider passing 'supported_digests' explicitly as argument to the function 'mbedtls_md_list' and use that argument instead; use the 'restrict' keyword for 'supported_digests' to hint the compiler that it is free of aliasing",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR001"
    },
    {
      "Check": "PWR001",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/library/md.c:878:1",
      "Title": "Declare global variables as function parameters",
      "RelatedCodeList": {
        "Subtitle": "Usages",
        "Code": [
          "    const md_name_entry *entry = md_names;"
        ]
      },
      "Suggestion": "Consider passing 'md_names' explicitly as argument to the function 'mbedtls_md_info_from_string' and use that argument instead; use the 'restrict' keyword for 'md_names' to hint the compiler that it is free of aliasing",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR001"
    },
    {
      "Check": "PWR001",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/library/md.c:893:1",
      "Title": "Declare global variables as function parameters",
      "RelatedCodeList": {
        "Subtitle": "Usages",
        "Code": [
          "    const md_name_entry *entry = md_names;"
        ]
      },
      "Suggestion": "Consider passing 'md_names' explicitly as argument to the function 'mbedtls_md_get_name' and use that argument instead; use the 'restrict' keyword for 'md_names' to hint the compiler that it is free of aliasing",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR001"
    },
    {
      "Check": "PWR001",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/library/md5.c:385:1",
      "Title": "Declare global variables as function parameters",
      "RelatedCodeList": {
        "Subtitle": "Usages",
        "Code": [
          "        ret = mbedtls_md5(md5_test_buf[i], md5_test_buflen[i], md5sum);",
          "        if (memcmp(md5sum, md5_test_sum[i], 16) != 0) {"
        ]
      },
      "Suggestion": "Consider passing 'md5_test_buf', 'md5_test_buflen' and 'md5_test_sum' explicitly as arguments to the function 'mbedtls_md5_self_test' and use those arguments instead; use the 'restrict' keyword for 'md5_test_buf', 'md5_test_buflen' and 'md5_test_sum' to hint the compiler that they are free of aliasing",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR001"
    },
    {
      "Check": "PWR001",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/library/nist_kw.c:125:1",
      "Title": "Declare global variables as function parameters",
      "RelatedCodeList": {
        "Subtitle": "Usages",
        "Code": [
          "        memcpy(output, NIST_KW_ICV1, KW_SEMIBLOCK_LENGTH);",
          "        memcpy(output, NIST_KW_ICV2, KW_SEMIBLOCK_LENGTH / 2);"
        ]
      },
      "Suggestion": "Consider passing 'NIST_KW_ICV1' and 'NIST_KW_ICV2' explicitly as arguments to the function 'mbedtls_nist_kw_wrap' and use those arguments instead; use the 'restrict' keyword for 'NIST_KW_ICV1' and 'NIST_KW_ICV2' to hint the compiler that they are free of aliasing",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR001"
    },
    {
      "Check": "PWR001",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/library/nist_kw.c:319:1",
      "Title": "Declare global variables as function parameters",
      "RelatedCodeList": {
        "Subtitle": "Usages",
        "Code": [
          "        diff = mbedtls_ct_memcmp(NIST_KW_ICV1, A, KW_SEMIBLOCK_LENGTH);",
          "        diff = mbedtls_ct_memcmp(NIST_KW_ICV2, A, KW_SEMIBLOCK_LENGTH / 2);"
        ]
      },
      "Suggestion": "Consider passing 'NIST_KW_ICV1' and 'NIST_KW_ICV2' explicitly as arguments to the function 'mbedtls_nist_kw_unwrap' and use those arguments instead; use the 'restrict' keyword for 'NIST_KW_ICV1' and 'NIST_KW_ICV2' to hint the compiler that they are free of aliasing",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR001"
    },
    {
      "Check": "PWR001",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/library/nist_kw.c:580:1",
      "Title": "Declare global variables as function parameters",
      "RelatedCodeList": {
        "Subtitle": "Usages",
        "Code": [
          "        static const int num_tests = sizeof(kw_key) / sizeof(*kw_key);",
          "                mbedtls_printf(\"  KW-AES-%u \", (unsigned int) key_len[i] * 8);",
          "                                         kw_key[i], key_len[i] * 8, 1);",
          "            ret = mbedtls_nist_kw_wrap(&ctx, MBEDTLS_KW_MODE_KW, kw_msg[i],",
          "                                       kw_msg_len[i], out, &olen, sizeof(out));",
          "            if (ret != 0 || kw_out_len[i] != olen ||",
          "                memcmp(out, kw_res[i], kw_out_len[i]) != 0) {",
          "                                              kw_key[i], key_len[i] * 8, 0))",
          "            if (ret != 0 || olen != kw_msg_len[i] ||",
          "                memcmp(out, kw_msg[i], kw_msg_len[i]) != 0) {",
          "        static const int num_tests = sizeof(kwp_key) / sizeof(*kwp_key);",
          "                mbedtls_printf(\"  KWP-AES-%u \", (unsigned int) key_len[i] * 8);",
          "            ret = mbedtls_nist_kw_setkey(&ctx, MBEDTLS_CIPHER_ID_AES, kwp_key[i],",
          "                                         key_len[i] * 8, 1);",
          "            ret = mbedtls_nist_kw_wrap(&ctx, MBEDTLS_KW_MODE_KWP, kwp_msg[i],",
          "                                       kwp_msg_len[i], out, &olen, sizeof(out));",
          "            if (ret != 0 || kwp_out_len[i] != olen ||",
          "                memcmp(out, kwp_res[i], kwp_out_len[i]) != 0) {",
          "                                              kwp_key[i], key_len[i] * 8, 0))",
          "            if (ret != 0 || olen != kwp_msg_len[i] ||",
          "                memcmp(out, kwp_msg[i], kwp_msg_len[i]) != 0) {"
        ]
      },
      "Suggestion": "Consider passing 'kw_key', 'key_len', 'kw_msg', 'kw_msg_len', 'kw_out_len', 'kw_res', 'kwp_key', 'kwp_msg', 'kwp_msg_len', 'kwp_out_len' and 'kwp_res' explicitly as arguments to the function 'mbedtls_nist_kw_self_test' and use those arguments instead; use the 'restrict' keyword for 'kw_key', 'key_len', 'kw_msg', 'kw_msg_len', 'kw_out_len', 'kw_res', 'kwp_key', 'kwp_msg', 'kwp_msg_len', 'kwp_out_len' and 'kwp_res' to hint the compiler that they are free of aliasing",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR001"
    },
    {
      "Check": "PWR001",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/library/oid.c:258:1",
      "Title": "Declare global variables as function parameters",
      "RelatedCodeList": {
        "Subtitle": "Usages",
        "Code": [
          "FN_OID_TYPED_FROM_ASN1(oid_x520_attr_t, x520_attr, oid_x520_attr_type)"
        ]
      },
      "Suggestion": "Consider passing 'oid_x520_attr_type' explicitly as argument to the function 'oid_x520_attr_from_asn1' and use that argument instead; use the 'restrict' keyword for 'oid_x520_attr_type' to hint the compiler that it is free of aliasing",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR001"
    },
    {
      "Check": "PWR001",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/library/oid.c:327:1",
      "Title": "Declare global variables as function parameters",
      "RelatedCodeList": {
        "Subtitle": "Usages",
        "Code": [
          "FN_OID_TYPED_FROM_ASN1(oid_x509_ext_t, x509_ext, oid_x509_ext)"
        ]
      },
      "Suggestion": "Consider passing 'oid_x509_ext' explicitly as argument to the function 'oid_x509_ext_from_asn1' and use that argument instead; use the 'restrict' keyword for 'oid_x509_ext' to hint the compiler that it is free of aliasing",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR001"
    },
    {
      "Check": "PWR001",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/library/oid.c:349:1",
      "Title": "Declare global variables as function parameters",
      "RelatedCodeList": {
        "Subtitle": "Usages",
        "Code": [
          "FN_OID_TYPED_FROM_ASN1(mbedtls_oid_descriptor_t, ext_key_usage, oid_ext_key_usage)"
        ]
      },
      "Suggestion": "Consider passing 'oid_ext_key_usage' explicitly as argument to the function 'oid_ext_key_usage_from_asn1' and use that argument instead; use the 'restrict' keyword for 'oid_ext_key_usage' to hint the compiler that it is free of aliasing",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR001"
    },
    {
      "Check": "PWR001",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/library/oid.c:362:1",
      "Title": "Declare global variables as function parameters",
      "RelatedCodeList": {
        "Subtitle": "Usages",
        "Code": [
          "FN_OID_TYPED_FROM_ASN1(mbedtls_oid_descriptor_t, certificate_policies, oid_certificate_policies)"
        ]
      },
      "Suggestion": "Consider passing 'oid_certificate_policies' explicitly as argument to the function 'oid_certificate_policies_from_asn1' and use that argument instead; use the 'restrict' keyword for 'oid_certificate_policies' to hint the compiler that it is free of aliasing",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR001"
    },
    {
      "Check": "PWR001",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/library/oid.c:473:1",
      "Title": "Declare global variables as function parameters",
      "RelatedCodeList": {
        "Subtitle": "Usages",
        "Code": [
          "FN_OID_TYPED_FROM_ASN1(oid_sig_alg_t, sig_alg, oid_sig_alg)"
        ]
      },
      "Suggestion": "Consider passing 'oid_sig_alg' explicitly as argument to the function 'oid_sig_alg_from_asn1' and use that argument instead; use the 'restrict' keyword for 'oid_sig_alg' to hint the compiler that it is free of aliasing",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR001"
    },
    {
      "Check": "PWR001",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/library/oid.c:490:1",
      "Title": "Declare global variables as function parameters",
      "RelatedCodeList": {
        "Subtitle": "Usages",
        "Code": [
          "                        oid_sig_alg,"
        ]
      },
      "Suggestion": "Consider passing 'oid_sig_alg' explicitly as argument to the function 'mbedtls_oid_get_oid_by_sig_alg' and use that argument instead; use the 'restrict' keyword for 'oid_sig_alg' to hint the compiler that it is free of aliasing",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR001"
    },
    {
      "Check": "PWR001",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/library/oid.c:526:1",
      "Title": "Declare global variables as function parameters",
      "RelatedCodeList": {
        "Subtitle": "Usages",
        "Code": [
          "FN_OID_TYPED_FROM_ASN1(oid_pk_alg_t, pk_alg, oid_pk_alg)"
        ]
      },
      "Suggestion": "Consider passing 'oid_pk_alg' explicitly as argument to the function 'oid_pk_alg_from_asn1' and use that argument instead; use the 'restrict' keyword for 'oid_pk_alg' to hint the compiler that it is free of aliasing",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR001"
    },
    {
      "Check": "PWR001",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/library/oid.c:528:1",
      "Title": "Declare global variables as function parameters",
      "RelatedCodeList": {
        "Subtitle": "Usages",
        "Code": [
          "                        oid_pk_alg,"
        ]
      },
      "Suggestion": "Consider passing 'oid_pk_alg' explicitly as argument to the function 'mbedtls_oid_get_oid_by_pk_alg' and use that argument instead; use the 'restrict' keyword for 'oid_pk_alg' to hint the compiler that it is free of aliasing",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR001"
    },
    {
      "Check": "PWR001",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/library/oid.c:617:1",
      "Title": "Declare global variables as function parameters",
      "RelatedCodeList": {
        "Subtitle": "Usages",
        "Code": [
          "FN_OID_TYPED_FROM_ASN1(oid_ecp_grp_t, grp_id, oid_ecp_grp)"
        ]
      },
      "Suggestion": "Consider passing 'oid_ecp_grp' explicitly as argument to the function 'oid_grp_id_from_asn1' and use that argument instead; use the 'restrict' keyword for 'oid_ecp_grp' to hint the compiler that it is free of aliasing",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR001"
    },
    {
      "Check": "PWR001",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/library/oid.c:619:1",
      "Title": "Declare global variables as function parameters",
      "RelatedCodeList": {
        "Subtitle": "Usages",
        "Code": [
          "                        oid_ecp_grp,"
        ]
      },
      "Suggestion": "Consider passing 'oid_ecp_grp' explicitly as argument to the function 'mbedtls_oid_get_oid_by_ec_grp' and use that argument instead; use the 'restrict' keyword for 'oid_ecp_grp' to hint the compiler that it is free of aliasing",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR001"
    },
    {
      "Check": "PWR001",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/library/oid.c:654:1",
      "Title": "Declare global variables as function parameters",
      "RelatedCodeList": {
        "Subtitle": "Usages",
        "Code": [
          "FN_OID_TYPED_FROM_ASN1(oid_ecp_grp_algid_t, grp_id_algid, oid_ecp_grp_algid)"
        ]
      },
      "Suggestion": "Consider passing 'oid_ecp_grp_algid' explicitly as argument to the function 'oid_grp_id_algid_from_asn1' and use that argument instead; use the 'restrict' keyword for 'oid_ecp_grp_algid' to hint the compiler that it is free of aliasing",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR001"
    },
    {
      "Check": "PWR001",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/library/oid.c:660:1",
      "Title": "Declare global variables as function parameters",
      "RelatedCodeList": {
        "Subtitle": "Usages",
        "Code": [
          "                        oid_ecp_grp_algid,"
        ]
      },
      "Suggestion": "Consider passing 'oid_ecp_grp_algid' explicitly as argument to the function 'mbedtls_oid_get_oid_by_ec_grp_algid' and use that argument instead; use the 'restrict' keyword for 'oid_ecp_grp_algid' to hint the compiler that it is free of aliasing",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR001"
    },
    {
      "Check": "PWR001",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/library/oid.c:704:1",
      "Title": "Declare global variables as function parameters",
      "RelatedCodeList": {
        "Subtitle": "Usages",
        "Code": [
          "FN_OID_TYPED_FROM_ASN1(oid_cipher_alg_t, cipher_alg, oid_cipher_alg)"
        ]
      },
      "Suggestion": "Consider passing 'oid_cipher_alg' explicitly as argument to the function 'oid_cipher_alg_from_asn1' and use that argument instead; use the 'restrict' keyword for 'oid_cipher_alg' to hint the compiler that it is free of aliasing",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR001"
    },
    {
      "Check": "PWR001",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/library/oid.c:794:1",
      "Title": "Declare global variables as function parameters",
      "RelatedCodeList": {
        "Subtitle": "Usages",
        "Code": [
          "FN_OID_TYPED_FROM_ASN1(oid_md_alg_t, md_alg, oid_md_alg)"
        ]
      },
      "Suggestion": "Consider passing 'oid_md_alg' explicitly as argument to the function 'oid_md_alg_from_asn1' and use that argument instead; use the 'restrict' keyword for 'oid_md_alg' to hint the compiler that it is free of aliasing",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR001"
    },
    {
      "Check": "PWR001",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/library/oid.c:796:1",
      "Title": "Declare global variables as function parameters",
      "RelatedCodeList": {
        "Subtitle": "Usages",
        "Code": [
          "                        oid_md_alg,"
        ]
      },
      "Suggestion": "Consider passing 'oid_md_alg' explicitly as argument to the function 'mbedtls_oid_get_oid_by_md' and use that argument instead; use the 'restrict' keyword for 'oid_md_alg' to hint the compiler that it is free of aliasing",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR001"
    },
    {
      "Check": "PWR001",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/library/oid.c:878:1",
      "Title": "Declare global variables as function parameters",
      "RelatedCodeList": {
        "Subtitle": "Usages",
        "Code": [
          "FN_OID_TYPED_FROM_ASN1(oid_md_hmac_t, md_hmac, oid_md_hmac)"
        ]
      },
      "Suggestion": "Consider passing 'oid_md_hmac' explicitly as argument to the function 'oid_md_hmac_from_asn1' and use that argument instead; use the 'restrict' keyword for 'oid_md_hmac' to hint the compiler that it is free of aliasing",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR001"
    },
    {
      "Check": "PWR001",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/library/oid.c:911:1",
      "Title": "Declare global variables as function parameters",
      "RelatedCodeList": {
        "Subtitle": "Usages",
        "Code": [
          "FN_OID_TYPED_FROM_ASN1(oid_pkcs12_pbe_alg_t, pkcs12_pbe_alg, oid_pkcs12_pbe_alg)"
        ]
      },
      "Suggestion": "Consider passing 'oid_pkcs12_pbe_alg' explicitly as argument to the function 'oid_pkcs12_pbe_alg_from_asn1' and use that argument instead; use the 'restrict' keyword for 'oid_pkcs12_pbe_alg' to hint the compiler that it is free of aliasing",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR001"
    },
    {
      "Check": "PWR001",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/library/pk.c:112:1",
      "Title": "Declare global variables as function parameters",
      "RelatedCodeList": {
        "Subtitle": "Usages",
        "Code": [
          "            return &mbedtls_rsa_info;",
          "            return &mbedtls_eckey_info;",
          "            return &mbedtls_eckeydh_info;",
          "            return &mbedtls_ecdsa_info;"
        ]
      },
      "Suggestion": "Consider passing 'mbedtls_rsa_info', 'mbedtls_eckey_info', 'mbedtls_eckeydh_info' and 'mbedtls_ecdsa_info' explicitly as arguments to the function 'mbedtls_pk_info_from_type' and use those arguments instead; use the 'restrict' keyword for 'mbedtls_rsa_info', 'mbedtls_eckey_info', 'mbedtls_eckeydh_info' and 'mbedtls_ecdsa_info' to hint the compiler that they are free of aliasing",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR001"
    },
    {
      "Check": "PWR001",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/library/pk.c:197:1",
      "Title": "Declare global variables as function parameters",
      "RelatedCodeList": {
        "Subtitle": "Usages",
        "Code": [
          "    const mbedtls_pk_info_t *info = &mbedtls_rsa_alt_info;"
        ]
      },
      "Suggestion": "Consider passing 'mbedtls_rsa_alt_info' explicitly as argument to the function 'mbedtls_pk_setup_rsa_alt' and use that argument instead; use the 'restrict' keyword for 'mbedtls_rsa_alt_info' to hint the compiler that it is free of aliasing",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR001"
    },
    {
      "Check": "PWR001",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/library/pkcs5.c:460:1",
      "Title": "Declare global variables as function parameters",
      "RelatedCodeList": {
        "Subtitle": "Usages",
        "Code": [
          "        ret = mbedtls_pkcs5_pbkdf2_hmac_ext(MBEDTLS_MD_SHA1, password_test_data[i],",
          "                                            plen_test_data[i], salt_test_data[i],",
          "                                            slen_test_data[i], it_cnt_test_data[i],",
          "                                            key_len_test_data[i], key);",
          "            memcmp(result_key_test_data[i], key, key_len_test_data[i]) != 0) {"
        ]
      },
      "Suggestion": "Consider passing 'password_test_data', 'plen_test_data', 'salt_test_data', 'slen_test_data', 'it_cnt_test_data', 'key_len_test_data' and 'result_key_test_data' explicitly as arguments to the function 'mbedtls_pkcs5_self_test' and use those arguments instead; use the 'restrict' keyword for 'password_test_data', 'plen_test_data', 'salt_test_data', 'slen_test_data', 'it_cnt_test_data', 'key_len_test_data' and 'result_key_test_data' to hint the compiler that they are free of aliasing",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR001"
    },
    {
      "Check": "PWR001",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/library/poly1305.c:459:1",
      "Title": "Declare global variables as function parameters",
      "RelatedCodeList": {
        "Subtitle": "Usages",
        "Code": [
          "        ret = mbedtls_poly1305_mac(test_keys[i],",
          "                                   test_data[i],",
          "                                   test_data_len[i],",
          "        ASSERT(0 == memcmp(mac, test_mac[i], 16U), (\"failed (mac)\\n\"));"
        ]
      },
      "Suggestion": "Consider passing 'test_keys', 'test_data', 'test_data_len' and 'test_mac' explicitly as arguments to the function 'mbedtls_poly1305_self_test' and use those arguments instead; use the 'restrict' keyword for 'test_keys', 'test_data', 'test_data_len' and 'test_mac' to hint the compiler that they are free of aliasing",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR001"
    },
    {
      "Check": "PWR001",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/library/psa_crypto.c:113:1",
      "Title": "Declare global variables as function parameters",
      "RelatedCodeList": {
        "Subtitle": "Usages",
        "Code": [
          "    return global_data.drivers_initialized;"
        ]
      },
      "Suggestion": "Consider passing 'global_data' explicitly as argument to the function 'psa_can_do_hash' and use that argument instead; use the 'restrict' keyword for 'global_data' to hint the compiler that it is free of aliasing",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR001"
    },
    {
      "Check": "PWR001",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/library/psa_crypto.c:119:1",
      "Title": "Declare global variables as function parameters",
      "RelatedCodeList": {
        "Subtitle": "Usages",
        "Code": [
          "    return global_data.drivers_initialized;"
        ]
      },
      "Suggestion": "Consider passing 'global_data' explicitly as argument to the function 'psa_can_do_cipher' and use that argument instead; use the 'restrict' keyword for 'global_data' to hint the compiler that it is free of aliasing",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR001"
    },
    {
      "Check": "PWR001",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/library/psa_crypto.c:3233:1",
      "Title": "Declare global variables as function parameters",
      "RelatedCodeList": {
        "Subtitle": "Usages",
        "Code": [
          "    psa_interruptible_max_ops = max_ops;"
        ]
      },
      "Suggestion": "Consider passing 'psa_interruptible_max_ops' explicitly as argument to the function 'psa_interruptible_set_max_ops' and use that argument instead; use the 'restrict' keyword for 'psa_interruptible_max_ops' to hint the compiler that it is free of aliasing",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR001"
    },
    {
      "Check": "PWR001",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/library/psa_crypto.c:3238:1",
      "Title": "Declare global variables as function parameters",
      "RelatedCodeList": {
        "Subtitle": "Usages",
        "Code": [
          "    return psa_interruptible_max_ops;"
        ]
      },
      "Suggestion": "Consider passing 'psa_interruptible_max_ops' explicitly as argument to the function 'psa_interruptible_get_max_ops' and use that argument instead; use the 'restrict' keyword for 'psa_interruptible_max_ops' to hint the compiler that it is free of aliasing",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR001"
    },
    {
      "Check": "PWR001",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/library/psa_crypto.c:7256:1",
      "Title": "Declare global variables as function parameters",
      "RelatedCodeList": {
        "Subtitle": "Usages",
        "Code": [
          "    mbedtls_psa_drbg_init(MBEDTLS_PSA_RANDOM_STATE);"
        ]
      },
      "Suggestion": "Consider passing 'mbedtls_psa_random_state' explicitly as argument to the function 'mbedtls_psa_random_init' and use that argument instead; use the 'restrict' keyword for 'mbedtls_psa_random_state' to hint the compiler that it is free of aliasing if you can guarantee it",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR001"
    },
    {
      "Check": "PWR001",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/library/psa_crypto.c:7288:1",
      "Title": "Declare global variables as function parameters",
      "RelatedCodeList": {
        "Subtitle": "Usages",
        "Code": [
          "    mbedtls_psa_drbg_free(MBEDTLS_PSA_RANDOM_STATE);"
        ]
      },
      "Suggestion": "Consider passing 'mbedtls_psa_random_state' explicitly as argument to the function 'mbedtls_psa_random_free' and use that argument instead; use the 'restrict' keyword for 'mbedtls_psa_random_state' to hint the compiler that it is free of aliasing if you can guarantee it",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR001"
    },
    {
      "Check": "PWR001",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/library/psa_crypto.c:7314:1",
      "Title": "Declare global variables as function parameters",
      "RelatedCodeList": {
        "Subtitle": "Usages",
        "Code": [
          "    GUARD_MODULE_INITIALIZED;",
          "        int ret = mbedtls_psa_get_random(MBEDTLS_PSA_RANDOM_STATE,"
        ]
      },
      "Suggestion": "Consider passing 'global_data', 'mbedtls_psa_get_random' and 'mbedtls_psa_random_state' explicitly as arguments to the function 'psa_generate_random' and use those arguments instead; use the 'restrict' keyword for 'global_data' to hint the compiler that it is free of aliasing and do the same for 'mbedtls_psa_get_random' and 'mbedtls_psa_random_state' if you can guarantee it",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR001"
    },
    {
      "Check": "PWR001",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/library/psa_crypto.c:7606:1",
      "Title": "Declare global variables as function parameters",
      "RelatedCodeList": {
        "Subtitle": "Usages",
        "Code": [
          "    if (global_data.rng_state != RNG_NOT_INITIALIZED) {",
          "    global_data.rng.entropy_init = entropy_init;",
          "    global_data.rng.entropy_free = entropy_free;"
        ]
      },
      "Suggestion": "Consider passing 'global_data' explicitly as argument to the function 'mbedtls_psa_crypto_configure_entropy_sources' and use that argument instead; use the 'restrict' keyword for 'global_data' to hint the compiler that it is free of aliasing",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR001"
    },
    {
      "Check": "PWR001",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/library/psa_crypto.c:7619:1",
      "Title": "Declare global variables as function parameters",
      "RelatedCodeList": {
        "Subtitle": "Usages",
        "Code": [
          "    if (global_data.rng_state != RNG_NOT_INITIALIZED) {",
          "        mbedtls_psa_random_free(&global_data.rng);",
          "    mbedtls_platform_zeroize(&global_data, sizeof(global_data));"
        ]
      },
      "Suggestion": "Consider passing 'global_data' explicitly as argument to the function 'mbedtls_psa_crypto_free' and use that argument instead; use the 'restrict' keyword for 'global_data' to hint the compiler that it is free of aliasing",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR001"
    },
    {
      "Check": "PWR001",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/library/psa_crypto.c:7659:1",
      "Title": "Declare global variables as function parameters",
      "RelatedCodeList": {
        "Subtitle": "Usages",
        "Code": [
          "    if (global_data.initialized != 0) {",
          "    global_data.drivers_initialized = 1;",
          "    mbedtls_psa_random_init(&global_data.rng);",
          "    global_data.rng_state = RNG_INITIALIZED;",
          "    status = mbedtls_psa_random_seed(&global_data.rng);",
          "    global_data.rng_state = RNG_SEEDED;",
          "    global_data.initialized = 1;"
        ]
      },
      "Suggestion": "Consider passing 'global_data' explicitly as argument to the function 'psa_crypto_init' and use that argument instead; use the 'restrict' keyword for 'global_data' to hint the compiler that it is free of aliasing",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR001"
    },
    {
      "Check": "PWR001",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/library/psa_crypto_ecp.c:251:1",
      "Title": "Declare global variables as function parameters",
      "RelatedCodeList": {
        "Subtitle": "Usages",
        "Code": [
          "                                mbedtls_psa_get_random,",
          "                                MBEDTLS_PSA_RANDOM_STATE));"
        ]
      },
      "Suggestion": "Consider passing 'mbedtls_psa_get_random' and 'mbedtls_psa_random_state' explicitly as arguments to the function 'mbedtls_psa_ecp_export_key' and use those arguments instead; use the 'restrict' keyword for 'mbedtls_psa_get_random' and 'mbedtls_psa_random_state' to hint the compiler that they are free of aliasing if you can guarantee it",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR001"
    },
    {
      "Check": "PWR001",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/library/psa_crypto_ecp.c:332:1",
      "Title": "Declare global variables as function parameters",
      "RelatedCodeList": {
        "Subtitle": "Usages",
        "Code": [
          "                              mbedtls_psa_get_random,",
          "                              MBEDTLS_PSA_RANDOM_STATE);"
        ]
      },
      "Suggestion": "Consider passing 'mbedtls_psa_get_random' and 'mbedtls_psa_random_state' explicitly as arguments to the function 'mbedtls_psa_ecp_generate_key' and use those arguments instead; use the 'restrict' keyword for 'mbedtls_psa_get_random' and 'mbedtls_psa_random_state' to hint the compiler that they are free of aliasing if you can guarantee it",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR001"
    },
    {
      "Check": "PWR001",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/library/psa_crypto_ecp.c:384:1",
      "Title": "Declare global variables as function parameters",
      "RelatedCodeList": {
        "Subtitle": "Usages",
        "Code": [
          "                            mbedtls_psa_get_random,",
          "                            MBEDTLS_PSA_RANDOM_STATE));",
          "                                           mbedtls_psa_get_random,",
          "                                           MBEDTLS_PSA_RANDOM_STATE));"
        ]
      },
      "Suggestion": "Consider passing 'mbedtls_psa_get_random' and 'mbedtls_psa_random_state' explicitly as arguments to the function 'mbedtls_psa_ecdsa_sign_hash' and use those arguments instead; use the 'restrict' keyword for 'mbedtls_psa_get_random' and 'mbedtls_psa_random_state' to hint the compiler that they are free of aliasing if you can guarantee it",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR001"
    },
    {
      "Check": "PWR001",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/library/psa_crypto_ecp.c:455:1",
      "Title": "Declare global variables as function parameters",
      "RelatedCodeList": {
        "Subtitle": "Usages",
        "Code": [
          "                              mbedtls_psa_get_random,",
          "                              MBEDTLS_PSA_RANDOM_STATE);"
        ]
      },
      "Suggestion": "Consider passing 'mbedtls_psa_get_random' and 'mbedtls_psa_random_state' explicitly as arguments to the function 'mbedtls_psa_ecp_load_public_part' and use those arguments instead; use the 'restrict' keyword for 'mbedtls_psa_get_random' and 'mbedtls_psa_random_state' to hint the compiler that they are free of aliasing if you can guarantee it",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR001"
    },
    {
      "Check": "PWR001",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/library/psa_crypto_ecp.c:540:1",
      "Title": "Declare global variables as function parameters",
      "RelatedCodeList": {
        "Subtitle": "Usages",
        "Code": [
          "                                 mbedtls_psa_get_random,",
          "                                 MBEDTLS_PSA_RANDOM_STATE));"
        ]
      },
      "Suggestion": "Consider passing 'mbedtls_psa_get_random' and 'mbedtls_psa_random_state' explicitly as arguments to the function 'mbedtls_psa_key_agreement_ecdh' and use those arguments instead; use the 'restrict' keyword for 'mbedtls_psa_get_random' and 'mbedtls_psa_random_state' to hint the compiler that they are free of aliasing if you can guarantee it",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR001"
    },
    {
      "Check": "PWR001",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/library/psa_crypto_ffdh.c:30:1",
      "Title": "Declare global variables as function parameters",
      "RelatedCodeList": {
        "Subtitle": "Usages",
        "Code": [
          "        case sizeof(dhm_P_2048):",
          "            dhm_P = dhm_P_2048;",
          "            dhm_G = dhm_G_2048;",
          "            dhm_size_P = sizeof(dhm_P_2048);",
          "            dhm_size_G = sizeof(dhm_G_2048);",
          "        case sizeof(dhm_P_3072):",
          "            dhm_P = dhm_P_3072;",
          "            dhm_G = dhm_G_3072;",
          "            dhm_size_P = sizeof(dhm_P_3072);",
          "            dhm_size_G = sizeof(dhm_G_3072);",
          "        case sizeof(dhm_P_4096):",
          "            dhm_P = dhm_P_4096;",
          "            dhm_G = dhm_G_4096;",
          "            dhm_size_P = sizeof(dhm_P_4096);",
          "            dhm_size_G = sizeof(dhm_G_4096);",
          "        case sizeof(dhm_P_6144):",
          "            dhm_P = dhm_P_6144;",
          "            dhm_G = dhm_G_6144;",
          "            dhm_size_P = sizeof(dhm_P_6144);",
          "            dhm_size_G = sizeof(dhm_G_6144);",
          "        case sizeof(dhm_P_8192):",
          "            dhm_P = dhm_P_8192;",
          "            dhm_G = dhm_G_8192;",
          "            dhm_size_P = sizeof(dhm_P_8192);",
          "            dhm_size_G = sizeof(dhm_G_8192);"
        ]
      },
      "Suggestion": "Consider passing 'dhm_P_2048', 'dhm_G_2048', 'dhm_P_3072', 'dhm_G_3072', 'dhm_P_4096', 'dhm_G_4096', 'dhm_P_6144', 'dhm_G_6144', 'dhm_P_8192' and 'dhm_G_8192' explicitly as arguments to the function 'mbedtls_psa_ffdh_set_prime_generator' and use those arguments instead; use the 'restrict' keyword for 'dhm_P_2048', 'dhm_G_2048', 'dhm_P_3072', 'dhm_G_3072', 'dhm_P_4096', 'dhm_G_4096', 'dhm_P_6144', 'dhm_G_6144', 'dhm_P_8192' and 'dhm_G_8192' to hint the compiler that they are free of aliasing",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR001"
    },
    {
      "Check": "PWR001",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/library/psa_crypto_ffdh.c:201:1",
      "Title": "Declare global variables as function parameters",
      "RelatedCodeList": {
        "Subtitle": "Usages",
        "Code": [
          "    MBEDTLS_MPI_CHK(mbedtls_mpi_random(&X, 3, &P, mbedtls_psa_get_random,",
          "                                       MBEDTLS_PSA_RANDOM_STATE));"
        ]
      },
      "Suggestion": "Consider passing 'mbedtls_psa_get_random' and 'mbedtls_psa_random_state' explicitly as arguments to the function 'mbedtls_psa_ffdh_generate_key' and use those arguments instead; use the 'restrict' keyword for 'mbedtls_psa_get_random' and 'mbedtls_psa_random_state' to hint the compiler that they are free of aliasing if you can guarantee it",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR001"
    },
    {
      "Check": "PWR001",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/library/psa_crypto_pake.c:155:1",
      "Title": "Declare global variables as function parameters",
      "RelatedCodeList": {
        "Subtitle": "Usages",
        "Code": [
          "        const size_t user_peer_len = sizeof(jpake_client_id); // client and server have the same length",
          "        if (memcmp(user, jpake_client_id, actual_user_len) == 0 &&",
          "            memcmp(peer, jpake_server_id, actual_peer_len) == 0) {",
          "        if (memcmp(user, jpake_server_id, actual_user_len) == 0 &&",
          "            memcmp(peer, jpake_client_id, actual_peer_len) == 0) {"
        ]
      },
      "Suggestion": "Consider passing 'jpake_client_id' and 'jpake_server_id' explicitly as arguments to the function 'mbedtls_psa_pake_setup' and use those arguments instead; use the 'restrict' keyword for 'jpake_client_id' and 'jpake_server_id' to hint the compiler that they are free of aliasing",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR001"
    },
    {
      "Check": "PWR001",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/library/psa_crypto_pake.c:282:1",
      "Title": "Declare global variables as function parameters",
      "RelatedCodeList": {
        "Subtitle": "Usages",
        "Code": [
          "                                                  mbedtls_psa_get_random,",
          "                                                  MBEDTLS_PSA_RANDOM_STATE);",
          "                                                  mbedtls_psa_get_random,",
          "                                                  MBEDTLS_PSA_RANDOM_STATE);"
        ]
      },
      "Suggestion": "Consider passing 'mbedtls_psa_get_random' and 'mbedtls_psa_random_state' explicitly as arguments to the function 'mbedtls_psa_pake_output_internal' and use those arguments instead; use the 'restrict' keyword for 'mbedtls_psa_get_random' and 'mbedtls_psa_random_state' to hint the compiler that they are free of aliasing if you can guarantee it",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR001"
    },
    {
      "Check": "PWR001",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/library/psa_crypto_pake.c:521:1",
      "Title": "Declare global variables as function parameters",
      "RelatedCodeList": {
        "Subtitle": "Usages",
        "Code": [
          "                                               mbedtls_psa_get_random,",
          "                                               MBEDTLS_PSA_RANDOM_STATE);"
        ]
      },
      "Suggestion": "Consider passing 'mbedtls_psa_get_random' and 'mbedtls_psa_random_state' explicitly as arguments to the function 'mbedtls_psa_pake_get_implicit_key' and use those arguments instead; use the 'restrict' keyword for 'mbedtls_psa_get_random' and 'mbedtls_psa_random_state' to hint the compiler that they are free of aliasing if you can guarantee it",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR001"
    },
    {
      "Check": "PWR001",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/library/psa_crypto_rsa.c:247:1",
      "Title": "Declare global variables as function parameters",
      "RelatedCodeList": {
        "Subtitle": "Usages",
        "Code": [
          "                              mbedtls_psa_get_random,",
          "                              MBEDTLS_PSA_RANDOM_STATE,"
        ]
      },
      "Suggestion": "Consider passing 'mbedtls_psa_get_random' and 'mbedtls_psa_random_state' explicitly as arguments to the function 'mbedtls_psa_rsa_generate_key' and use those arguments instead; use the 'restrict' keyword for 'mbedtls_psa_get_random' and 'mbedtls_psa_random_state' to hint the compiler that they are free of aliasing if you can guarantee it",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR001"
    },
    {
      "Check": "PWR001",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/library/psa_crypto_rsa.c:320:1",
      "Title": "Declare global variables as function parameters",
      "RelatedCodeList": {
        "Subtitle": "Usages",
        "Code": [
          "                                         mbedtls_psa_get_random,",
          "                                         MBEDTLS_PSA_RANDOM_STATE,",
          "                                              mbedtls_psa_get_random,",
          "                                              MBEDTLS_PSA_RANDOM_STATE,"
        ]
      },
      "Suggestion": "Consider passing 'mbedtls_psa_get_random' and 'mbedtls_psa_random_state' explicitly as arguments to the function 'mbedtls_psa_rsa_sign_hash' and use those arguments instead; use the 'restrict' keyword for 'mbedtls_psa_get_random' and 'mbedtls_psa_random_state' to hint the compiler that they are free of aliasing if you can guarantee it",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR001"
    },
    {
      "Check": "PWR001",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/library/psa_crypto_rsa.c:519:1",
      "Title": "Declare global variables as function parameters",
      "RelatedCodeList": {
        "Subtitle": "Usages",
        "Code": [
          "                                          mbedtls_psa_get_random,",
          "                                          MBEDTLS_PSA_RANDOM_STATE,",
          "                                               mbedtls_psa_get_random,",
          "                                               MBEDTLS_PSA_RANDOM_STATE,"
        ]
      },
      "Suggestion": "Consider passing 'mbedtls_psa_get_random' and 'mbedtls_psa_random_state' explicitly as arguments to the function 'mbedtls_psa_asymmetric_encrypt' and use those arguments instead; use the 'restrict' keyword for 'mbedtls_psa_get_random' and 'mbedtls_psa_random_state' to hint the compiler that they are free of aliasing if you can guarantee it",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR001"
    },
    {
      "Check": "PWR001",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/library/psa_crypto_rsa.c:613:1",
      "Title": "Declare global variables as function parameters",
      "RelatedCodeList": {
        "Subtitle": "Usages",
        "Code": [
          "                                          mbedtls_psa_get_random,",
          "                                          MBEDTLS_PSA_RANDOM_STATE,",
          "                                               mbedtls_psa_get_random,",
          "                                               MBEDTLS_PSA_RANDOM_STATE,"
        ]
      },
      "Suggestion": "Consider passing 'mbedtls_psa_get_random' and 'mbedtls_psa_random_state' explicitly as arguments to the function 'mbedtls_psa_asymmetric_decrypt' and use those arguments instead; use the 'restrict' keyword for 'mbedtls_psa_get_random' and 'mbedtls_psa_random_state' to hint the compiler that they are free of aliasing if you can guarantee it",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR001"
    },
    {
      "Check": "PWR001",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/library/psa_crypto_slot_management.c:86:1",
      "Title": "Declare global variables as function parameters",
      "RelatedCodeList": {
        "Subtitle": "Usages",
        "Code": [
          "        slot = &global_data.key_slots[key_id - PSA_KEY_ID_VOLATILE_MIN];",
          "            slot = &global_data.key_slots[slot_idx];"
        ]
      },
      "Suggestion": "Consider passing 'global_data' explicitly as argument to the function 'psa_get_and_lock_key_slot_in_memory' and use that argument instead; use the 'restrict' keyword for 'global_data' to hint the compiler that it is free of aliasing",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR001"
    },
    {
      "Check": "PWR001",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/library/psa_crypto_slot_management.c:134:1",
      "Title": "Declare global variables as function parameters",
      "RelatedCodeList": {
        "Subtitle": "Usages",
        "Code": [
          "    global_data.key_slots_initialized = 1;"
        ]
      },
      "Suggestion": "Consider passing 'global_data' explicitly as argument to the function 'psa_initialize_key_slots' and use that argument instead; use the 'restrict' keyword for 'global_data' to hint the compiler that it is free of aliasing",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR001"
    },
    {
      "Check": "PWR001",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/library/psa_crypto_slot_management.c:143:1",
      "Title": "Declare global variables as function parameters",
      "RelatedCodeList": {
        "Subtitle": "Usages",
        "Code": [
          "        psa_key_slot_t *slot = &global_data.key_slots[slot_idx];",
          "    global_data.key_slots_initialized = 0;"
        ]
      },
      "Suggestion": "Consider passing 'global_data' explicitly as argument to the function 'psa_wipe_all_key_slots' and use that argument instead; use the 'restrict' keyword for 'global_data' to hint the compiler that it is free of aliasing",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR001"
    },
    {
      "Check": "PWR001",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/library/psa_crypto_slot_management.c:156:1",
      "Title": "Declare global variables as function parameters",
      "RelatedCodeList": {
        "Subtitle": "Usages",
        "Code": [
          "    if (!global_data.key_slots_initialized) {",
          "        psa_key_slot_t *slot = &global_data.key_slots[slot_idx];",
          "                           ((psa_key_id_t) (selected_slot - global_data.key_slots));"
        ]
      },
      "Suggestion": "Consider passing 'global_data' explicitly as argument to the function 'psa_reserve_free_key_slot' and use that argument instead; use the 'restrict' keyword for 'global_data' to hint the compiler that it is free of aliasing",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR001"
    },
    {
      "Check": "PWR001",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/library/psa_crypto_slot_management.c:351:1",
      "Title": "Declare global variables as function parameters",
      "RelatedCodeList": {
        "Subtitle": "Usages",
        "Code": [
          "    if (!global_data.key_slots_initialized) {"
        ]
      },
      "Suggestion": "Consider passing 'global_data' explicitly as argument to the function 'psa_get_and_lock_key_slot' and use that argument instead; use the 'restrict' keyword for 'global_data' to hint the compiler that it is free of aliasing",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR001"
    },
    {
      "Check": "PWR001",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/library/psa_crypto_slot_management.c:598:1",
      "Title": "Declare global variables as function parameters",
      "RelatedCodeList": {
        "Subtitle": "Usages",
        "Code": [
          "        const psa_key_slot_t *slot = &global_data.key_slots[slot_idx];"
        ]
      },
      "Suggestion": "Consider passing 'global_data' explicitly as argument to the function 'mbedtls_psa_get_stats' and use that argument instead; use the 'restrict' keyword for 'global_data' to hint the compiler that it is free of aliasing",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR001"
    },
    {
      "Check": "PWR001",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/library/ripemd160.c:327:1",
      "Title": "Declare global variables as function parameters",
      "RelatedCodeList": {
        "Subtitle": "Usages",
        "Code": [
          "    ret = mbedtls_ripemd160_update(ctx, ripemd160_padding, padn);"
        ]
      },
      "Suggestion": "Consider passing 'ripemd160_padding' explicitly as argument to the function 'mbedtls_ripemd160_finish' and use that argument instead; use the 'restrict' keyword for 'ripemd160_padding' to hint the compiler that it is free of aliasing",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR001"
    },
    {
      "Check": "PWR001",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/library/ripemd160.c:446:1",
      "Title": "Declare global variables as function parameters",
      "RelatedCodeList": {
        "Subtitle": "Usages",
        "Code": [
          "        ret = mbedtls_ripemd160(ripemd160_test_str[i],",
          "                                ripemd160_test_strlen[i], output);",
          "        if (memcmp(output, ripemd160_test_md[i], 20) != 0) {"
        ]
      },
      "Suggestion": "Consider passing 'ripemd160_test_str', 'ripemd160_test_strlen' and 'ripemd160_test_md' explicitly as arguments to the function 'mbedtls_ripemd160_self_test' and use those arguments instead; use the 'restrict' keyword for 'ripemd160_test_str', 'ripemd160_test_strlen' and 'ripemd160_test_md' to hint the compiler that they are free of aliasing",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR001"
    },
    {
      "Check": "PWR001",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/library/sha1.c:409:1",
      "Title": "Declare global variables as function parameters",
      "RelatedCodeList": {
        "Subtitle": "Usages",
        "Code": [
          "            ret = mbedtls_sha1_update(&ctx, sha1_test_buf[i],",
          "                                      sha1_test_buflen[i]);",
          "        if (memcmp(sha1sum, sha1_test_sum[i], 20) != 0) {"
        ]
      },
      "Suggestion": "Consider passing 'sha1_test_buf', 'sha1_test_buflen' and 'sha1_test_sum' explicitly as arguments to the function 'mbedtls_sha1_self_test' and use those arguments instead; use the 'restrict' keyword for 'sha1_test_buf', 'sha1_test_buflen' and 'sha1_test_sum' to hint the compiler that they are free of aliasing",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR001"
    },
    {
      "Check": "PWR001",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/library/sha256.c:488:1",
      "Title": "Declare global variables as function parameters",
      "RelatedCodeList": {
        "Subtitle": "Usages",
        "Code": [
          "          local.A[5], local.A[6], local.A[7], local.W[i+0], K[i+0]);",
          "          local.A[4], local.A[5], local.A[6], local.W[i+1], K[i+1]);",
          "          local.A[3], local.A[4], local.A[5], local.W[i+2], K[i+2]);",
          "          local.A[2], local.A[3], local.A[4], local.W[i+3], K[i+3]);",
          "          local.A[1], local.A[2], local.A[3], local.W[i+4], K[i+4]);",
          "          local.A[0], local.A[1], local.A[2], local.W[i+5], K[i+5]);",
          "          local.A[7], local.A[0], local.A[1], local.W[i+6], K[i+6]);",
          "          local.A[6], local.A[7], local.A[0], local.W[i+7], K[i+7]);",
          "          local.A[5], local.A[6], local.A[7], R(i+0), K[i+0]);",
          "          local.A[4], local.A[5], local.A[6], R(i+1), K[i+1]);",
          "          local.A[3], local.A[4], local.A[5], R(i+2), K[i+2]);",
          "          local.A[2], local.A[3], local.A[4], R(i+3), K[i+3]);",
          "          local.A[1], local.A[2], local.A[3], R(i+4), K[i+4]);",
          "          local.A[0], local.A[1], local.A[2], R(i+5), K[i+5]);",
          "          local.A[7], local.A[0], local.A[1], R(i+6), K[i+6]);",
          "          local.A[6], local.A[7], local.A[0], R(i+7), K[i+7]);"
        ]
      },
      "Suggestion": "Consider passing 'K' explicitly as argument to the function 'mbedtls_internal_sha256_process' and use that argument instead; use the 'restrict' keyword for 'K' to hint the compiler that it is free of aliasing",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR001"
    },
    {
      "Check": "PWR001",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/library/sha256.c:874:1",
      "Title": "Declare global variables as function parameters",
      "RelatedCodeList": {
        "Subtitle": "Usages",
        "Code": [
          "    sha_test_sum_t *sha_test_sum = (is224) ? sha224_test_sum : sha256_test_sum;",
          "            ret = mbedtls_sha256_update(&ctx, sha_test_buf[i],",
          "                                        sha_test_buflen[i]);"
        ]
      },
      "Suggestion": "Consider passing 'sha224_test_sum', 'sha256_test_sum', 'sha_test_buf' and 'sha_test_buflen' explicitly as arguments to the function 'mbedtls_sha256_common_self_test' and use those arguments instead; use the 'restrict' keyword for 'sha224_test_sum', 'sha256_test_sum', 'sha_test_buf' and 'sha_test_buflen' to hint the compiler that they are free of aliasing",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR001"
    },
    {
      "Check": "PWR001",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/library/sha512.c:601:1",
      "Title": "Declare global variables as function parameters",
      "RelatedCodeList": {
        "Subtitle": "Usages",
        "Code": [
          "          local.A[5], local.A[6], local.A[7], local.W[i], K[i]); i++;",
          "          local.A[4], local.A[5], local.A[6], local.W[i], K[i]); i++;",
          "          local.A[3], local.A[4], local.A[5], local.W[i], K[i]); i++;",
          "          local.A[2], local.A[3], local.A[4], local.W[i], K[i]); i++;",
          "          local.A[1], local.A[2], local.A[3], local.W[i], K[i]); i++;",
          "          local.A[0], local.A[1], local.A[2], local.W[i], K[i]); i++;",
          "          local.A[7], local.A[0], local.A[1], local.W[i], K[i]); i++;",
          "          local.A[6], local.A[7], local.A[0], local.W[i], K[i]); i++;"
        ]
      },
      "Suggestion": "Consider passing 'K' explicitly as argument to the function 'mbedtls_internal_sha512_process' and use that argument instead; use the 'restrict' keyword for 'K' to hint the compiler that it is free of aliasing",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR001"
    },
    {
      "Check": "PWR001",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/library/sha512.c:1010:1",
      "Title": "Declare global variables as function parameters",
      "RelatedCodeList": {
        "Subtitle": "Usages",
        "Code": [
          "    sha_test_sum_t *sha_test_sum = (is384) ? sha384_test_sum : sha512_test_sum;",
          "            ret = mbedtls_sha512_update(&ctx, sha_test_buf[i],",
          "                                        sha_test_buflen[i]);"
        ]
      },
      "Suggestion": "Consider passing 'sha384_test_sum', 'sha512_test_sum', 'sha_test_buf' and 'sha_test_buflen' explicitly as arguments to the function 'mbedtls_sha512_common_self_test' and use those arguments instead; use the 'restrict' keyword for 'sha384_test_sum', 'sha512_test_sum', 'sha_test_buf' and 'sha_test_buflen' to hint the compiler that they are free of aliasing",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR001"
    },
    {
      "Check": "PWR001",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/library/sha3.c:77:1",
      "Title": "Declare global variables as function parameters",
      "RelatedCodeList": {
        "Subtitle": "Usages",
        "Code": [
          "            s[i] = ROT64(s[i], rho[i-1]);",
          "            SWAP(s[pi[i]], t);",
          "        s[0] ^= ((iota_r_packed[round] & 0x40ull) << 57 |",
          "                 (iota_r_packed[round] & 0x20ull) << 26 |",
          "                 (iota_r_packed[round] & 0x10ull) << 11 |",
          "                 (iota_r_packed[round] & 0x8f));"
        ]
      },
      "Suggestion": "Consider passing 'rho', 'pi' and 'iota_r_packed' explicitly as arguments to the function 'keccak_f1600' and use those arguments instead; use the 'restrict' keyword for 'rho', 'pi' and 'iota_r_packed' to hint the compiler that they are free of aliasing",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR001"
    },
    {
      "Check": "PWR001",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/library/sha3.c:453:1",
      "Title": "Declare global variables as function parameters",
      "RelatedCodeList": {
        "Subtitle": "Usages",
        "Code": [
          "                          test_data[test_num], test_data_len[test_num],",
          "            result = memcmp(hash, test_hash_sha3_224[test_num], 28);",
          "            result = memcmp(hash, test_hash_sha3_256[test_num], 32);",
          "            result = memcmp(hash, test_hash_sha3_384[test_num], 48);",
          "            result = memcmp(hash, test_hash_sha3_512[test_num], 64);"
        ]
      },
      "Suggestion": "Consider passing 'test_data', 'test_data_len', 'test_hash_sha3_224', 'test_hash_sha3_256', 'test_hash_sha3_384' and 'test_hash_sha3_512' explicitly as arguments to the function 'mbedtls_sha3_kat_test' and use those arguments instead; use the 'restrict' keyword for 'test_data', 'test_data_len', 'test_hash_sha3_224', 'test_hash_sha3_256', 'test_hash_sha3_384' and 'test_hash_sha3_512' to hint the compiler that they are free of aliasing",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR001"
    },
    {
      "Check": "PWR001",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/library/sha3.c:505:1",
      "Title": "Declare global variables as function parameters",
      "RelatedCodeList": {
        "Subtitle": "Usages",
        "Code": [
          "            result = memcmp(hash, long_kat_hash_sha3_224, 28);",
          "            result = memcmp(hash, long_kat_hash_sha3_256, 32);",
          "            result = memcmp(hash, long_kat_hash_sha3_384, 48);",
          "            result = memcmp(hash, long_kat_hash_sha3_512, 64);"
        ]
      },
      "Suggestion": "Consider passing 'long_kat_hash_sha3_224', 'long_kat_hash_sha3_256', 'long_kat_hash_sha3_384' and 'long_kat_hash_sha3_512' explicitly as arguments to the function 'mbedtls_sha3_long_kat_test' and use those arguments instead; use the 'restrict' keyword for 'long_kat_hash_sha3_224', 'long_kat_hash_sha3_256', 'long_kat_hash_sha3_384' and 'long_kat_hash_sha3_512' to hint the compiler that they are free of aliasing",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR001"
    },
    {
      "Check": "PWR001",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/build/library/version_features.c:808:1",
      "Title": "Declare global variables as function parameters",
      "RelatedCodeList": {
        "Subtitle": "Usages",
        "Code": [
          "    const char * const *idx = features;"
        ]
      },
      "Suggestion": "Consider passing 'features' explicitly as argument to the function 'mbedtls_version_check_feature' and use that argument instead; use the 'restrict' keyword for 'features' to hint the compiler that it is free of aliasing",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR001"
    },
    {
      "Check": "PWR001",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/library/x509_create.c:101:1",
      "Title": "Declare global variables as function parameters",
      "RelatedCodeList": {
        "Subtitle": "Usages",
        "Code": [
          "    for (cur = x509_attrs; cur->name != NULL; cur++) {"
        ]
      },
      "Suggestion": "Consider passing 'x509_attrs' explicitly as argument to the function 'x509_attr_descr_from_name' and use that argument instead; use the 'restrict' keyword for 'x509_attrs' to hint the compiler that it is free of aliasing",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR001"
    },
    {
      "Check": "PWR001",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/library/x509_crt.c:1900:1",
      "Title": "Declare global variables as function parameters",
      "RelatedCodeList": {
        "Subtitle": "Usages",
        "Code": [
          "    for (cur = x509_crt_verify_strings; cur->string != NULL; cur++) {"
        ]
      },
      "Suggestion": "Consider passing 'x509_crt_verify_strings' explicitly as argument to the function 'mbedtls_x509_crt_verify_info' and use that argument instead; use the 'restrict' keyword for 'x509_crt_verify_strings' to hint the compiler that it is free of aliasing",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR001"
    },
    {
      "Check": "PWR001",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/library/x509_crt.c:3149:1",
      "Title": "Declare global variables as function parameters",
      "RelatedCodeList": {
        "Subtitle": "Usages",
        "Code": [
          "                                             &mbedtls_x509_crt_profile_default,"
        ]
      },
      "Suggestion": "Consider passing 'mbedtls_x509_crt_profile_default' explicitly as argument to the function 'mbedtls_x509_crt_verify' and use that argument instead; use the 'restrict' keyword for 'mbedtls_x509_crt_profile_default' to hint the compiler that it is free of aliasing",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR001"
    },
    {
      "Check": "PWR001",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/library/debug.c:26:1",
      "Title": "Declare global variables as function parameters",
      "RelatedCodeList": {
        "Subtitle": "Usages",
        "Code": [
          "    debug_threshold = threshold;"
        ]
      },
      "Suggestion": "Consider passing 'debug_threshold' explicitly as argument to the function 'mbedtls_debug_set_threshold' and use that argument instead; use the 'restrict' keyword for 'debug_threshold' to hint the compiler that it is free of aliasing",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR001"
    },
    {
      "Check": "PWR001",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/library/debug.c:52:1",
      "Title": "Declare global variables as function parameters",
      "RelatedCodeList": {
        "Subtitle": "Usages",
        "Code": [
          "        level > debug_threshold) {"
        ]
      },
      "Suggestion": "Consider passing 'debug_threshold' explicitly as argument to the function 'mbedtls_debug_print_msg' and use that argument instead; use the 'restrict' keyword for 'debug_threshold' to hint the compiler that it is free of aliasing",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR001"
    },
    {
      "Check": "PWR001",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/library/debug.c:87:1",
      "Title": "Declare global variables as function parameters",
      "RelatedCodeList": {
        "Subtitle": "Usages",
        "Code": [
          "        level > debug_threshold) {"
        ]
      },
      "Suggestion": "Consider passing 'debug_threshold' explicitly as argument to the function 'mbedtls_debug_print_ret' and use that argument instead; use the 'restrict' keyword for 'debug_threshold' to hint the compiler that it is free of aliasing",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR001"
    },
    {
      "Check": "PWR001",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/library/debug.c:115:1",
      "Title": "Declare global variables as function parameters",
      "RelatedCodeList": {
        "Subtitle": "Usages",
        "Code": [
          "        level > debug_threshold) {"
        ]
      },
      "Suggestion": "Consider passing 'debug_threshold' explicitly as argument to the function 'mbedtls_debug_print_buf' and use that argument instead; use the 'restrict' keyword for 'debug_threshold' to hint the compiler that it is free of aliasing",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR001"
    },
    {
      "Check": "PWR001",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/library/debug.c:171:1",
      "Title": "Declare global variables as function parameters",
      "RelatedCodeList": {
        "Subtitle": "Usages",
        "Code": [
          "        level > debug_threshold) {"
        ]
      },
      "Suggestion": "Consider passing 'debug_threshold' explicitly as argument to the function 'mbedtls_debug_print_ecp' and use that argument instead; use the 'restrict' keyword for 'debug_threshold' to hint the compiler that it is free of aliasing",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR001"
    },
    {
      "Check": "PWR001",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/library/debug.c:265:1",
      "Title": "Declare global variables as function parameters",
      "RelatedCodeList": {
        "Subtitle": "Usages",
        "Code": [
          "        level > debug_threshold) {"
        ]
      },
      "Suggestion": "Consider passing 'debug_threshold' explicitly as argument to the function 'mbedtls_debug_print_mpi' and use that argument instead; use the 'restrict' keyword for 'debug_threshold' to hint the compiler that it is free of aliasing",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR001"
    },
    {
      "Check": "PWR001",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/library/debug.c:384:1",
      "Title": "Declare global variables as function parameters",
      "RelatedCodeList": {
        "Subtitle": "Usages",
        "Code": [
          "        level > debug_threshold) {"
        ]
      },
      "Suggestion": "Consider passing 'debug_threshold' explicitly as argument to the function 'mbedtls_debug_print_crt' and use that argument instead; use the 'restrict' keyword for 'debug_threshold' to hint the compiler that it is free of aliasing",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR001"
    },
    {
      "Check": "PWR001",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/library/ssl_ciphersuites.c:1814:1",
      "Title": "Declare global variables as function parameters",
      "RelatedCodeList": {
        "Subtitle": "Usages",
        "Code": [
          "    if (supported_init == 0) {",
          "        for (p = ciphersuite_preference, q = supported_ciphersuites;",
          "             *p != 0 && q < supported_ciphersuites + MAX_CIPHERSUITES - 1;",
          "        supported_init = 1;",
          "    return supported_ciphersuites;"
        ]
      },
      "Suggestion": "Consider passing 'supported_init', 'ciphersuite_preference', 'supported_ciphersuites' and 'ciphersuite_definitions' explicitly as arguments to the function 'mbedtls_ssl_list_ciphersuites' and use those arguments instead; use the 'restrict' keyword for 'supported_init', 'ciphersuite_preference', 'supported_ciphersuites' and 'ciphersuite_definitions' to hint the compiler that they are free of aliasing",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR001"
    },
    {
      "Check": "PWR001",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/library/ssl_ciphersuites.c:1842:1",
      "Title": "Declare global variables as function parameters",
      "RelatedCodeList": {
        "Subtitle": "Usages",
        "Code": [
          "    const mbedtls_ssl_ciphersuite_t *cur = ciphersuite_definitions;"
        ]
      },
      "Suggestion": "Consider passing 'ciphersuite_definitions' explicitly as argument to the function 'mbedtls_ssl_ciphersuite_from_string' and use that argument instead; use the 'restrict' keyword for 'ciphersuite_definitions' to hint the compiler that it is free of aliasing",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR001"
    },
    {
      "Check": "PWR001",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/library/ssl_ciphersuites.c:1862:1",
      "Title": "Declare global variables as function parameters",
      "RelatedCodeList": {
        "Subtitle": "Usages",
        "Code": [
          "    const mbedtls_ssl_ciphersuite_t *cur = ciphersuite_definitions;"
        ]
      },
      "Suggestion": "Consider passing 'ciphersuite_definitions' explicitly as argument to the function 'mbedtls_ssl_ciphersuite_from_id' and use that argument instead; use the 'restrict' keyword for 'ciphersuite_definitions' to hint the compiler that it is free of aliasing",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR001"
    },
    {
      "Check": "PWR001",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/library/ssl_tls.c:666:1",
      "Title": "Declare global variables as function parameters",
      "RelatedCodeList": {
        "Subtitle": "Usages",
        "Code": [
          "    return extension_name_table["
        ]
      },
      "Suggestion": "Consider passing 'extension_name_table' explicitly as argument to the function 'mbedtls_ssl_get_extension_name' and use that argument instead; use the 'restrict' keyword for 'extension_name_table' to hint the compiler that it is free of aliasing",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR001"
    },
    {
      "Check": "PWR001",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/library/ssl_tls.c:726:1",
      "Title": "Declare global variables as function parameters",
      "RelatedCodeList": {
        "Subtitle": "Usages",
        "Code": [
          "         i < sizeof(extension_name_table) / sizeof(extension_name_table[0]);",
          "            ssl, level, file, line, hs_msg_type, extension_type_table[i],"
        ]
      },
      "Suggestion": "Consider passing 'extension_name_table' and 'extension_type_table' explicitly as arguments to the function 'mbedtls_ssl_print_extensions' and use those arguments instead; use the 'restrict' keyword for 'extension_name_table' and 'extension_type_table' to hint the compiler that they are free of aliasing",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR001"
    },
    {
      "Check": "PWR001",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/library/ssl_tls.c:3758:1",
      "Title": "Declare global variables as function parameters",
      "RelatedCodeList": {
        "Subtitle": "Usages",
        "Code": [
          "        used += sizeof(ssl_serialized_session_header);",
          "            memcpy(p, ssl_serialized_session_header,",
          "                   sizeof(ssl_serialized_session_header));",
          "            p += sizeof(ssl_serialized_session_header);"
        ]
      },
      "Suggestion": "Consider passing 'ssl_serialized_session_header' explicitly as argument to the function 'ssl_session_save' and use that argument instead; use the 'restrict' keyword for 'ssl_serialized_session_header' to hint the compiler that it is free of aliasing",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR001"
    },
    {
      "Check": "PWR001",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/library/ssl_tls.c:3845:1",
      "Title": "Declare global variables as function parameters",
      "RelatedCodeList": {
        "Subtitle": "Usages",
        "Code": [
          "        if ((size_t) (end - p) < sizeof(ssl_serialized_session_header)) {",
          "        if (memcmp(p, ssl_serialized_session_header,",
          "                   sizeof(ssl_serialized_session_header)) != 0) {",
          "        p += sizeof(ssl_serialized_session_header);"
        ]
      },
      "Suggestion": "Consider passing 'ssl_serialized_session_header' explicitly as argument to the function 'ssl_session_load' and use that argument instead; use the 'restrict' keyword for 'ssl_serialized_session_header' to hint the compiler that it is free of aliasing",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR001"
    },
    {
      "Check": "PWR001",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/library/ssl_tls.c:4488:1",
      "Title": "Declare global variables as function parameters",
      "RelatedCodeList": {
        "Subtitle": "Usages",
        "Code": [
          "    used += sizeof(ssl_serialized_context_header);",
          "        memcpy(p, ssl_serialized_context_header,",
          "               sizeof(ssl_serialized_context_header));",
          "        p += sizeof(ssl_serialized_context_header);"
        ]
      },
      "Suggestion": "Consider passing 'ssl_serialized_context_header' explicitly as argument to the function 'mbedtls_ssl_context_save' and use that argument instead; use the 'restrict' keyword for 'ssl_serialized_context_header' to hint the compiler that it is free of aliasing",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR001"
    },
    {
      "Check": "PWR001",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/library/ssl_tls.c:4687:1",
      "Title": "Declare global variables as function parameters",
      "RelatedCodeList": {
        "Subtitle": "Usages",
        "Code": [
          "    if ((size_t) (end - p) < sizeof(ssl_serialized_context_header)) {",
          "    if (memcmp(p, ssl_serialized_context_header,",
          "               sizeof(ssl_serialized_context_header)) != 0) {",
          "    p += sizeof(ssl_serialized_context_header);"
        ]
      },
      "Suggestion": "Consider passing 'ssl_serialized_context_header' explicitly as argument to the function 'ssl_context_load' and use that argument instead; use the 'restrict' keyword for 'ssl_serialized_context_header' to hint the compiler that it is free of aliasing",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR001"
    },
    {
      "Check": "PWR001",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/library/ssl_tls.c:5282:1",
      "Title": "Declare global variables as function parameters",
      "RelatedCodeList": {
        "Subtitle": "Usages",
        "Code": [
          "    if (ssl_check_no_sig_alg_duplication(ssl_preset_suiteb_sig_algs)) {",
          "    if (ssl_check_no_sig_alg_duplication(ssl_preset_default_sig_algs)) {",
          "    if (ssl_check_no_sig_alg_duplication(ssl_tls12_preset_suiteb_sig_algs)) {",
          "    if (ssl_check_no_sig_alg_duplication(ssl_tls12_preset_default_sig_algs)) {",
          "            conf->ciphersuite_list = ssl_preset_suiteb_ciphersuites;",
          "            conf->cert_profile = &mbedtls_x509_crt_profile_suiteb;",
          "                conf->sig_algs = ssl_tls12_preset_suiteb_sig_algs;",
          "            conf->sig_algs = ssl_preset_suiteb_sig_algs;",
          "            conf->group_list = ssl_preset_suiteb_groups;",
          "            conf->cert_profile = &mbedtls_x509_crt_profile_default;",
          "                conf->sig_algs = ssl_tls12_preset_default_sig_algs;",
          "            conf->sig_algs = ssl_preset_default_sig_algs;",
          "            conf->group_list = ssl_preset_default_groups;"
        ]
      },
      "Suggestion": "Consider passing 'ssl_preset_suiteb_sig_algs', 'ssl_preset_default_sig_algs', 'ssl_tls12_preset_suiteb_sig_algs', 'ssl_tls12_preset_default_sig_algs', 'ssl_preset_suiteb_ciphersuites', 'mbedtls_x509_crt_profile_suiteb', 'ssl_preset_suiteb_groups', 'mbedtls_x509_crt_profile_default' and 'ssl_preset_default_groups' explicitly as arguments to the function 'mbedtls_ssl_config_defaults' and use those arguments instead; use the 'restrict' keyword for 'ssl_preset_suiteb_sig_algs', 'ssl_preset_default_sig_algs', 'ssl_tls12_preset_suiteb_sig_algs', 'ssl_tls12_preset_default_sig_algs', 'ssl_preset_suiteb_ciphersuites', 'mbedtls_x509_crt_profile_suiteb', 'ssl_preset_suiteb_groups', 'mbedtls_x509_crt_profile_default' and 'ssl_preset_default_groups' to hint the compiler that they are free of aliasing",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR001"
    },
    {
      "Check": "PWR001",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/library/ssl_tls.c:5725:1",
      "Title": "Declare global variables as function parameters",
      "RelatedCodeList": {
        "Subtitle": "Usages",
        "Code": [
          "    for (int i = 0; tls_id_match_table[i].tls_id != 0; i++) {",
          "        if (tls_id_match_table[i].tls_id == tls_id) {",
          "                *type = PSA_KEY_TYPE_ECC_KEY_PAIR(tls_id_match_table[i].psa_family);",
          "                *bits = tls_id_match_table[i].bits;"
        ]
      },
      "Suggestion": "Consider passing 'tls_id_match_table' explicitly as argument to the function 'mbedtls_ssl_get_psa_curve_info_from_tls_id' and use that argument instead; use the 'restrict' keyword for 'tls_id_match_table' to hint the compiler that it is free of aliasing",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR001"
    },
    {
      "Check": "PWR001",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/library/ssl_tls.c:5744:1",
      "Title": "Declare global variables as function parameters",
      "RelatedCodeList": {
        "Subtitle": "Usages",
        "Code": [
          "    for (int i = 0; tls_id_match_table[i].tls_id != 0; i++) {",
          "        if (tls_id_match_table[i].tls_id == tls_id) {",
          "            return tls_id_match_table[i].ecp_group_id;"
        ]
      },
      "Suggestion": "Consider passing 'tls_id_match_table' explicitly as argument to the function 'mbedtls_ssl_get_ecp_group_id_from_tls_id' and use that argument instead; use the 'restrict' keyword for 'tls_id_match_table' to hint the compiler that it is free of aliasing",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR001"
    },
    {
      "Check": "PWR001",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/library/ssl_tls.c:5755:1",
      "Title": "Declare global variables as function parameters",
      "RelatedCodeList": {
        "Subtitle": "Usages",
        "Code": [
          "    for (int i = 0; tls_id_match_table[i].ecp_group_id != MBEDTLS_ECP_DP_NONE;",
          "        if (tls_id_match_table[i].ecp_group_id == grp_id) {",
          "            return tls_id_match_table[i].tls_id;"
        ]
      },
      "Suggestion": "Consider passing 'tls_id_match_table' explicitly as argument to the function 'mbedtls_ssl_get_tls_id_from_ecp_group_id' and use that argument instead; use the 'restrict' keyword for 'tls_id_match_table' to hint the compiler that it is free of aliasing",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR001"
    },
    {
      "Check": "PWR001",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/library/ssl_tls.c:5789:1",
      "Title": "Declare global variables as function parameters",
      "RelatedCodeList": {
        "Subtitle": "Usages",
        "Code": [
          "    for (int i = 0; tls_id_curve_name_table[i].tls_id != 0; i++) {",
          "        if (tls_id_curve_name_table[i].tls_id == tls_id) {",
          "            return tls_id_curve_name_table[i].name;"
        ]
      },
      "Suggestion": "Consider passing 'tls_id_curve_name_table' explicitly as argument to the function 'mbedtls_ssl_get_curve_name_from_tls_id' and use that argument instead; use the 'restrict' keyword for 'tls_id_curve_name_table' to hint the compiler that it is free of aliasing",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR001"
    },
    {
      "Check": "PWR001",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/programs/cipher/cipher_aead_demo.c:114:1",
      "Title": "Declare global variables as function parameters",
      "RelatedCodeList": {
        "Subtitle": "Usages",
        "Code": [
          "        puts(usage);",
          "    CHK(mbedtls_cipher_setkey(ctx, key_bytes, key_len, MBEDTLS_ENCRYPT));"
        ]
      },
      "Suggestion": "Consider passing 'usage' and 'key_bytes' explicitly as arguments to the function 'aead_prepare' and use those arguments instead; use the 'restrict' keyword for 'usage' and 'key_bytes' to hint the compiler that they are free of aliasing",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR001"
    },
    {
      "Check": "PWR001",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/programs/cipher/cipher_aead_demo.c:176:1",
      "Title": "Declare global variables as function parameters",
      "RelatedCodeList": {
        "Subtitle": "Usages",
        "Code": [
          "    unsigned char out[MSG_MAX_SIZE + MAX_TAG_LENGTH];"
        ]
      },
      "Suggestion": "Consider passing 'msg1_part1', 'msg1_part2', 'msg2_part1' and 'msg2_part2' explicitly as arguments to the function 'aead_encrypt' and use those arguments instead; use the 'restrict' keyword for 'msg1_part1', 'msg1_part2', 'msg2_part1' and 'msg2_part2' to hint the compiler that they are free of aliasing",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR001"
    },
    {
      "Check": "PWR001",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/programs/cipher/cipher_aead_demo.c:210:1",
      "Title": "Declare global variables as function parameters",
      "RelatedCodeList": {
        "Subtitle": "Usages",
        "Code": [
          "                     iv1, sizeof(iv1), add_data1, sizeof(add_data1),",
          "                     msg1_part1, sizeof(msg1_part1),",
          "                     msg1_part2, sizeof(msg1_part2)));",
          "                     iv2, sizeof(iv2), add_data2, sizeof(add_data2),",
          "                     msg2_part1, sizeof(msg2_part1),",
          "                     msg2_part2, sizeof(msg2_part2)));"
        ]
      },
      "Suggestion": "Consider passing 'iv1', 'add_data1', 'msg1_part1', 'msg1_part2', 'iv2', 'add_data2', 'msg2_part1' and 'msg2_part2' explicitly as arguments to the function 'aead_demo' and use those arguments instead; use the 'restrict' keyword for 'iv1', 'add_data1', 'msg1_part1', 'msg1_part2', 'iv2', 'add_data2', 'msg2_part1' and 'msg2_part2' to hint the compiler that they are free of aliasing",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR001"
    },
    {
      "Check": "PWR001",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/programs/fuzz/fuzz_privkey.c:18:1",
      "Title": "Declare global variables as function parameters",
      "RelatedCodeList": {
        "Subtitle": "Usages",
        "Code": [
          "                              (const unsigned char *) pers, strlen(pers)) != 0) {"
        ]
      },
      "Suggestion": "Consider passing 'pers' explicitly as argument to the function 'LLVMFuzzerTestOneInput' and use that argument instead; use the 'restrict' keyword for 'pers' to hint the compiler that it is free of aliasing if you can guarantee it",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR001"
    },
    {
      "Check": "PWR001",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/programs/fuzz/fuzz_client.c:35:1",
      "Title": "Declare global variables as function parameters",
      "RelatedCodeList": {
        "Subtitle": "Usages",
        "Code": [
          "    if (initialized == 0) {",
          "        mbedtls_x509_crt_init(&cacert);",
          "        if (mbedtls_x509_crt_parse(&cacert, (const unsigned char *) mbedtls_test_cas_pem,",
          "        alpn_list[0] = \"HTTP\";",
          "        alpn_list[1] = \"fuzzalpn\";",
          "        alpn_list[2] = NULL;",
          "        initialized = 1;",
          "                              (const unsigned char *) pers, strlen(pers)) != 0) {",
          "        mbedtls_ssl_conf_psk(&conf, psk, sizeof(psk),",
          "                             (const unsigned char *) psk_id, sizeof(psk_id) - 1);",
          "        mbedtls_ssl_conf_ca_chain(&conf, &cacert, NULL);",
          "        mbedtls_ssl_conf_alpn_protocols(&conf, alpn_list);"
        ]
      },
      "Suggestion": "Consider passing 'initialized', 'cacert', 'mbedtls_test_cas_pem', 'alpn_list', 'pers', 'psk' and 'psk_id' explicitly as arguments to the function 'LLVMFuzzerTestOneInput' and use those arguments instead; use the 'restrict' keyword for 'initialized', 'cacert', 'mbedtls_test_cas_pem', 'alpn_list', 'psk' and 'psk_id' to hint the compiler that they are free of aliasing and do the same for 'pers' if you can guarantee it",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR001"
    },
    {
      "Check": "PWR001",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/programs/fuzz/fuzz_dtlsclient.c:29:1",
      "Title": "Declare global variables as function parameters",
      "RelatedCodeList": {
        "Subtitle": "Usages",
        "Code": [
          "    if (initialized == 0) {",
          "        mbedtls_x509_crt_init(&cacert);",
          "        if (mbedtls_x509_crt_parse(&cacert, (const unsigned char *) mbedtls_test_cas_pem,",
          "        initialized = 1;",
          "                              (const unsigned char *) pers, strlen(pers)) != 0) {",
          "    mbedtls_ssl_conf_ca_chain(&conf, &cacert, NULL);"
        ]
      },
      "Suggestion": "Consider passing 'initialized', 'cacert', 'mbedtls_test_cas_pem' and 'pers' explicitly as arguments to the function 'LLVMFuzzerTestOneInput' and use those arguments instead; use the 'restrict' keyword for 'initialized', 'cacert' and 'mbedtls_test_cas_pem' to hint the compiler that they are free of aliasing and do the same for 'pers' if you can guarantee it",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR001"
    },
    {
      "Check": "PWR001",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/programs/fuzz/fuzz_dtlsserver.c:31:1",
      "Title": "Declare global variables as function parameters",
      "RelatedCodeList": {
        "Subtitle": "Usages",
        "Code": [
          "    mbedtls_x509_crt_init(&srvcert);",
          "    mbedtls_pk_init(&pkey);",
          "                              (const unsigned char *) pers, strlen(pers)) != 0) {",
          "    if (initialized == 0) {",
          "        if (mbedtls_x509_crt_parse(&srvcert, (const unsigned char *) mbedtls_test_srv_crt,",
          "        if (mbedtls_x509_crt_parse(&srvcert, (const unsigned char *) mbedtls_test_cas_pem,",
          "        if (mbedtls_pk_parse_key(&pkey, (const unsigned char *) mbedtls_test_srv_key,",
          "        initialized = 1;",
          "    mbedtls_ssl_conf_ca_chain(&conf, srvcert.next, NULL);",
          "    if (mbedtls_ssl_conf_own_cert(&conf, &srvcert, &pkey) != 0) {",
          "    if (mbedtls_ssl_set_client_transport_id(&ssl, client_ip, sizeof(client_ip)) != 0) {",
          "        if (mbedtls_ssl_set_client_transport_id(&ssl, client_ip, sizeof(client_ip)) != 0) {",
          "    mbedtls_pk_free(&pkey);",
          "    mbedtls_x509_crt_free(&srvcert);"
        ]
      },
      "Suggestion": "Consider passing 'srvcert', 'pkey', 'pers', 'initialized', 'mbedtls_test_srv_crt', 'mbedtls_test_cas_pem', 'mbedtls_test_srv_key' and 'client_ip' explicitly as arguments to the function 'LLVMFuzzerTestOneInput' and use those arguments instead; use the 'restrict' keyword for 'srvcert', 'pkey', 'initialized', 'mbedtls_test_cas_pem' and 'client_ip' to hint the compiler that they are free of aliasing and do the same for 'pers', 'mbedtls_test_srv_crt' and 'mbedtls_test_srv_key' if you can guarantee it",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR001"
    },
    {
      "Check": "PWR001",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/programs/fuzz/fuzz_server.c:35:1",
      "Title": "Declare global variables as function parameters",
      "RelatedCodeList": {
        "Subtitle": "Usages",
        "Code": [
          "    mbedtls_x509_crt_init(&srvcert);",
          "    mbedtls_pk_init(&pkey);",
          "                              (const unsigned char *) pers, strlen(pers)) != 0) {",
          "    if (initialized == 0) {",
          "        if (mbedtls_x509_crt_parse(&srvcert, (const unsigned char *) mbedtls_test_srv_crt,",
          "        if (mbedtls_x509_crt_parse(&srvcert, (const unsigned char *) mbedtls_test_cas_pem,",
          "        if (mbedtls_pk_parse_key(&pkey, (const unsigned char *) mbedtls_test_srv_key,",
          "        alpn_list[0] = \"HTTP\";",
          "        alpn_list[1] = \"fuzzalpn\";",
          "        alpn_list[2] = NULL;",
          "        initialized = 1;",
          "    mbedtls_ssl_conf_ca_chain(&conf, srvcert.next, NULL);",
          "    if (mbedtls_ssl_conf_own_cert(&conf, &srvcert, &pkey) != 0) {",
          "        mbedtls_ssl_conf_alpn_protocols(&conf, alpn_list);",
          "        mbedtls_ssl_conf_psk(&conf, psk, sizeof(psk),",
          "                             (const unsigned char *) psk_id, sizeof(psk_id) - 1);",
          "    mbedtls_x509_crt_free(&srvcert);",
          "    mbedtls_pk_free(&pkey);"
        ]
      },
      "Suggestion": "Consider passing 'srvcert', 'pkey', 'pers', 'initialized', 'mbedtls_test_srv_crt', 'mbedtls_test_cas_pem', 'mbedtls_test_srv_key', 'alpn_list', 'psk' and 'psk_id' explicitly as arguments to the function 'LLVMFuzzerTestOneInput' and use those arguments instead; use the 'restrict' keyword for 'srvcert', 'pkey', 'initialized', 'mbedtls_test_cas_pem', 'alpn_list', 'psk' and 'psk_id' to hint the compiler that they are free of aliasing and do the same for 'pers', 'mbedtls_test_srv_crt' and 'mbedtls_test_srv_key' if you can guarantee it",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR001"
    },
    {
      "Check": "PWR001",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/programs/hash/md_hmac_demo.c:90:1",
      "Title": "Declare global variables as function parameters",
      "RelatedCodeList": {
        "Subtitle": "Usages",
        "Code": [
          "    CHK(mbedtls_md_hmac_starts(&ctx, key_bytes, sizeof(key_bytes)));",
          "    CHK(mbedtls_md_hmac_update(&ctx, msg1_part1, sizeof(msg1_part1)));",
          "    CHK(mbedtls_md_hmac_update(&ctx, msg1_part2, sizeof(msg1_part2)));",
          "    CHK(mbedtls_md_hmac_update(&ctx, msg2_part1, sizeof(msg2_part1)));",
          "    CHK(mbedtls_md_hmac_update(&ctx, msg2_part2, sizeof(msg2_part2)));"
        ]
      },
      "Suggestion": "Consider passing 'key_bytes', 'msg1_part1', 'msg1_part2', 'msg2_part1' and 'msg2_part2' explicitly as arguments to the function 'hmac_demo' and use those arguments instead; use the 'restrict' keyword for 'key_bytes', 'msg1_part1', 'msg1_part2', 'msg2_part1' and 'msg2_part2' to hint the compiler that they are free of aliasing",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR001"
    },
    {
      "Check": "PWR001",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/programs/pkey/gen_key.c:122:1",
      "Title": "Declare global variables as function parameters",
      "RelatedCodeList": {
        "Subtitle": "Usages",
        "Code": [
          "    if (opt.format == FORMAT_PEM) {"
        ]
      },
      "Suggestion": "Consider passing 'opt' explicitly as argument to the function 'write_private_key' and use that argument instead; use the 'restrict' keyword for 'opt' to hint the compiler that it is free of aliasing",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR001"
    },
    {
      "Check": "PWR001",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/programs/pkey/key_app_writer.c:92:1",
      "Title": "Declare global variables as function parameters",
      "RelatedCodeList": {
        "Subtitle": "Usages",
        "Code": [
          "    if (opt.output_format == OUTPUT_FORMAT_PEM) {"
        ]
      },
      "Suggestion": "Consider passing 'opt' explicitly as argument to the function 'write_public_key' and use that argument instead; use the 'restrict' keyword for 'opt' to hint the compiler that it is free of aliasing",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR001"
    },
    {
      "Check": "PWR001",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/programs/pkey/key_app_writer.c:134:1",
      "Title": "Declare global variables as function parameters",
      "RelatedCodeList": {
        "Subtitle": "Usages",
        "Code": [
          "    if (opt.output_format == OUTPUT_FORMAT_PEM) {"
        ]
      },
      "Suggestion": "Consider passing 'opt' explicitly as argument to the function 'write_private_key' and use that argument instead; use the 'restrict' keyword for 'opt' to hint the compiler that it is free of aliasing",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR001"
    },
    {
      "Check": "PWR001",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/programs/psa/aead_demo.c:118:1",
      "Title": "Declare global variables as function parameters",
      "RelatedCodeList": {
        "Subtitle": "Usages",
        "Code": [
          "        puts(usage);",
          "    PSA_CHECK(psa_import_key(&attributes, key_bytes, key_bits / 8, key));"
        ]
      },
      "Suggestion": "Consider passing 'usage' and 'key_bytes' explicitly as arguments to the function 'aead_prepare' and use those arguments instead; use the 'restrict' keyword for 'usage' and 'key_bytes' to hint the compiler that they are free of aliasing",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR001"
    },
    {
      "Check": "PWR001",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/programs/psa/aead_demo.c:191:1",
      "Title": "Declare global variables as function parameters",
      "RelatedCodeList": {
        "Subtitle": "Usages",
        "Code": [
          "    unsigned char out[PSA_AEAD_ENCRYPT_OUTPUT_MAX_SIZE(MSG_MAX_SIZE)];"
        ]
      },
      "Suggestion": "Consider passing 'msg1_part1', 'msg1_part2', 'msg2_part1' and 'msg2_part2' explicitly as arguments to the function 'aead_encrypt' and use those arguments instead; use the 'restrict' keyword for 'msg1_part1', 'msg1_part2', 'msg2_part1' and 'msg2_part2' to hint the compiler that they are free of aliasing",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR001"
    },
    {
      "Check": "PWR001",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/programs/psa/aead_demo.c:229:1",
      "Title": "Declare global variables as function parameters",
      "RelatedCodeList": {
        "Subtitle": "Usages",
        "Code": [
          "                           iv1, sizeof(iv1), add_data1, sizeof(add_data1),",
          "                           msg1_part1, sizeof(msg1_part1),",
          "                           msg1_part2, sizeof(msg1_part2)));",
          "                           iv2, sizeof(iv2), add_data2, sizeof(add_data2),",
          "                           msg2_part1, sizeof(msg2_part1),",
          "                           msg2_part2, sizeof(msg2_part2)));"
        ]
      },
      "Suggestion": "Consider passing 'iv1', 'add_data1', 'msg1_part1', 'msg1_part2', 'iv2', 'add_data2', 'msg2_part1' and 'msg2_part2' explicitly as arguments to the function 'aead_demo' and use those arguments instead; use the 'restrict' keyword for 'iv1', 'add_data1', 'msg1_part1', 'msg1_part2', 'iv2', 'add_data2', 'msg2_part1' and 'msg2_part2' to hint the compiler that they are free of aliasing",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR001"
    },
    {
      "Check": "PWR001",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/programs/psa/hmac_demo.c:93:1",
      "Title": "Declare global variables as function parameters",
      "RelatedCodeList": {
        "Subtitle": "Usages",
        "Code": [
          "    psa_set_key_bits(&attributes, 8 * sizeof(key_bytes));     // optional",
          "                            key_bytes, sizeof(key_bytes), &key);",
          "    PSA_CHECK(psa_mac_update(&op, msg1_part1, sizeof(msg1_part1)));",
          "    PSA_CHECK(psa_mac_update(&op, msg1_part2, sizeof(msg1_part2)));",
          "    PSA_CHECK(psa_mac_update(&op, msg2_part1, sizeof(msg2_part1)));",
          "    PSA_CHECK(psa_mac_update(&op, msg2_part2, sizeof(msg2_part2)));"
        ]
      },
      "Suggestion": "Consider passing 'key_bytes', 'msg1_part1', 'msg1_part2', 'msg2_part1' and 'msg2_part2' explicitly as arguments to the function 'hmac_demo' and use those arguments instead; use the 'restrict' keyword for 'key_bytes', 'msg1_part1', 'msg1_part2', 'msg2_part1' and 'msg2_part2' to hint the compiler that they are free of aliasing",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR001"
    },
    {
      "Check": "PWR001",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/programs/ssl/ssl_client2.c:565:1",
      "Title": "Declare global variables as function parameters",
      "RelatedCodeList": {
        "Subtitle": "Usages",
        "Code": [
          "        memcpy(peer_crt_info, buf, sizeof(buf));",
          "    if (opt.debug_level == 0) {"
        ]
      },
      "Suggestion": "Consider passing 'peer_crt_info' and 'opt' explicitly as arguments to the function 'my_verify' and use those arguments instead; use the 'restrict' keyword for 'peer_crt_info' and 'opt' to hint the compiler that they are free of aliasing",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR001"
    },
    {
      "Check": "PWR001",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/programs/ssl/ssl_client2.c:601:1",
      "Title": "Declare global variables as function parameters",
      "RelatedCodeList": {
        "Subtitle": "Usages",
        "Code": [
          "    if (opt.transport != MBEDTLS_SSL_TRANSPORT_DATAGRAM) {",
          "        if (opt.cid_enabled == MBEDTLS_SSL_CID_ENABLED) {"
        ]
      },
      "Suggestion": "Consider passing 'opt' explicitly as argument to the function 'report_cid_usage' and use that argument instead; use the 'restrict' keyword for 'opt' to hint the compiler that it is free of aliasing",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR001"
    },
    {
      "Check": "PWR001",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/programs/ssl/ssl_test_lib.c:331:1",
      "Title": "Declare global variables as function parameters",
      "RelatedCodeList": {
        "Subtitle": "Usages",
        "Code": [
          "    if (first_try) {",
          "        first_try = 0;",
          "        first_try = 1; /* Next call will be a new operation */"
        ]
      },
      "Suggestion": "Consider passing 'first_try' explicitly as argument to the function 'delayed_recv' and use that argument instead; use the 'restrict' keyword for 'first_try' to hint the compiler that it is free of aliasing",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR001"
    },
    {
      "Check": "PWR001",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/programs/ssl/ssl_test_lib.c:348:1",
      "Title": "Declare global variables as function parameters",
      "RelatedCodeList": {
        "Subtitle": "Usages",
        "Code": [
          "    if (first_try) {",
          "        first_try = 0;",
          "        first_try = 1; /* Next call will be a new operation */"
        ]
      },
      "Suggestion": "Consider passing 'first_try' explicitly as argument to the function 'delayed_send' and use that argument instead; use the 'restrict' keyword for 'first_try' to hint the compiler that it is free of aliasing",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR001"
    },
    {
      "Check": "PWR001",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/programs/ssl/ssl_test_lib.c:547:1",
      "Title": "Declare global variables as function parameters",
      "RelatedCodeList": {
        "Subtitle": "Usages",
        "Code": [
          "    for (int i = 0; tls_id_group_name_table[i].tls_id != 0; i++) {",
          "        if (strcmp(tls_id_group_name_table[i].name, name) == 0) {",
          "            return tls_id_group_name_table[i].tls_id;"
        ]
      },
      "Suggestion": "Consider passing 'tls_id_group_name_table' explicitly as argument to the function 'mbedtls_ssl_get_curve_tls_id_from_name' and use that argument instead; use the 'restrict' keyword for 'tls_id_group_name_table' to hint the compiler that it is free of aliasing",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR001"
    },
    {
      "Check": "PWR001",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/programs/ssl/ssl_test_lib.c:562:1",
      "Title": "Declare global variables as function parameters",
      "RelatedCodeList": {
        "Subtitle": "Usages",
        "Code": [
          "    for (int i = 0; tls_id_group_name_table[i].tls_id != 0; i++) {",
          "        if (tls_id_group_name_table[i].is_supported == 1) {",
          "            mbedtls_printf(\"%s \", tls_id_group_name_table[i].name);"
        ]
      },
      "Suggestion": "Consider passing 'tls_id_group_name_table' explicitly as argument to the function 'mbedtls_ssl_print_supported_groups_list' and use that argument instead; use the 'restrict' keyword for 'tls_id_group_name_table' to hint the compiler that it is free of aliasing",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR001"
    },
    {
      "Check": "PWR001",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/programs/ssl/ssl_context_info.c:143:1",
      "Title": "Declare global variables as function parameters",
      "RelatedCodeList": {
        "Subtitle": "Usages",
        "Code": [
          "    if (debug) {"
        ]
      },
      "Suggestion": "Consider passing 'debug' explicitly as argument to the function 'printf_dbg' and use that argument instead; use the 'restrict' keyword for 'debug' to hint the compiler that it is free of aliasing",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR001"
    },
    {
      "Check": "PWR001",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/programs/ssl/ssl_context_info.c:170:1",
      "Title": "Declare global variables as function parameters",
      "RelatedCodeList": {
        "Subtitle": "Usages",
        "Code": [
          "    if (NULL != b64_file) {",
          "        fclose(b64_file);"
        ]
      },
      "Suggestion": "Consider passing 'b64_file' explicitly as argument to the function 'error_exit' and use that argument instead; use the 'restrict' keyword for 'b64_file' to hint the compiler that it is free of aliasing if you can guarantee it",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR001"
    },
    {
      "Check": "PWR001",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/programs/ssl/ssl_context_info.c:181:1",
      "Title": "Declare global variables as function parameters",
      "RelatedCodeList": {
        "Subtitle": "Usages",
        "Code": [
          "            debug = 1;",
          "            if (NULL != b64_file) {",
          "            if ((b64_file = fopen(argv[i], \"r\")) == NULL) {",
          "            conf_keep_peer_certificate = 0;",
          "            conf_dtls_proto = 0;"
        ]
      },
      "Suggestion": "Consider passing 'debug', 'b64_file', 'conf_keep_peer_certificate' and 'conf_dtls_proto' explicitly as arguments to the function 'parse_arguments' and use those arguments instead; use the 'restrict' keyword for 'debug', 'conf_keep_peer_certificate' and 'conf_dtls_proto' to hint the compiler that they are free of aliasing and do the same for 'b64_file' if you can guarantee it",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR001"
    },
    {
      "Check": "PWR001",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/programs/ssl/ssl_context_info.c:276:1",
      "Title": "Declare global variables as function parameters",
      "RelatedCodeList": {
        "Subtitle": "Usages",
        "Code": [
          "        strftime(buf, sizeof(buf), format, t);"
        ]
      },
      "Suggestion": "Consider passing 'format' explicitly as argument to the function 'print_time' and use that argument instead; use the 'restrict' keyword for 'format' to hint the compiler that it is free of aliasing",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR001"
    },
    {
      "Check": "PWR001",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/programs/ssl/ssl_context_info.c:348:1",
      "Title": "Declare global variables as function parameters",
      "RelatedCodeList": {
        "Subtitle": "Usages",
        "Code": [
          "        c = fgetc(b64_file);",
          "                    printf_err(alloc_err);"
        ]
      },
      "Suggestion": "Consider passing 'b64_file' and 'alloc_err' explicitly as arguments to the function 'read_next_b64_code' and use those arguments instead; use the 'restrict' keyword for 'alloc_err' to hint the compiler that it is free of aliasing and do the same for 'b64_file' if you can guarantee it",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR001"
    },
    {
      "Check": "PWR001",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/programs/ssl/ssl_context_info.c:514:1",
      "Title": "Declare global variables as function parameters",
      "RelatedCodeList": {
        "Subtitle": "Usages",
        "Code": [
          "        CHECK_SSL_END(8);",
          "    CHECK_SSL_END(2);",
          "    CHECK_SSL_END(1);",
          "    CHECK_SSL_END(1 + 32);",
          "    CHECK_SSL_END(48);",
          "    CHECK_SSL_END(4);",
          "        if (conf_keep_peer_certificate) {",
          "            CHECK_SSL_END(3);",
          "                CHECK_SSL_END(cert_len);",
          "            CHECK_SSL_END(1);",
          "            CHECK_SSL_END(1);",
          "                CHECK_SSL_END(cert_len);",
          "        CHECK_SSL_END(3);",
          "            CHECK_SSL_END(ticket_len);",
          "        CHECK_SSL_END(4);",
          "        CHECK_SSL_END(1);",
          "        CHECK_SSL_END(1);",
          "        CHECK_SSL_END(1);"
        ]
      },
      "Suggestion": "Consider passing 'buf_ln_err' and 'conf_keep_peer_certificate' explicitly as arguments to the function 'print_deserialized_ssl_session' and use those arguments instead; use the 'restrict' keyword for 'buf_ln_err' and 'conf_keep_peer_certificate' to hint the compiler that they are free of aliasing",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR001"
    },
    {
      "Check": "PWR001",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/programs/ssl/ssl_context_info.c:751:1",
      "Title": "Declare global variables as function parameters",
      "RelatedCodeList": {
        "Subtitle": "Usages",
        "Code": [
          "    CHECK_SSL_END(3 + 2 + 3);",
          "    CHECK_SSL_END(4);",
          "    CHECK_SSL_END(session_len);",
          "    CHECK_SSL_END(TRANSFORM_RANDBYTE_LEN);",
          "        CHECK_SSL_END(1);",
          "            CHECK_SSL_END(cid_len);",
          "        CHECK_SSL_END(1);",
          "            CHECK_SSL_END(cid_len);",
          "        CHECK_SSL_END(4);",
          "        CHECK_SSL_END(8);",
          "        CHECK_SSL_END(8);",
          "    if (conf_dtls_proto) {",
          "        CHECK_SSL_END(1);",
          "    CHECK_SSL_END(8);",
          "    if (conf_dtls_proto) {",
          "        CHECK_SSL_END(2);",
          "        CHECK_SSL_END(1);",
          "        CHECK_SSL_END(alpn_len);"
        ]
      },
      "Suggestion": "Consider passing 'buf_ln_err' and 'conf_dtls_proto' explicitly as arguments to the function 'print_deserialized_ssl_context' and use those arguments instead; use the 'restrict' keyword for 'buf_ln_err' and 'conf_dtls_proto' to hint the compiler that they are free of aliasing",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR001"
    },
    {
      "Check": "PWR001",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/programs/ssl/ssl_server2.c:784:1",
      "Title": "Declare global variables as function parameters",
      "RelatedCodeList": {
        "Subtitle": "Usages",
        "Code": [
          "            mbedtls_pk_parse_keyfile(new->key, key_file, \"\", rng_get, &rng) != 0) {"
        ]
      },
      "Suggestion": "Consider passing 'rng' explicitly as argument to the function 'sni_parse' and use that argument instead; use the 'restrict' keyword for 'rng' to hint the compiler that it is free of aliasing",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR001"
    },
    {
      "Check": "PWR001",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/programs/ssl/ssl_server2.c:1053:1",
      "Title": "Declare global variables as function parameters",
      "RelatedCodeList": {
        "Subtitle": "Usages",
        "Code": [
          "    received_sigterm = 1;",
          "    mbedtls_net_free(&listen_fd);   /* causes mbedtls_net_accept() to abort */",
          "    mbedtls_net_free(&client_fd);   /* causes net_read() to abort */"
        ]
      },
      "Suggestion": "Consider passing 'received_sigterm', 'listen_fd' and 'client_fd' explicitly as arguments to the function 'term_handler' and use those arguments instead; use the 'restrict' keyword for 'received_sigterm', 'listen_fd' and 'client_fd' to hint the compiler that they are free of aliasing",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR001"
    },
    {
      "Check": "PWR001",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/programs/ssl/ssl_server2.c:1330:1",
      "Title": "Declare global variables as function parameters",
      "RelatedCodeList": {
        "Subtitle": "Usages",
        "Code": [
          "    if (opt.transport != MBEDTLS_SSL_TRANSPORT_DATAGRAM) {",
          "        if (opt.cid_enabled == MBEDTLS_SSL_CID_ENABLED) {"
        ]
      },
      "Suggestion": "Consider passing 'opt' explicitly as argument to the function 'report_cid_usage' and use that argument instead; use the 'restrict' keyword for 'opt' to hint the compiler that it is free of aliasing",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR001"
    },
    {
      "Check": "PWR001",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/programs/ssl/ssl_server2.c:1408:1",
      "Title": "Declare global variables as function parameters",
      "RelatedCodeList": {
        "Subtitle": "Usages",
        "Code": [
          "    switch (opt.dummy_ticket % 11) {"
        ]
      },
      "Suggestion": "Consider passing 'opt' explicitly as argument to the function 'dummy_ticket_parse' and use that argument instead; use the 'restrict' keyword for 'opt' to hint the compiler that it is free of aliasing",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR001"
    },
    {
      "Check": "PWR001",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/programs/test/metatest.c:58:1",
      "Title": "Declare global variables as function parameters",
      "RelatedCodeList": {
        "Subtitle": "Usages",
        "Code": [
          "    memset((void *) p, false_but_the_compiler_does_not_know, n);"
        ]
      },
      "Suggestion": "Consider passing 'false_but_the_compiler_does_not_know' explicitly as argument to the function 'set_to_zero_but_the_compiler_does_not_know' and use that argument instead; use the 'restrict' keyword for 'false_but_the_compiler_does_not_know' to hint the compiler that it is free of aliasing",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR001"
    },
    {
      "Check": "PWR001",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/programs/test/metatest.c:105:1",
      "Title": "Declare global variables as function parameters",
      "RelatedCodeList": {
        "Subtitle": "Usages",
        "Code": [
          "    volatile char *p = calloc_but_the_compiler_does_not_know(1, 1);",
          "    free_but_the_compiler_does_not_know((void *) p);"
        ]
      },
      "Suggestion": "Consider passing 'calloc_but_the_compiler_does_not_know' and 'free_but_the_compiler_does_not_know' explicitly as arguments to the function 'read_after_free' and use those arguments instead; use the 'restrict' keyword for 'calloc_but_the_compiler_does_not_know' and 'free_but_the_compiler_does_not_know' to hint the compiler that they are free of aliasing if you can guarantee it",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR001"
    },
    {
      "Check": "PWR001",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/programs/test/metatest.c:115:1",
      "Title": "Declare global variables as function parameters",
      "RelatedCodeList": {
        "Subtitle": "Usages",
        "Code": [
          "    volatile char *p = calloc_but_the_compiler_does_not_know(1, 1);",
          "    free_but_the_compiler_does_not_know((void *) p);",
          "    free_but_the_compiler_does_not_know((void *) p);"
        ]
      },
      "Suggestion": "Consider passing 'calloc_but_the_compiler_does_not_know' and 'free_but_the_compiler_does_not_know' explicitly as arguments to the function 'double_free' and use those arguments instead; use the 'restrict' keyword for 'calloc_but_the_compiler_does_not_know' and 'free_but_the_compiler_does_not_know' to hint the compiler that they are free of aliasing if you can guarantee it",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR001"
    },
    {
      "Check": "PWR001",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/programs/test/metatest.c:125:1",
      "Title": "Declare global variables as function parameters",
      "RelatedCodeList": {
        "Subtitle": "Usages",
        "Code": [
          "    if (false_but_the_compiler_does_not_know) {"
        ]
      },
      "Suggestion": "Consider passing 'false_but_the_compiler_does_not_know' explicitly as argument to the function 'read_uninitialized_stack' and use that argument instead; use the 'restrict' keyword for 'false_but_the_compiler_does_not_know' to hint the compiler that it is free of aliasing",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR001"
    },
    {
      "Check": "PWR001",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/programs/test/metatest.c:139:1",
      "Title": "Declare global variables as function parameters",
      "RelatedCodeList": {
        "Subtitle": "Usages",
        "Code": [
          "    volatile char *p = calloc_but_the_compiler_does_not_know(1, 1);"
        ]
      },
      "Suggestion": "Consider passing 'calloc_but_the_compiler_does_not_know' explicitly as argument to the function 'memory_leak' and use that argument instead; use the 'restrict' keyword for 'calloc_but_the_compiler_does_not_know' to hint the compiler that it is free of aliasing if you can guarantee it",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR001"
    },
    {
      "Check": "PWR001",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/programs/test/udp_proxy.c:177:1",
      "Title": "Declare global variables as function parameters",
      "RelatedCodeList": {
        "Subtitle": "Usages",
        "Code": [
          "    opt.server_addr    = DFL_SERVER_ADDR;",
          "    opt.server_port    = DFL_SERVER_PORT;",
          "    opt.listen_addr    = DFL_LISTEN_ADDR;",
          "    opt.listen_port    = DFL_LISTEN_PORT;",
          "    opt.pack           = DFL_PACK;",
          "    opt.delay_cli_cnt = 0;",
          "    opt.delay_srv_cnt = 0;",
          "    memset(opt.delay_cli, 0, sizeof(opt.delay_cli));",
          "    memset(opt.delay_srv, 0, sizeof(opt.delay_srv));",
          "            opt.server_addr = q;",
          "            opt.server_port = q;",
          "            opt.listen_addr = q;",
          "            opt.listen_port = q;",
          "            opt.duplicate = atoi(q);",
          "            if (opt.duplicate < 0 || opt.duplicate > 20) {",
          "            opt.delay = atoi(q);",
          "            if (opt.delay < 0 || opt.delay > 20 || opt.delay == 1) {",
          "            opt.delay_ccs = atoi(q);",
          "            if (opt.delay_ccs < 0 || opt.delay_ccs > 1) {",
          "                delay_cnt  = &opt.delay_cli_cnt;",
          "                delay_list = opt.delay_cli;",
          "                delay_cnt  = &opt.delay_srv_cnt;",
          "                delay_list = opt.delay_srv;",
          "            opt.drop = atoi(q);",
          "            if (opt.drop < 0 || opt.drop > 20 || opt.drop == 1) {",
          "            opt.pack = (unsigned) atoi(q);",
          "            opt.mtu = atoi(q);",
          "            if (opt.mtu < 0 || opt.mtu > MAX_MSG_SIZE) {",
          "            opt.bad_ad = atoi(q);",
          "            if (opt.bad_ad < 0 || opt.bad_ad > 1) {",
          "            opt.bad_cid = (unsigned) atoi(q);",
          "            opt.protect_hvr = atoi(q);",
          "            if (opt.protect_hvr < 0 || opt.protect_hvr > 1) {",
          "            opt.protect_len = atoi(q);",
          "            if (opt.protect_len < 0) {",
          "            opt.inject_clihlo = atoi(q);",
          "            if (opt.inject_clihlo < 0 || opt.inject_clihlo > 1) {",
          "            opt.seed = atoi(q);",
          "            if (opt.seed == 0) {"
        ]
      },
      "Suggestion": "Consider passing 'opt' explicitly as argument to the function 'get_options' and use that argument instead; use the 'restrict' keyword for 'opt' to hint the compiler that it is free of aliasing",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR001"
    },
    {
      "Check": "PWR001",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/programs/test/udp_proxy.c:354:1",
      "Title": "Declare global variables as function parameters",
      "RelatedCodeList": {
        "Subtitle": "Usages",
        "Code": [
          "    if (initialized == 0) {",
          "        (void) mbedtls_timing_get_timer(&hires, 1);",
          "        initialized = 1;",
          "    return mbedtls_timing_get_timer(&hires, 0);"
        ]
      },
      "Suggestion": "Consider passing 'initialized' and 'hires' explicitly as arguments to the function 'elapsed_time' and use those arguments instead; use the 'restrict' keyword for 'initialized' and 'hires' to hint the compiler that they are free of aliasing",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR001"
    },
    {
      "Check": "PWR001",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/programs/test/udp_proxy.c:400:1",
      "Title": "Declare global variables as function parameters",
      "RelatedCodeList": {
        "Subtitle": "Usages",
        "Code": [
          "    if (cur_time - buf->packet_lifetime >= opt.pack) {",
          "    return opt.pack - (cur_time - buf->packet_lifetime);"
        ]
      },
      "Suggestion": "Consider passing 'opt' explicitly as argument to the function 'ctx_buffer_time_remaining' and use that argument instead; use the 'restrict' keyword for 'opt' to hint the compiler that it is free of aliasing",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR001"
    },
    {
      "Check": "PWR001",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/programs/test/udp_proxy.c:449:1",
      "Title": "Declare global variables as function parameters",
      "RelatedCodeList": {
        "Subtitle": "Usages",
        "Code": [
          "    if (opt.pack > 0) {",
          "        if (outbuf[0].ctx == ctx) {",
          "            buf = &outbuf[0];",
          "        } else if (outbuf[1].ctx == ctx) {",
          "            buf = &outbuf[1];"
        ]
      },
      "Suggestion": "Consider passing 'opt' and 'outbuf' explicitly as arguments to the function 'dispatch_data' and use those arguments instead; use the 'restrict' keyword for 'opt' and 'outbuf' to hint the compiler that they are free of aliasing",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR001"
    },
    {
      "Check": "PWR001",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/programs/test/udp_proxy.c:531:1",
      "Title": "Declare global variables as function parameters",
      "RelatedCodeList": {
        "Subtitle": "Usages",
        "Code": [
          "    if (opt.inject_clihlo != 0 &&",
          "        inject_clihlo_state == ICH_INIT &&",
          "        memcpy(&initial_clihlo, p, sizeof(packet));",
          "        inject_clihlo_state = ICH_CACHED;",
          "    if (opt.bad_cid != 0 &&",
          "        (rand() % opt.bad_cid) == 0) {",
          "    if (opt.bad_ad &&",
          "    if (opt.duplicate != 0 &&",
          "        rand() % opt.duplicate == 0) {",
          "    if (opt.inject_clihlo != 0 &&",
          "        inject_clihlo_state == ICH_CACHED &&",
          "        print_packet(&initial_clihlo, \"injected\");",
          "        if ((ret = dispatch_data(dst, initial_clihlo.buf,",
          "                                 initial_clihlo.len)) <= 0) {",
          "        inject_clihlo_state = ICH_INJECTED;"
        ]
      },
      "Suggestion": "Consider passing 'opt', 'inject_clihlo_state' and 'initial_clihlo' explicitly as arguments to the function 'send_packet' and use those arguments instead; use the 'restrict' keyword for 'opt' and 'initial_clihlo' to hint the compiler that they are free of aliasing and do the same for 'inject_clihlo_state' if you can guarantee it",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR001"
    },
    {
      "Check": "PWR001",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/programs/test/udp_proxy.c:620:1",
      "Title": "Declare global variables as function parameters",
      "RelatedCodeList": {
        "Subtitle": "Usages",
        "Code": [
          "    memset(&prev, 0, sizeof(prev));",
          "    prev_len = 0;"
        ]
      },
      "Suggestion": "Consider passing 'prev' and 'prev_len' explicitly as arguments to the function 'clear_pending' and use those arguments instead; use the 'restrict' keyword for 'prev' and 'prev_len' to hint the compiler that they are free of aliasing",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR001"
    },
    {
      "Check": "PWR001",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/programs/test/udp_proxy.c:626:1",
      "Title": "Declare global variables as function parameters",
      "RelatedCodeList": {
        "Subtitle": "Usages",
        "Code": [
          "    if (prev_len == MAX_DELAYED_MSG) {",
          "    memcpy(&prev[prev_len++], delay, sizeof(packet));"
        ]
      },
      "Suggestion": "Consider passing 'prev_len' and 'prev' explicitly as arguments to the function 'delay_packet' and use those arguments instead; use the 'restrict' keyword for 'prev_len' and 'prev' to hint the compiler that they are free of aliasing",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR001"
    },
    {
      "Check": "PWR001",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/programs/test/udp_proxy.c:635:1",
      "Title": "Declare global variables as function parameters",
      "RelatedCodeList": {
        "Subtitle": "Usages",
        "Code": [
          "    for (offset = 0; offset < prev_len; offset++) {",
          "        ret = send_packet(&prev[offset], \"delayed\");"
        ]
      },
      "Suggestion": "Consider passing 'prev_len' and 'prev' explicitly as arguments to the function 'send_delayed' and use those arguments instead; use the 'restrict' keyword for 'prev_len' and 'prev' to hint the compiler that they are free of aliasing",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR001"
    },
    {
      "Check": "PWR001",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/programs/test/udp_proxy.c:667:1",
      "Title": "Declare global variables as function parameters",
      "RelatedCodeList": {
        "Subtitle": "Usages",
        "Code": [
          "    id = cur.len % sizeof(held);",
          "        delay_list     = opt.delay_cli;",
          "        delay_list_len = opt.delay_cli_cnt;",
          "        delay_list     = opt.delay_srv;",
          "        delay_list_len = opt.delay_srv_cnt;",
          "    if ((opt.mtu != 0 &&",
          "         cur.len > (unsigned) opt.mtu) ||",
          "        (opt.drop != 0 &&",
          "         !(opt.protect_hvr &&",
          "         cur.len != (size_t) opt.protect_len &&",
          "         held[id] < HOLD_MAX &&",
          "         rand() % opt.drop == 0)) {",
          "        ++held[id];",
          "    } else if ((opt.delay_ccs == 1 &&",
          "               (opt.delay != 0 &&",
          "                !(opt.protect_hvr &&",
          "                cur.len != (size_t) opt.protect_len &&",
          "                held[id] < HOLD_MAX &&",
          "                rand() % opt.delay == 0)) {",
          "        ++held[id];"
        ]
      },
      "Suggestion": "Consider passing 'held' and 'opt' explicitly as arguments to the function 'handle_message' and use those arguments instead; use the 'restrict' keyword for 'held' and 'opt' to hint the compiler that they are free of aliasing",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR001"
    },
    {
      "Check": "PWR001",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/programs/test/benchmark.c:433:1",
      "Title": "Declare global variables as function parameters",
      "RelatedCodeList": {
        "Subtitle": "Usages",
        "Code": [
          "    mbedtls_timing_alarmed = 1;"
        ]
      },
      "Suggestion": "Consider passing 'mbedtls_timing_alarmed' explicitly as argument to the function 'sighandler' and use that argument instead; use the 'restrict' keyword for 'mbedtls_timing_alarmed' to hint the compiler that it is free of aliasing",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR001"
    },
    {
      "Check": "PWR001",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/programs/test/benchmark.c:439:1",
      "Title": "Declare global variables as function parameters",
      "RelatedCodeList": {
        "Subtitle": "Usages",
        "Code": [
          "    mbedtls_timing_alarmed = 0;",
          "        mbedtls_timing_alarmed = 1;"
        ]
      },
      "Suggestion": "Consider passing 'mbedtls_timing_alarmed' explicitly as argument to the function 'mbedtls_set_alarm' and use that argument instead; use the 'restrict' keyword for 'mbedtls_timing_alarmed' to hint the compiler that it is free of aliasing",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR001"
    },
    {
      "Check": "PWR001",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/programs/x509/cert_write.c:207:1",
      "Title": "Declare global variables as function parameters",
      "RelatedCodeList": {
        "Subtitle": "Usages",
        "Code": [
          "    if (opt.format == FORMAT_DER) {"
        ]
      },
      "Suggestion": "Consider passing 'opt' explicitly as argument to the function 'write_certificate' and use that argument instead; use the 'restrict' keyword for 'opt' to hint the compiler that it is free of aliasing",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR001"
    },
    {
      "Check": "PWR001",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/build/tests/test_suite_aes.cbc.c:1309:1",
      "Title": "Declare global variables as function parameters",
      "RelatedCodeList": {
        "Subtitle": "Usages",
        "Code": [
          "    if (func_idx < (int) (sizeof(test_funcs) / sizeof(TestWrapper_t))) {",
          "        fp = test_funcs[func_idx];"
        ]
      },
      "Suggestion": "Consider passing 'test_funcs' explicitly as argument to the function 'dispatch_test' and use that argument instead; use the 'restrict' keyword for 'test_funcs' to hint the compiler that it is free of aliasing",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR001"
    },
    {
      "Check": "PWR001",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/build/tests/test_suite_aes.cbc.c:1347:1",
      "Title": "Declare global variables as function parameters",
      "RelatedCodeList": {
        "Subtitle": "Usages",
        "Code": [
          "    if (func_idx < (int) (sizeof(test_funcs)/sizeof(TestWrapper_t))) {",
          "        fp = test_funcs[func_idx];"
        ]
      },
      "Suggestion": "Consider passing 'test_funcs' explicitly as argument to the function 'check_test' and use that argument instead; use the 'restrict' keyword for 'test_funcs' to hint the compiler that it is free of aliasing",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR001"
    },
    {
      "Check": "PWR001",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/build/tests/test_suite_aes.cbc.c:1689:1",
      "Title": "Declare global variables as function parameters",
      "RelatedCodeList": {
        "Subtitle": "Usages",
        "Code": [
          "    if (platform == NULL) {",
          "        platform = getenv(\"MBEDTLS_TEST_PLATFORM\");",
          "        if (platform == NULL) {",
          "            platform = \"unknown\";",
          "    if (configuration == NULL) {",
          "        configuration = getenv(\"MBEDTLS_TEST_CONFIGURATION\");",
          "        if (configuration == NULL) {",
          "            configuration = \"unknown\";",
          "    if (test_suite == NULL) {",
          "        test_suite = strrchr(argv0, '/');",
          "        if (test_suite != NULL) {",
          "            test_suite += 1; // skip the '/'",
          "            test_suite = argv0;",
          "                    platform, configuration, test_suite, test_case);"
        ]
      },
      "Suggestion": "Consider passing 'platform', 'configuration' and 'test_suite' explicitly as arguments to the function 'write_outcome_entry' and use those arguments instead; use the 'restrict' keyword for 'platform', 'configuration' and 'test_suite' to hint the compiler that they are free of aliasing if you can guarantee it",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR001"
    },
    {
      "Check": "PWR001",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/build/tests/test_suite_aes.cfb.c:1318:1",
      "Title": "Declare global variables as function parameters",
      "RelatedCodeList": {
        "Subtitle": "Usages",
        "Code": [
          "    if (func_idx < (int) (sizeof(test_funcs) / sizeof(TestWrapper_t))) {",
          "        fp = test_funcs[func_idx];"
        ]
      },
      "Suggestion": "Consider passing 'test_funcs' explicitly as argument to the function 'dispatch_test' and use that argument instead; use the 'restrict' keyword for 'test_funcs' to hint the compiler that it is free of aliasing",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR001"
    },
    {
      "Check": "PWR001",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/build/tests/test_suite_aes.cfb.c:1356:1",
      "Title": "Declare global variables as function parameters",
      "RelatedCodeList": {
        "Subtitle": "Usages",
        "Code": [
          "    if (func_idx < (int) (sizeof(test_funcs)/sizeof(TestWrapper_t))) {",
          "        fp = test_funcs[func_idx];"
        ]
      },
      "Suggestion": "Consider passing 'test_funcs' explicitly as argument to the function 'check_test' and use that argument instead; use the 'restrict' keyword for 'test_funcs' to hint the compiler that it is free of aliasing",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR001"
    },
    {
      "Check": "PWR001",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/build/tests/test_suite_aes.cfb.c:1698:1",
      "Title": "Declare global variables as function parameters",
      "RelatedCodeList": {
        "Subtitle": "Usages",
        "Code": [
          "    if (platform == NULL) {",
          "        platform = getenv(\"MBEDTLS_TEST_PLATFORM\");",
          "        if (platform == NULL) {",
          "            platform = \"unknown\";",
          "    if (configuration == NULL) {",
          "        configuration = getenv(\"MBEDTLS_TEST_CONFIGURATION\");",
          "        if (configuration == NULL) {",
          "            configuration = \"unknown\";",
          "    if (test_suite == NULL) {",
          "        test_suite = strrchr(argv0, '/');",
          "        if (test_suite != NULL) {",
          "            test_suite += 1; // skip the '/'",
          "            test_suite = argv0;",
          "                    platform, configuration, test_suite, test_case);"
        ]
      },
      "Suggestion": "Consider passing 'platform', 'configuration' and 'test_suite' explicitly as arguments to the function 'write_outcome_entry' and use those arguments instead; use the 'restrict' keyword for 'platform', 'configuration' and 'test_suite' to hint the compiler that they are free of aliasing if you can guarantee it",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR001"
    },
    {
      "Check": "PWR001",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/build/tests/test_suite_aes.ctr.c:1309:1",
      "Title": "Declare global variables as function parameters",
      "RelatedCodeList": {
        "Subtitle": "Usages",
        "Code": [
          "    if (func_idx < (int) (sizeof(test_funcs) / sizeof(TestWrapper_t))) {",
          "        fp = test_funcs[func_idx];"
        ]
      },
      "Suggestion": "Consider passing 'test_funcs' explicitly as argument to the function 'dispatch_test' and use that argument instead; use the 'restrict' keyword for 'test_funcs' to hint the compiler that it is free of aliasing",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR001"
    },
    {
      "Check": "PWR001",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/build/tests/test_suite_aes.ctr.c:1347:1",
      "Title": "Declare global variables as function parameters",
      "RelatedCodeList": {
        "Subtitle": "Usages",
        "Code": [
          "    if (func_idx < (int) (sizeof(test_funcs)/sizeof(TestWrapper_t))) {",
          "        fp = test_funcs[func_idx];"
        ]
      },
      "Suggestion": "Consider passing 'test_funcs' explicitly as argument to the function 'check_test' and use that argument instead; use the 'restrict' keyword for 'test_funcs' to hint the compiler that it is free of aliasing",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR001"
    },
    {
      "Check": "PWR001",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/build/tests/test_suite_aes.ctr.c:1689:1",
      "Title": "Declare global variables as function parameters",
      "RelatedCodeList": {
        "Subtitle": "Usages",
        "Code": [
          "    if (platform == NULL) {",
          "        platform = getenv(\"MBEDTLS_TEST_PLATFORM\");",
          "        if (platform == NULL) {",
          "            platform = \"unknown\";",
          "    if (configuration == NULL) {",
          "        configuration = getenv(\"MBEDTLS_TEST_CONFIGURATION\");",
          "        if (configuration == NULL) {",
          "            configuration = \"unknown\";",
          "    if (test_suite == NULL) {",
          "        test_suite = strrchr(argv0, '/');",
          "        if (test_suite != NULL) {",
          "            test_suite += 1; // skip the '/'",
          "            test_suite = argv0;",
          "                    platform, configuration, test_suite, test_case);"
        ]
      },
      "Suggestion": "Consider passing 'platform', 'configuration' and 'test_suite' explicitly as arguments to the function 'write_outcome_entry' and use those arguments instead; use the 'restrict' keyword for 'platform', 'configuration' and 'test_suite' to hint the compiler that they are free of aliasing if you can guarantee it",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR001"
    },
    {
      "Check": "PWR001",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/build/tests/test_suite_aes.ecb.c:1309:1",
      "Title": "Declare global variables as function parameters",
      "RelatedCodeList": {
        "Subtitle": "Usages",
        "Code": [
          "    if (func_idx < (int) (sizeof(test_funcs) / sizeof(TestWrapper_t))) {",
          "        fp = test_funcs[func_idx];"
        ]
      },
      "Suggestion": "Consider passing 'test_funcs' explicitly as argument to the function 'dispatch_test' and use that argument instead; use the 'restrict' keyword for 'test_funcs' to hint the compiler that it is free of aliasing",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR001"
    },
    {
      "Check": "PWR001",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/build/tests/test_suite_aes.ecb.c:1347:1",
      "Title": "Declare global variables as function parameters",
      "RelatedCodeList": {
        "Subtitle": "Usages",
        "Code": [
          "    if (func_idx < (int) (sizeof(test_funcs)/sizeof(TestWrapper_t))) {",
          "        fp = test_funcs[func_idx];"
        ]
      },
      "Suggestion": "Consider passing 'test_funcs' explicitly as argument to the function 'check_test' and use that argument instead; use the 'restrict' keyword for 'test_funcs' to hint the compiler that it is free of aliasing",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR001"
    },
    {
      "Check": "PWR001",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/build/tests/test_suite_aes.ecb.c:1689:1",
      "Title": "Declare global variables as function parameters",
      "RelatedCodeList": {
        "Subtitle": "Usages",
        "Code": [
          "    if (platform == NULL) {",
          "        platform = getenv(\"MBEDTLS_TEST_PLATFORM\");",
          "        if (platform == NULL) {",
          "            platform = \"unknown\";",
          "    if (configuration == NULL) {",
          "        configuration = getenv(\"MBEDTLS_TEST_CONFIGURATION\");",
          "        if (configuration == NULL) {",
          "            configuration = \"unknown\";",
          "    if (test_suite == NULL) {",
          "        test_suite = strrchr(argv0, '/');",
          "        if (test_suite != NULL) {",
          "            test_suite += 1; // skip the '/'",
          "            test_suite = argv0;",
          "                    platform, configuration, test_suite, test_case);"
        ]
      },
      "Suggestion": "Consider passing 'platform', 'configuration' and 'test_suite' explicitly as arguments to the function 'write_outcome_entry' and use those arguments instead; use the 'restrict' keyword for 'platform', 'configuration' and 'test_suite' to hint the compiler that they are free of aliasing if you can guarantee it",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR001"
    },
    {
      "Check": "PWR001",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/build/tests/test_suite_aes.ofb.c:1318:1",
      "Title": "Declare global variables as function parameters",
      "RelatedCodeList": {
        "Subtitle": "Usages",
        "Code": [
          "    if (func_idx < (int) (sizeof(test_funcs) / sizeof(TestWrapper_t))) {",
          "        fp = test_funcs[func_idx];"
        ]
      },
      "Suggestion": "Consider passing 'test_funcs' explicitly as argument to the function 'dispatch_test' and use that argument instead; use the 'restrict' keyword for 'test_funcs' to hint the compiler that it is free of aliasing",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR001"
    },
    {
      "Check": "PWR001",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/build/tests/test_suite_aes.ofb.c:1356:1",
      "Title": "Declare global variables as function parameters",
      "RelatedCodeList": {
        "Subtitle": "Usages",
        "Code": [
          "    if (func_idx < (int) (sizeof(test_funcs)/sizeof(TestWrapper_t))) {",
          "        fp = test_funcs[func_idx];"
        ]
      },
      "Suggestion": "Consider passing 'test_funcs' explicitly as argument to the function 'check_test' and use that argument instead; use the 'restrict' keyword for 'test_funcs' to hint the compiler that it is free of aliasing",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR001"
    },
    {
      "Check": "PWR001",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/build/tests/test_suite_aes.ofb.c:1698:1",
      "Title": "Declare global variables as function parameters",
      "RelatedCodeList": {
        "Subtitle": "Usages",
        "Code": [
          "    if (platform == NULL) {",
          "        platform = getenv(\"MBEDTLS_TEST_PLATFORM\");",
          "        if (platform == NULL) {",
          "            platform = \"unknown\";",
          "    if (configuration == NULL) {",
          "        configuration = getenv(\"MBEDTLS_TEST_CONFIGURATION\");",
          "        if (configuration == NULL) {",
          "            configuration = \"unknown\";",
          "    if (test_suite == NULL) {",
          "        test_suite = strrchr(argv0, '/');",
          "        if (test_suite != NULL) {",
          "            test_suite += 1; // skip the '/'",
          "            test_suite = argv0;",
          "                    platform, configuration, test_suite, test_case);"
        ]
      },
      "Suggestion": "Consider passing 'platform', 'configuration' and 'test_suite' explicitly as arguments to the function 'write_outcome_entry' and use those arguments instead; use the 'restrict' keyword for 'platform', 'configuration' and 'test_suite' to hint the compiler that they are free of aliasing if you can guarantee it",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR001"
    },
    {
      "Check": "PWR001",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/build/tests/test_suite_aes.rest.c:1328:1",
      "Title": "Declare global variables as function parameters",
      "RelatedCodeList": {
        "Subtitle": "Usages",
        "Code": [
          "    if (func_idx < (int) (sizeof(test_funcs) / sizeof(TestWrapper_t))) {",
          "        fp = test_funcs[func_idx];"
        ]
      },
      "Suggestion": "Consider passing 'test_funcs' explicitly as argument to the function 'dispatch_test' and use that argument instead; use the 'restrict' keyword for 'test_funcs' to hint the compiler that it is free of aliasing",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR001"
    },
    {
      "Check": "PWR001",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/build/tests/test_suite_aes.rest.c:1366:1",
      "Title": "Declare global variables as function parameters",
      "RelatedCodeList": {
        "Subtitle": "Usages",
        "Code": [
          "    if (func_idx < (int) (sizeof(test_funcs)/sizeof(TestWrapper_t))) {",
          "        fp = test_funcs[func_idx];"
        ]
      },
      "Suggestion": "Consider passing 'test_funcs' explicitly as argument to the function 'check_test' and use that argument instead; use the 'restrict' keyword for 'test_funcs' to hint the compiler that it is free of aliasing",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR001"
    },
    {
      "Check": "PWR001",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/build/tests/test_suite_aes.rest.c:1708:1",
      "Title": "Declare global variables as function parameters",
      "RelatedCodeList": {
        "Subtitle": "Usages",
        "Code": [
          "    if (platform == NULL) {",
          "        platform = getenv(\"MBEDTLS_TEST_PLATFORM\");",
          "        if (platform == NULL) {",
          "            platform = \"unknown\";",
          "    if (configuration == NULL) {",
          "        configuration = getenv(\"MBEDTLS_TEST_CONFIGURATION\");",
          "        if (configuration == NULL) {",
          "            configuration = \"unknown\";",
          "    if (test_suite == NULL) {",
          "        test_suite = strrchr(argv0, '/');",
          "        if (test_suite != NULL) {",
          "            test_suite += 1; // skip the '/'",
          "            test_suite = argv0;",
          "                    platform, configuration, test_suite, test_case);"
        ]
      },
      "Suggestion": "Consider passing 'platform', 'configuration' and 'test_suite' explicitly as arguments to the function 'write_outcome_entry' and use those arguments instead; use the 'restrict' keyword for 'platform', 'configuration' and 'test_suite' to hint the compiler that they are free of aliasing if you can guarantee it",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR001"
    },
    {
      "Check": "PWR001",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/build/tests/test_suite_aes.xts.c:1319:1",
      "Title": "Declare global variables as function parameters",
      "RelatedCodeList": {
        "Subtitle": "Usages",
        "Code": [
          "    if (func_idx < (int) (sizeof(test_funcs) / sizeof(TestWrapper_t))) {",
          "        fp = test_funcs[func_idx];"
        ]
      },
      "Suggestion": "Consider passing 'test_funcs' explicitly as argument to the function 'dispatch_test' and use that argument instead; use the 'restrict' keyword for 'test_funcs' to hint the compiler that it is free of aliasing",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR001"
    },
    {
      "Check": "PWR001",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/build/tests/test_suite_aes.xts.c:1357:1",
      "Title": "Declare global variables as function parameters",
      "RelatedCodeList": {
        "Subtitle": "Usages",
        "Code": [
          "    if (func_idx < (int) (sizeof(test_funcs)/sizeof(TestWrapper_t))) {",
          "        fp = test_funcs[func_idx];"
        ]
      },
      "Suggestion": "Consider passing 'test_funcs' explicitly as argument to the function 'check_test' and use that argument instead; use the 'restrict' keyword for 'test_funcs' to hint the compiler that it is free of aliasing",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR001"
    },
    {
      "Check": "PWR001",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/build/tests/test_suite_aes.xts.c:1699:1",
      "Title": "Declare global variables as function parameters",
      "RelatedCodeList": {
        "Subtitle": "Usages",
        "Code": [
          "    if (platform == NULL) {",
          "        platform = getenv(\"MBEDTLS_TEST_PLATFORM\");",
          "        if (platform == NULL) {",
          "            platform = \"unknown\";",
          "    if (configuration == NULL) {",
          "        configuration = getenv(\"MBEDTLS_TEST_CONFIGURATION\");",
          "        if (configuration == NULL) {",
          "            configuration = \"unknown\";",
          "    if (test_suite == NULL) {",
          "        test_suite = strrchr(argv0, '/');",
          "        if (test_suite != NULL) {",
          "            test_suite += 1; // skip the '/'",
          "            test_suite = argv0;",
          "                    platform, configuration, test_suite, test_case);"
        ]
      },
      "Suggestion": "Consider passing 'platform', 'configuration' and 'test_suite' explicitly as arguments to the function 'write_outcome_entry' and use those arguments instead; use the 'restrict' keyword for 'platform', 'configuration' and 'test_suite' to hint the compiler that they are free of aliasing if you can guarantee it",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR001"
    },
    {
      "Check": "PWR001",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/build/tests/test_suite_alignment.c:676:1",
      "Title": "Declare global variables as function parameters",
      "RelatedCodeList": {
        "Subtitle": "Usages",
        "Code": [
          "    if (func_idx < (int) (sizeof(test_funcs) / sizeof(TestWrapper_t))) {",
          "        fp = test_funcs[func_idx];"
        ]
      },
      "Suggestion": "Consider passing 'test_funcs' explicitly as argument to the function 'dispatch_test' and use that argument instead; use the 'restrict' keyword for 'test_funcs' to hint the compiler that it is free of aliasing",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR001"
    },
    {
      "Check": "PWR001",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/build/tests/test_suite_alignment.c:714:1",
      "Title": "Declare global variables as function parameters",
      "RelatedCodeList": {
        "Subtitle": "Usages",
        "Code": [
          "    if (func_idx < (int) (sizeof(test_funcs)/sizeof(TestWrapper_t))) {",
          "        fp = test_funcs[func_idx];"
        ]
      },
      "Suggestion": "Consider passing 'test_funcs' explicitly as argument to the function 'check_test' and use that argument instead; use the 'restrict' keyword for 'test_funcs' to hint the compiler that it is free of aliasing",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR001"
    },
    {
      "Check": "PWR001",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/build/tests/test_suite_alignment.c:1056:1",
      "Title": "Declare global variables as function parameters",
      "RelatedCodeList": {
        "Subtitle": "Usages",
        "Code": [
          "    if (platform == NULL) {",
          "        platform = getenv(\"MBEDTLS_TEST_PLATFORM\");",
          "        if (platform == NULL) {",
          "            platform = \"unknown\";",
          "    if (configuration == NULL) {",
          "        configuration = getenv(\"MBEDTLS_TEST_CONFIGURATION\");",
          "        if (configuration == NULL) {",
          "            configuration = \"unknown\";",
          "    if (test_suite == NULL) {",
          "        test_suite = strrchr(argv0, '/');",
          "        if (test_suite != NULL) {",
          "            test_suite += 1; // skip the '/'",
          "            test_suite = argv0;",
          "                    platform, configuration, test_suite, test_case);"
        ]
      },
      "Suggestion": "Consider passing 'platform', 'configuration' and 'test_suite' explicitly as arguments to the function 'write_outcome_entry' and use those arguments instead; use the 'restrict' keyword for 'platform', 'configuration' and 'test_suite' to hint the compiler that they are free of aliasing if you can guarantee it",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR001"
    },
    {
      "Check": "PWR001",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/build/tests/test_suite_aria.c:712:1",
      "Title": "Declare global variables as function parameters",
      "RelatedCodeList": {
        "Subtitle": "Usages",
        "Code": [
          "    if (func_idx < (int) (sizeof(test_funcs) / sizeof(TestWrapper_t))) {",
          "        fp = test_funcs[func_idx];"
        ]
      },
      "Suggestion": "Consider passing 'test_funcs' explicitly as argument to the function 'dispatch_test' and use that argument instead; use the 'restrict' keyword for 'test_funcs' to hint the compiler that it is free of aliasing",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR001"
    },
    {
      "Check": "PWR001",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/build/tests/test_suite_aria.c:750:1",
      "Title": "Declare global variables as function parameters",
      "RelatedCodeList": {
        "Subtitle": "Usages",
        "Code": [
          "    if (func_idx < (int) (sizeof(test_funcs)/sizeof(TestWrapper_t))) {",
          "        fp = test_funcs[func_idx];"
        ]
      },
      "Suggestion": "Consider passing 'test_funcs' explicitly as argument to the function 'check_test' and use that argument instead; use the 'restrict' keyword for 'test_funcs' to hint the compiler that it is free of aliasing",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR001"
    },
    {
      "Check": "PWR001",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/build/tests/test_suite_aria.c:1092:1",
      "Title": "Declare global variables as function parameters",
      "RelatedCodeList": {
        "Subtitle": "Usages",
        "Code": [
          "    if (platform == NULL) {",
          "        platform = getenv(\"MBEDTLS_TEST_PLATFORM\");",
          "        if (platform == NULL) {",
          "            platform = \"unknown\";",
          "    if (configuration == NULL) {",
          "        configuration = getenv(\"MBEDTLS_TEST_CONFIGURATION\");",
          "        if (configuration == NULL) {",
          "            configuration = \"unknown\";",
          "    if (test_suite == NULL) {",
          "        test_suite = strrchr(argv0, '/');",
          "        if (test_suite != NULL) {",
          "            test_suite += 1; // skip the '/'",
          "            test_suite = argv0;",
          "                    platform, configuration, test_suite, test_case);"
        ]
      },
      "Suggestion": "Consider passing 'platform', 'configuration' and 'test_suite' explicitly as arguments to the function 'write_outcome_entry' and use those arguments instead; use the 'restrict' keyword for 'platform', 'configuration' and 'test_suite' to hint the compiler that they are free of aliasing if you can guarantee it",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR001"
    },
    {
      "Check": "PWR001",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/build/tests/test_suite_asn1parse.c:1300:1",
      "Title": "Declare global variables as function parameters",
      "RelatedCodeList": {
        "Subtitle": "Usages",
        "Code": [
          "    if (func_idx < (int) (sizeof(test_funcs) / sizeof(TestWrapper_t))) {",
          "        fp = test_funcs[func_idx];"
        ]
      },
      "Suggestion": "Consider passing 'test_funcs' explicitly as argument to the function 'dispatch_test' and use that argument instead; use the 'restrict' keyword for 'test_funcs' to hint the compiler that it is free of aliasing",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR001"
    },
    {
      "Check": "PWR001",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/build/tests/test_suite_asn1parse.c:1338:1",
      "Title": "Declare global variables as function parameters",
      "RelatedCodeList": {
        "Subtitle": "Usages",
        "Code": [
          "    if (func_idx < (int) (sizeof(test_funcs)/sizeof(TestWrapper_t))) {",
          "        fp = test_funcs[func_idx];"
        ]
      },
      "Suggestion": "Consider passing 'test_funcs' explicitly as argument to the function 'check_test' and use that argument instead; use the 'restrict' keyword for 'test_funcs' to hint the compiler that it is free of aliasing",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR001"
    },
    {
      "Check": "PWR001",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/build/tests/test_suite_asn1parse.c:1680:1",
      "Title": "Declare global variables as function parameters",
      "RelatedCodeList": {
        "Subtitle": "Usages",
        "Code": [
          "    if (platform == NULL) {",
          "        platform = getenv(\"MBEDTLS_TEST_PLATFORM\");",
          "        if (platform == NULL) {",
          "            platform = \"unknown\";",
          "    if (configuration == NULL) {",
          "        configuration = getenv(\"MBEDTLS_TEST_CONFIGURATION\");",
          "        if (configuration == NULL) {",
          "            configuration = \"unknown\";",
          "    if (test_suite == NULL) {",
          "        test_suite = strrchr(argv0, '/');",
          "        if (test_suite != NULL) {",
          "            test_suite += 1; // skip the '/'",
          "            test_suite = argv0;",
          "                    platform, configuration, test_suite, test_case);"
        ]
      },
      "Suggestion": "Consider passing 'platform', 'configuration' and 'test_suite' explicitly as arguments to the function 'write_outcome_entry' and use those arguments instead; use the 'restrict' keyword for 'platform', 'configuration' and 'test_suite' to hint the compiler that they are free of aliasing if you can guarantee it",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR001"
    },
    {
      "Check": "PWR001",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/build/tests/test_suite_asn1write.c:1065:1",
      "Title": "Declare global variables as function parameters",
      "RelatedCodeList": {
        "Subtitle": "Usages",
        "Code": [
          "    if (func_idx < (int) (sizeof(test_funcs) / sizeof(TestWrapper_t))) {",
          "        fp = test_funcs[func_idx];"
        ]
      },
      "Suggestion": "Consider passing 'test_funcs' explicitly as argument to the function 'dispatch_test' and use that argument instead; use the 'restrict' keyword for 'test_funcs' to hint the compiler that it is free of aliasing",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR001"
    },
    {
      "Check": "PWR001",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/build/tests/test_suite_asn1write.c:1103:1",
      "Title": "Declare global variables as function parameters",
      "RelatedCodeList": {
        "Subtitle": "Usages",
        "Code": [
          "    if (func_idx < (int) (sizeof(test_funcs)/sizeof(TestWrapper_t))) {",
          "        fp = test_funcs[func_idx];"
        ]
      },
      "Suggestion": "Consider passing 'test_funcs' explicitly as argument to the function 'check_test' and use that argument instead; use the 'restrict' keyword for 'test_funcs' to hint the compiler that it is free of aliasing",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR001"
    },
    {
      "Check": "PWR001",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/build/tests/test_suite_asn1write.c:1445:1",
      "Title": "Declare global variables as function parameters",
      "RelatedCodeList": {
        "Subtitle": "Usages",
        "Code": [
          "    if (platform == NULL) {",
          "        platform = getenv(\"MBEDTLS_TEST_PLATFORM\");",
          "        if (platform == NULL) {",
          "            platform = \"unknown\";",
          "    if (configuration == NULL) {",
          "        configuration = getenv(\"MBEDTLS_TEST_CONFIGURATION\");",
          "        if (configuration == NULL) {",
          "            configuration = \"unknown\";",
          "    if (test_suite == NULL) {",
          "        test_suite = strrchr(argv0, '/');",
          "        if (test_suite != NULL) {",
          "            test_suite += 1; // skip the '/'",
          "            test_suite = argv0;",
          "                    platform, configuration, test_suite, test_case);"
        ]
      },
      "Suggestion": "Consider passing 'platform', 'configuration' and 'test_suite' explicitly as arguments to the function 'write_outcome_entry' and use those arguments instead; use the 'restrict' keyword for 'platform', 'configuration' and 'test_suite' to hint the compiler that they are free of aliasing if you can guarantee it",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR001"
    },
    {
      "Check": "PWR001",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/build/tests/test_suite_base64.c:578:1",
      "Title": "Declare global variables as function parameters",
      "RelatedCodeList": {
        "Subtitle": "Usages",
        "Code": [
          "    if (func_idx < (int) (sizeof(test_funcs) / sizeof(TestWrapper_t))) {",
          "        fp = test_funcs[func_idx];"
        ]
      },
      "Suggestion": "Consider passing 'test_funcs' explicitly as argument to the function 'dispatch_test' and use that argument instead; use the 'restrict' keyword for 'test_funcs' to hint the compiler that it is free of aliasing",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR001"
    },
    {
      "Check": "PWR001",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/build/tests/test_suite_base64.c:616:1",
      "Title": "Declare global variables as function parameters",
      "RelatedCodeList": {
        "Subtitle": "Usages",
        "Code": [
          "    if (func_idx < (int) (sizeof(test_funcs)/sizeof(TestWrapper_t))) {",
          "        fp = test_funcs[func_idx];"
        ]
      },
      "Suggestion": "Consider passing 'test_funcs' explicitly as argument to the function 'check_test' and use that argument instead; use the 'restrict' keyword for 'test_funcs' to hint the compiler that it is free of aliasing",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR001"
    },
    {
      "Check": "PWR001",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/build/tests/test_suite_base64.c:958:1",
      "Title": "Declare global variables as function parameters",
      "RelatedCodeList": {
        "Subtitle": "Usages",
        "Code": [
          "    if (platform == NULL) {",
          "        platform = getenv(\"MBEDTLS_TEST_PLATFORM\");",
          "        if (platform == NULL) {",
          "            platform = \"unknown\";",
          "    if (configuration == NULL) {",
          "        configuration = getenv(\"MBEDTLS_TEST_CONFIGURATION\");",
          "        if (configuration == NULL) {",
          "            configuration = \"unknown\";",
          "    if (test_suite == NULL) {",
          "        test_suite = strrchr(argv0, '/');",
          "        if (test_suite != NULL) {",
          "            test_suite += 1; // skip the '/'",
          "            test_suite = argv0;",
          "                    platform, configuration, test_suite, test_case);"
        ]
      },
      "Suggestion": "Consider passing 'platform', 'configuration' and 'test_suite' explicitly as arguments to the function 'write_outcome_entry' and use those arguments instead; use the 'restrict' keyword for 'platform', 'configuration' and 'test_suite' to hint the compiler that they are free of aliasing if you can guarantee it",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR001"
    },
    {
      "Check": "PWR001",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/build/tests/test_suite_bignum.generated.c:2196:1",
      "Title": "Declare global variables as function parameters",
      "RelatedCodeList": {
        "Subtitle": "Usages",
        "Code": [
          "    if (func_idx < (int) (sizeof(test_funcs) / sizeof(TestWrapper_t))) {",
          "        fp = test_funcs[func_idx];"
        ]
      },
      "Suggestion": "Consider passing 'test_funcs' explicitly as argument to the function 'dispatch_test' and use that argument instead; use the 'restrict' keyword for 'test_funcs' to hint the compiler that it is free of aliasing",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR001"
    },
    {
      "Check": "PWR001",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/build/tests/test_suite_bignum.generated.c:2234:1",
      "Title": "Declare global variables as function parameters",
      "RelatedCodeList": {
        "Subtitle": "Usages",
        "Code": [
          "    if (func_idx < (int) (sizeof(test_funcs)/sizeof(TestWrapper_t))) {",
          "        fp = test_funcs[func_idx];"
        ]
      },
      "Suggestion": "Consider passing 'test_funcs' explicitly as argument to the function 'check_test' and use that argument instead; use the 'restrict' keyword for 'test_funcs' to hint the compiler that it is free of aliasing",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR001"
    },
    {
      "Check": "PWR001",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/build/tests/test_suite_bignum.generated.c:2576:1",
      "Title": "Declare global variables as function parameters",
      "RelatedCodeList": {
        "Subtitle": "Usages",
        "Code": [
          "    if (platform == NULL) {",
          "        platform = getenv(\"MBEDTLS_TEST_PLATFORM\");",
          "        if (platform == NULL) {",
          "            platform = \"unknown\";",
          "    if (configuration == NULL) {",
          "        configuration = getenv(\"MBEDTLS_TEST_CONFIGURATION\");",
          "        if (configuration == NULL) {",
          "            configuration = \"unknown\";",
          "    if (test_suite == NULL) {",
          "        test_suite = strrchr(argv0, '/');",
          "        if (test_suite != NULL) {",
          "            test_suite += 1; // skip the '/'",
          "            test_suite = argv0;",
          "                    platform, configuration, test_suite, test_case);"
        ]
      },
      "Suggestion": "Consider passing 'platform', 'configuration' and 'test_suite' explicitly as arguments to the function 'write_outcome_entry' and use those arguments instead; use the 'restrict' keyword for 'platform', 'configuration' and 'test_suite' to hint the compiler that they are free of aliasing if you can guarantee it",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR001"
    },
    {
      "Check": "PWR001",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/build/tests/test_suite_bignum.misc.c:2307:1",
      "Title": "Declare global variables as function parameters",
      "RelatedCodeList": {
        "Subtitle": "Usages",
        "Code": [
          "    if (func_idx < (int) (sizeof(test_funcs) / sizeof(TestWrapper_t))) {",
          "        fp = test_funcs[func_idx];"
        ]
      },
      "Suggestion": "Consider passing 'test_funcs' explicitly as argument to the function 'dispatch_test' and use that argument instead; use the 'restrict' keyword for 'test_funcs' to hint the compiler that it is free of aliasing",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR001"
    },
    {
      "Check": "PWR001",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/build/tests/test_suite_bignum.misc.c:2345:1",
      "Title": "Declare global variables as function parameters",
      "RelatedCodeList": {
        "Subtitle": "Usages",
        "Code": [
          "    if (func_idx < (int) (sizeof(test_funcs)/sizeof(TestWrapper_t))) {",
          "        fp = test_funcs[func_idx];"
        ]
      },
      "Suggestion": "Consider passing 'test_funcs' explicitly as argument to the function 'check_test' and use that argument instead; use the 'restrict' keyword for 'test_funcs' to hint the compiler that it is free of aliasing",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR001"
    },
    {
      "Check": "PWR001",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/build/tests/test_suite_bignum.misc.c:2687:1",
      "Title": "Declare global variables as function parameters",
      "RelatedCodeList": {
        "Subtitle": "Usages",
        "Code": [
          "    if (platform == NULL) {",
          "        platform = getenv(\"MBEDTLS_TEST_PLATFORM\");",
          "        if (platform == NULL) {",
          "            platform = \"unknown\";",
          "    if (configuration == NULL) {",
          "        configuration = getenv(\"MBEDTLS_TEST_CONFIGURATION\");",
          "        if (configuration == NULL) {",
          "            configuration = \"unknown\";",
          "    if (test_suite == NULL) {",
          "        test_suite = strrchr(argv0, '/');",
          "        if (test_suite != NULL) {",
          "            test_suite += 1; // skip the '/'",
          "            test_suite = argv0;",
          "                    platform, configuration, test_suite, test_case);"
        ]
      },
      "Suggestion": "Consider passing 'platform', 'configuration' and 'test_suite' explicitly as arguments to the function 'write_outcome_entry' and use those arguments instead; use the 'restrict' keyword for 'platform', 'configuration' and 'test_suite' to hint the compiler that they are free of aliasing if you can guarantee it",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR001"
    },
    {
      "Check": "PWR001",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/build/tests/test_suite_bignum_core.generated.c:1878:1",
      "Title": "Declare global variables as function parameters",
      "RelatedCodeList": {
        "Subtitle": "Usages",
        "Code": [
          "    if (func_idx < (int) (sizeof(test_funcs) / sizeof(TestWrapper_t))) {",
          "        fp = test_funcs[func_idx];"
        ]
      },
      "Suggestion": "Consider passing 'test_funcs' explicitly as argument to the function 'dispatch_test' and use that argument instead; use the 'restrict' keyword for 'test_funcs' to hint the compiler that it is free of aliasing",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR001"
    },
    {
      "Check": "PWR001",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/build/tests/test_suite_bignum_core.generated.c:1916:1",
      "Title": "Declare global variables as function parameters",
      "RelatedCodeList": {
        "Subtitle": "Usages",
        "Code": [
          "    if (func_idx < (int) (sizeof(test_funcs)/sizeof(TestWrapper_t))) {",
          "        fp = test_funcs[func_idx];"
        ]
      },
      "Suggestion": "Consider passing 'test_funcs' explicitly as argument to the function 'check_test' and use that argument instead; use the 'restrict' keyword for 'test_funcs' to hint the compiler that it is free of aliasing",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR001"
    },
    {
      "Check": "PWR001",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/build/tests/test_suite_bignum_core.generated.c:2258:1",
      "Title": "Declare global variables as function parameters",
      "RelatedCodeList": {
        "Subtitle": "Usages",
        "Code": [
          "    if (platform == NULL) {",
          "        platform = getenv(\"MBEDTLS_TEST_PLATFORM\");",
          "        if (platform == NULL) {",
          "            platform = \"unknown\";",
          "    if (configuration == NULL) {",
          "        configuration = getenv(\"MBEDTLS_TEST_CONFIGURATION\");",
          "        if (configuration == NULL) {",
          "            configuration = \"unknown\";",
          "    if (test_suite == NULL) {",
          "        test_suite = strrchr(argv0, '/');",
          "        if (test_suite != NULL) {",
          "            test_suite += 1; // skip the '/'",
          "            test_suite = argv0;",
          "                    platform, configuration, test_suite, test_case);"
        ]
      },
      "Suggestion": "Consider passing 'platform', 'configuration' and 'test_suite' explicitly as arguments to the function 'write_outcome_entry' and use those arguments instead; use the 'restrict' keyword for 'platform', 'configuration' and 'test_suite' to hint the compiler that they are free of aliasing if you can guarantee it",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR001"
    },
    {
      "Check": "PWR001",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/build/tests/test_suite_bignum_core.misc.c:1893:1",
      "Title": "Declare global variables as function parameters",
      "RelatedCodeList": {
        "Subtitle": "Usages",
        "Code": [
          "    if (func_idx < (int) (sizeof(test_funcs) / sizeof(TestWrapper_t))) {",
          "        fp = test_funcs[func_idx];"
        ]
      },
      "Suggestion": "Consider passing 'test_funcs' explicitly as argument to the function 'dispatch_test' and use that argument instead; use the 'restrict' keyword for 'test_funcs' to hint the compiler that it is free of aliasing",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR001"
    },
    {
      "Check": "PWR001",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/build/tests/test_suite_bignum_core.misc.c:1931:1",
      "Title": "Declare global variables as function parameters",
      "RelatedCodeList": {
        "Subtitle": "Usages",
        "Code": [
          "    if (func_idx < (int) (sizeof(test_funcs)/sizeof(TestWrapper_t))) {",
          "        fp = test_funcs[func_idx];"
        ]
      },
      "Suggestion": "Consider passing 'test_funcs' explicitly as argument to the function 'check_test' and use that argument instead; use the 'restrict' keyword for 'test_funcs' to hint the compiler that it is free of aliasing",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR001"
    },
    {
      "Check": "PWR001",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/build/tests/test_suite_bignum_core.misc.c:2273:1",
      "Title": "Declare global variables as function parameters",
      "RelatedCodeList": {
        "Subtitle": "Usages",
        "Code": [
          "    if (platform == NULL) {",
          "        platform = getenv(\"MBEDTLS_TEST_PLATFORM\");",
          "        if (platform == NULL) {",
          "            platform = \"unknown\";",
          "    if (configuration == NULL) {",
          "        configuration = getenv(\"MBEDTLS_TEST_CONFIGURATION\");",
          "        if (configuration == NULL) {",
          "            configuration = \"unknown\";",
          "    if (test_suite == NULL) {",
          "        test_suite = strrchr(argv0, '/');",
          "        if (test_suite != NULL) {",
          "            test_suite += 1; // skip the '/'",
          "            test_suite = argv0;",
          "                    platform, configuration, test_suite, test_case);"
        ]
      },
      "Suggestion": "Consider passing 'platform', 'configuration' and 'test_suite' explicitly as arguments to the function 'write_outcome_entry' and use those arguments instead; use the 'restrict' keyword for 'platform', 'configuration' and 'test_suite' to hint the compiler that they are free of aliasing if you can guarantee it",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR001"
    },
    {
      "Check": "PWR001",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/build/tests/test_suite_bignum_mod.generated.c:1148:1",
      "Title": "Declare global variables as function parameters",
      "RelatedCodeList": {
        "Subtitle": "Usages",
        "Code": [
          "    if (func_idx < (int) (sizeof(test_funcs) / sizeof(TestWrapper_t))) {",
          "        fp = test_funcs[func_idx];"
        ]
      },
      "Suggestion": "Consider passing 'test_funcs' explicitly as argument to the function 'dispatch_test' and use that argument instead; use the 'restrict' keyword for 'test_funcs' to hint the compiler that it is free of aliasing",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR001"
    },
    {
      "Check": "PWR001",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/build/tests/test_suite_bignum_mod.generated.c:1186:1",
      "Title": "Declare global variables as function parameters",
      "RelatedCodeList": {
        "Subtitle": "Usages",
        "Code": [
          "    if (func_idx < (int) (sizeof(test_funcs)/sizeof(TestWrapper_t))) {",
          "        fp = test_funcs[func_idx];"
        ]
      },
      "Suggestion": "Consider passing 'test_funcs' explicitly as argument to the function 'check_test' and use that argument instead; use the 'restrict' keyword for 'test_funcs' to hint the compiler that it is free of aliasing",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR001"
    },
    {
      "Check": "PWR001",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/build/tests/test_suite_bignum_mod.generated.c:1528:1",
      "Title": "Declare global variables as function parameters",
      "RelatedCodeList": {
        "Subtitle": "Usages",
        "Code": [
          "    if (platform == NULL) {",
          "        platform = getenv(\"MBEDTLS_TEST_PLATFORM\");",
          "        if (platform == NULL) {",
          "            platform = \"unknown\";",
          "    if (configuration == NULL) {",
          "        configuration = getenv(\"MBEDTLS_TEST_CONFIGURATION\");",
          "        if (configuration == NULL) {",
          "            configuration = \"unknown\";",
          "    if (test_suite == NULL) {",
          "        test_suite = strrchr(argv0, '/');",
          "        if (test_suite != NULL) {",
          "            test_suite += 1; // skip the '/'",
          "            test_suite = argv0;",
          "                    platform, configuration, test_suite, test_case);"
        ]
      },
      "Suggestion": "Consider passing 'platform', 'configuration' and 'test_suite' explicitly as arguments to the function 'write_outcome_entry' and use those arguments instead; use the 'restrict' keyword for 'platform', 'configuration' and 'test_suite' to hint the compiler that they are free of aliasing if you can guarantee it",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR001"
    },
    {
      "Check": "PWR001",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/build/tests/test_suite_bignum_mod.misc.c:1183:1",
      "Title": "Declare global variables as function parameters",
      "RelatedCodeList": {
        "Subtitle": "Usages",
        "Code": [
          "    if (func_idx < (int) (sizeof(test_funcs) / sizeof(TestWrapper_t))) {",
          "        fp = test_funcs[func_idx];"
        ]
      },
      "Suggestion": "Consider passing 'test_funcs' explicitly as argument to the function 'dispatch_test' and use that argument instead; use the 'restrict' keyword for 'test_funcs' to hint the compiler that it is free of aliasing",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR001"
    },
    {
      "Check": "PWR001",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/build/tests/test_suite_bignum_mod.misc.c:1221:1",
      "Title": "Declare global variables as function parameters",
      "RelatedCodeList": {
        "Subtitle": "Usages",
        "Code": [
          "    if (func_idx < (int) (sizeof(test_funcs)/sizeof(TestWrapper_t))) {",
          "        fp = test_funcs[func_idx];"
        ]
      },
      "Suggestion": "Consider passing 'test_funcs' explicitly as argument to the function 'check_test' and use that argument instead; use the 'restrict' keyword for 'test_funcs' to hint the compiler that it is free of aliasing",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR001"
    },
    {
      "Check": "PWR001",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/build/tests/test_suite_bignum_mod.misc.c:1563:1",
      "Title": "Declare global variables as function parameters",
      "RelatedCodeList": {
        "Subtitle": "Usages",
        "Code": [
          "    if (platform == NULL) {",
          "        platform = getenv(\"MBEDTLS_TEST_PLATFORM\");",
          "        if (platform == NULL) {",
          "            platform = \"unknown\";",
          "    if (configuration == NULL) {",
          "        configuration = getenv(\"MBEDTLS_TEST_CONFIGURATION\");",
          "        if (configuration == NULL) {",
          "            configuration = \"unknown\";",
          "    if (test_suite == NULL) {",
          "        test_suite = strrchr(argv0, '/');",
          "        if (test_suite != NULL) {",
          "            test_suite += 1; // skip the '/'",
          "            test_suite = argv0;",
          "                    platform, configuration, test_suite, test_case);"
        ]
      },
      "Suggestion": "Consider passing 'platform', 'configuration' and 'test_suite' explicitly as arguments to the function 'write_outcome_entry' and use those arguments instead; use the 'restrict' keyword for 'platform', 'configuration' and 'test_suite' to hint the compiler that they are free of aliasing if you can guarantee it",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR001"
    },
    {
      "Check": "PWR001",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/build/tests/test_suite_bignum_mod_raw.c:1330:1",
      "Title": "Declare global variables as function parameters",
      "RelatedCodeList": {
        "Subtitle": "Usages",
        "Code": [
          "    if (func_idx < (int) (sizeof(test_funcs) / sizeof(TestWrapper_t))) {",
          "        fp = test_funcs[func_idx];"
        ]
      },
      "Suggestion": "Consider passing 'test_funcs' explicitly as argument to the function 'dispatch_test' and use that argument instead; use the 'restrict' keyword for 'test_funcs' to hint the compiler that it is free of aliasing",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR001"
    },
    {
      "Check": "PWR001",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/build/tests/test_suite_bignum_mod_raw.c:1368:1",
      "Title": "Declare global variables as function parameters",
      "RelatedCodeList": {
        "Subtitle": "Usages",
        "Code": [
          "    if (func_idx < (int) (sizeof(test_funcs)/sizeof(TestWrapper_t))) {",
          "        fp = test_funcs[func_idx];"
        ]
      },
      "Suggestion": "Consider passing 'test_funcs' explicitly as argument to the function 'check_test' and use that argument instead; use the 'restrict' keyword for 'test_funcs' to hint the compiler that it is free of aliasing",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR001"
    },
    {
      "Check": "PWR001",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/build/tests/test_suite_bignum_mod_raw.c:1710:1",
      "Title": "Declare global variables as function parameters",
      "RelatedCodeList": {
        "Subtitle": "Usages",
        "Code": [
          "    if (platform == NULL) {",
          "        platform = getenv(\"MBEDTLS_TEST_PLATFORM\");",
          "        if (platform == NULL) {",
          "            platform = \"unknown\";",
          "    if (configuration == NULL) {",
          "        configuration = getenv(\"MBEDTLS_TEST_CONFIGURATION\");",
          "        if (configuration == NULL) {",
          "            configuration = \"unknown\";",
          "    if (test_suite == NULL) {",
          "        test_suite = strrchr(argv0, '/');",
          "        if (test_suite != NULL) {",
          "            test_suite += 1; // skip the '/'",
          "            test_suite = argv0;",
          "                    platform, configuration, test_suite, test_case);"
        ]
      },
      "Suggestion": "Consider passing 'platform', 'configuration' and 'test_suite' explicitly as arguments to the function 'write_outcome_entry' and use those arguments instead; use the 'restrict' keyword for 'platform', 'configuration' and 'test_suite' to hint the compiler that they are free of aliasing if you can guarantee it",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR001"
    },
    {
      "Check": "PWR001",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/build/tests/test_suite_bignum_mod_raw.generated.c:1315:1",
      "Title": "Declare global variables as function parameters",
      "RelatedCodeList": {
        "Subtitle": "Usages",
        "Code": [
          "    if (func_idx < (int) (sizeof(test_funcs) / sizeof(TestWrapper_t))) {",
          "        fp = test_funcs[func_idx];"
        ]
      },
      "Suggestion": "Consider passing 'test_funcs' explicitly as argument to the function 'dispatch_test' and use that argument instead; use the 'restrict' keyword for 'test_funcs' to hint the compiler that it is free of aliasing",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR001"
    },
    {
      "Check": "PWR001",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/build/tests/test_suite_bignum_mod_raw.generated.c:1353:1",
      "Title": "Declare global variables as function parameters",
      "RelatedCodeList": {
        "Subtitle": "Usages",
        "Code": [
          "    if (func_idx < (int) (sizeof(test_funcs)/sizeof(TestWrapper_t))) {",
          "        fp = test_funcs[func_idx];"
        ]
      },
      "Suggestion": "Consider passing 'test_funcs' explicitly as argument to the function 'check_test' and use that argument instead; use the 'restrict' keyword for 'test_funcs' to hint the compiler that it is free of aliasing",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR001"
    },
    {
      "Check": "PWR001",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/build/tests/test_suite_bignum_mod_raw.generated.c:1695:1",
      "Title": "Declare global variables as function parameters",
      "RelatedCodeList": {
        "Subtitle": "Usages",
        "Code": [
          "    if (platform == NULL) {",
          "        platform = getenv(\"MBEDTLS_TEST_PLATFORM\");",
          "        if (platform == NULL) {",
          "            platform = \"unknown\";",
          "    if (configuration == NULL) {",
          "        configuration = getenv(\"MBEDTLS_TEST_CONFIGURATION\");",
          "        if (configuration == NULL) {",
          "            configuration = \"unknown\";",
          "    if (test_suite == NULL) {",
          "        test_suite = strrchr(argv0, '/');",
          "        if (test_suite != NULL) {",
          "            test_suite += 1; // skip the '/'",
          "            test_suite = argv0;",
          "                    platform, configuration, test_suite, test_case);"
        ]
      },
      "Suggestion": "Consider passing 'platform', 'configuration' and 'test_suite' explicitly as arguments to the function 'write_outcome_entry' and use those arguments instead; use the 'restrict' keyword for 'platform', 'configuration' and 'test_suite' to hint the compiler that they are free of aliasing if you can guarantee it",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR001"
    },
    {
      "Check": "PWR001",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/build/tests/test_suite_bignum_random.c:272:1",
      "Title": "Declare global variables as function parameters",
      "RelatedCodeList": {
        "Subtitle": "Usages",
        "Code": [
          "    mbedtls_test_rnd_pseudo_info rnd = rnd_pseudo_seed;"
        ]
      },
      "Suggestion": "Consider passing 'rnd_pseudo_seed' explicitly as argument to the function 'test_mpi_core_random_basic' and use that argument instead; use the 'restrict' keyword for 'rnd_pseudo_seed' to hint the compiler that it is free of aliasing",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR001"
    },
    {
      "Check": "PWR001",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/build/tests/test_suite_bignum_random.c:308:1",
      "Title": "Declare global variables as function parameters",
      "RelatedCodeList": {
        "Subtitle": "Usages",
        "Code": [
          "    mbedtls_test_rnd_pseudo_info rnd_core = rnd_pseudo_seed;"
        ]
      },
      "Suggestion": "Consider passing 'rnd_pseudo_seed' explicitly as argument to the function 'test_mpi_legacy_random_values' and use that argument instead; use the 'restrict' keyword for 'rnd_pseudo_seed' to hint the compiler that it is free of aliasing",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR001"
    },
    {
      "Check": "PWR001",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/build/tests/test_suite_bignum_random.c:856:1",
      "Title": "Declare global variables as function parameters",
      "RelatedCodeList": {
        "Subtitle": "Usages",
        "Code": [
          "    if (func_idx < (int) (sizeof(test_funcs) / sizeof(TestWrapper_t))) {",
          "        fp = test_funcs[func_idx];"
        ]
      },
      "Suggestion": "Consider passing 'test_funcs' explicitly as argument to the function 'dispatch_test' and use that argument instead; use the 'restrict' keyword for 'test_funcs' to hint the compiler that it is free of aliasing",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR001"
    },
    {
      "Check": "PWR001",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/build/tests/test_suite_bignum_random.c:894:1",
      "Title": "Declare global variables as function parameters",
      "RelatedCodeList": {
        "Subtitle": "Usages",
        "Code": [
          "    if (func_idx < (int) (sizeof(test_funcs)/sizeof(TestWrapper_t))) {",
          "        fp = test_funcs[func_idx];"
        ]
      },
      "Suggestion": "Consider passing 'test_funcs' explicitly as argument to the function 'check_test' and use that argument instead; use the 'restrict' keyword for 'test_funcs' to hint the compiler that it is free of aliasing",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR001"
    },
    {
      "Check": "PWR001",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/build/tests/test_suite_bignum_random.c:1236:1",
      "Title": "Declare global variables as function parameters",
      "RelatedCodeList": {
        "Subtitle": "Usages",
        "Code": [
          "    if (platform == NULL) {",
          "        platform = getenv(\"MBEDTLS_TEST_PLATFORM\");",
          "        if (platform == NULL) {",
          "            platform = \"unknown\";",
          "    if (configuration == NULL) {",
          "        configuration = getenv(\"MBEDTLS_TEST_CONFIGURATION\");",
          "        if (configuration == NULL) {",
          "            configuration = \"unknown\";",
          "    if (test_suite == NULL) {",
          "        test_suite = strrchr(argv0, '/');",
          "        if (test_suite != NULL) {",
          "            test_suite += 1; // skip the '/'",
          "            test_suite = argv0;",
          "                    platform, configuration, test_suite, test_case);"
        ]
      },
      "Suggestion": "Consider passing 'platform', 'configuration' and 'test_suite' explicitly as arguments to the function 'write_outcome_entry' and use those arguments instead; use the 'restrict' keyword for 'platform', 'configuration' and 'test_suite' to hint the compiler that they are free of aliasing if you can guarantee it",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR001"
    },
    {
      "Check": "PWR001",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/build/tests/test_suite_block_cipher.c:493:1",
      "Title": "Declare global variables as function parameters",
      "RelatedCodeList": {
        "Subtitle": "Usages",
        "Code": [
          "    if (func_idx < (int) (sizeof(test_funcs) / sizeof(TestWrapper_t))) {",
          "        fp = test_funcs[func_idx];"
        ]
      },
      "Suggestion": "Consider passing 'test_funcs' explicitly as argument to the function 'dispatch_test' and use that argument instead; use the 'restrict' keyword for 'test_funcs' to hint the compiler that it is free of aliasing",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR001"
    },
    {
      "Check": "PWR001",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/build/tests/test_suite_block_cipher.c:531:1",
      "Title": "Declare global variables as function parameters",
      "RelatedCodeList": {
        "Subtitle": "Usages",
        "Code": [
          "    if (func_idx < (int) (sizeof(test_funcs)/sizeof(TestWrapper_t))) {",
          "        fp = test_funcs[func_idx];"
        ]
      },
      "Suggestion": "Consider passing 'test_funcs' explicitly as argument to the function 'check_test' and use that argument instead; use the 'restrict' keyword for 'test_funcs' to hint the compiler that it is free of aliasing",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR001"
    },
    {
      "Check": "PWR001",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/build/tests/test_suite_block_cipher.c:873:1",
      "Title": "Declare global variables as function parameters",
      "RelatedCodeList": {
        "Subtitle": "Usages",
        "Code": [
          "    if (platform == NULL) {",
          "        platform = getenv(\"MBEDTLS_TEST_PLATFORM\");",
          "        if (platform == NULL) {",
          "            platform = \"unknown\";",
          "    if (configuration == NULL) {",
          "        configuration = getenv(\"MBEDTLS_TEST_CONFIGURATION\");",
          "        if (configuration == NULL) {",
          "            configuration = \"unknown\";",
          "    if (test_suite == NULL) {",
          "        test_suite = strrchr(argv0, '/');",
          "        if (test_suite != NULL) {",
          "            test_suite += 1; // skip the '/'",
          "            test_suite = argv0;",
          "                    platform, configuration, test_suite, test_case);"
        ]
      },
      "Suggestion": "Consider passing 'platform', 'configuration' and 'test_suite' explicitly as arguments to the function 'write_outcome_entry' and use those arguments instead; use the 'restrict' keyword for 'platform', 'configuration' and 'test_suite' to hint the compiler that they are free of aliasing if you can guarantee it",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR001"
    },
    {
      "Check": "PWR001",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/build/tests/test_suite_block_cipher.psa.c:580:1",
      "Title": "Declare global variables as function parameters",
      "RelatedCodeList": {
        "Subtitle": "Usages",
        "Code": [
          "    if (func_idx < (int) (sizeof(test_funcs) / sizeof(TestWrapper_t))) {",
          "        fp = test_funcs[func_idx];"
        ]
      },
      "Suggestion": "Consider passing 'test_funcs' explicitly as argument to the function 'dispatch_test' and use that argument instead; use the 'restrict' keyword for 'test_funcs' to hint the compiler that it is free of aliasing",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR001"
    },
    {
      "Check": "PWR001",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/build/tests/test_suite_block_cipher.psa.c:618:1",
      "Title": "Declare global variables as function parameters",
      "RelatedCodeList": {
        "Subtitle": "Usages",
        "Code": [
          "    if (func_idx < (int) (sizeof(test_funcs)/sizeof(TestWrapper_t))) {",
          "        fp = test_funcs[func_idx];"
        ]
      },
      "Suggestion": "Consider passing 'test_funcs' explicitly as argument to the function 'check_test' and use that argument instead; use the 'restrict' keyword for 'test_funcs' to hint the compiler that it is free of aliasing",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR001"
    },
    {
      "Check": "PWR001",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/build/tests/test_suite_block_cipher.psa.c:960:1",
      "Title": "Declare global variables as function parameters",
      "RelatedCodeList": {
        "Subtitle": "Usages",
        "Code": [
          "    if (platform == NULL) {",
          "        platform = getenv(\"MBEDTLS_TEST_PLATFORM\");",
          "        if (platform == NULL) {",
          "            platform = \"unknown\";",
          "    if (configuration == NULL) {",
          "        configuration = getenv(\"MBEDTLS_TEST_CONFIGURATION\");",
          "        if (configuration == NULL) {",
          "            configuration = \"unknown\";",
          "    if (test_suite == NULL) {",
          "        test_suite = strrchr(argv0, '/');",
          "        if (test_suite != NULL) {",
          "            test_suite += 1; // skip the '/'",
          "            test_suite = argv0;",
          "                    platform, configuration, test_suite, test_case);"
        ]
      },
      "Suggestion": "Consider passing 'platform', 'configuration' and 'test_suite' explicitly as arguments to the function 'write_outcome_entry' and use those arguments instead; use the 'restrict' keyword for 'platform', 'configuration' and 'test_suite' to hint the compiler that they are free of aliasing if you can guarantee it",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR001"
    },
    {
      "Check": "PWR001",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/build/tests/test_suite_camellia.c:625:1",
      "Title": "Declare global variables as function parameters",
      "RelatedCodeList": {
        "Subtitle": "Usages",
        "Code": [
          "    if (func_idx < (int) (sizeof(test_funcs) / sizeof(TestWrapper_t))) {",
          "        fp = test_funcs[func_idx];"
        ]
      },
      "Suggestion": "Consider passing 'test_funcs' explicitly as argument to the function 'dispatch_test' and use that argument instead; use the 'restrict' keyword for 'test_funcs' to hint the compiler that it is free of aliasing",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR001"
    },
    {
      "Check": "PWR001",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/build/tests/test_suite_camellia.c:663:1",
      "Title": "Declare global variables as function parameters",
      "RelatedCodeList": {
        "Subtitle": "Usages",
        "Code": [
          "    if (func_idx < (int) (sizeof(test_funcs)/sizeof(TestWrapper_t))) {",
          "        fp = test_funcs[func_idx];"
        ]
      },
      "Suggestion": "Consider passing 'test_funcs' explicitly as argument to the function 'check_test' and use that argument instead; use the 'restrict' keyword for 'test_funcs' to hint the compiler that it is free of aliasing",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR001"
    },
    {
      "Check": "PWR001",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/build/tests/test_suite_camellia.c:1005:1",
      "Title": "Declare global variables as function parameters",
      "RelatedCodeList": {
        "Subtitle": "Usages",
        "Code": [
          "    if (platform == NULL) {",
          "        platform = getenv(\"MBEDTLS_TEST_PLATFORM\");",
          "        if (platform == NULL) {",
          "            platform = \"unknown\";",
          "    if (configuration == NULL) {",
          "        configuration = getenv(\"MBEDTLS_TEST_CONFIGURATION\");",
          "        if (configuration == NULL) {",
          "            configuration = \"unknown\";",
          "    if (test_suite == NULL) {",
          "        test_suite = strrchr(argv0, '/');",
          "        if (test_suite != NULL) {",
          "            test_suite += 1; // skip the '/'",
          "            test_suite = argv0;",
          "                    platform, configuration, test_suite, test_case);"
        ]
      },
      "Suggestion": "Consider passing 'platform', 'configuration' and 'test_suite' explicitly as arguments to the function 'write_outcome_entry' and use those arguments instead; use the 'restrict' keyword for 'platform', 'configuration' and 'test_suite' to hint the compiler that they are free of aliasing if you can guarantee it",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR001"
    },
    {
      "Check": "PWR001",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/build/tests/test_suite_ccm.c:1562:1",
      "Title": "Declare global variables as function parameters",
      "RelatedCodeList": {
        "Subtitle": "Usages",
        "Code": [
          "    if (func_idx < (int) (sizeof(test_funcs) / sizeof(TestWrapper_t))) {",
          "        fp = test_funcs[func_idx];"
        ]
      },
      "Suggestion": "Consider passing 'test_funcs' explicitly as argument to the function 'dispatch_test' and use that argument instead; use the 'restrict' keyword for 'test_funcs' to hint the compiler that it is free of aliasing",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR001"
    },
    {
      "Check": "PWR001",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/build/tests/test_suite_ccm.c:1600:1",
      "Title": "Declare global variables as function parameters",
      "RelatedCodeList": {
        "Subtitle": "Usages",
        "Code": [
          "    if (func_idx < (int) (sizeof(test_funcs)/sizeof(TestWrapper_t))) {",
          "        fp = test_funcs[func_idx];"
        ]
      },
      "Suggestion": "Consider passing 'test_funcs' explicitly as argument to the function 'check_test' and use that argument instead; use the 'restrict' keyword for 'test_funcs' to hint the compiler that it is free of aliasing",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR001"
    },
    {
      "Check": "PWR001",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/build/tests/test_suite_ccm.c:1942:1",
      "Title": "Declare global variables as function parameters",
      "RelatedCodeList": {
        "Subtitle": "Usages",
        "Code": [
          "    if (platform == NULL) {",
          "        platform = getenv(\"MBEDTLS_TEST_PLATFORM\");",
          "        if (platform == NULL) {",
          "            platform = \"unknown\";",
          "    if (configuration == NULL) {",
          "        configuration = getenv(\"MBEDTLS_TEST_CONFIGURATION\");",
          "        if (configuration == NULL) {",
          "            configuration = \"unknown\";",
          "    if (test_suite == NULL) {",
          "        test_suite = strrchr(argv0, '/');",
          "        if (test_suite != NULL) {",
          "            test_suite += 1; // skip the '/'",
          "            test_suite = argv0;",
          "                    platform, configuration, test_suite, test_case);"
        ]
      },
      "Suggestion": "Consider passing 'platform', 'configuration' and 'test_suite' explicitly as arguments to the function 'write_outcome_entry' and use those arguments instead; use the 'restrict' keyword for 'platform', 'configuration' and 'test_suite' to hint the compiler that they are free of aliasing if you can guarantee it",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR001"
    },
    {
      "Check": "PWR001",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/build/tests/test_suite_chacha20.c:382:1",
      "Title": "Declare global variables as function parameters",
      "RelatedCodeList": {
        "Subtitle": "Usages",
        "Code": [
          "    if (func_idx < (int) (sizeof(test_funcs) / sizeof(TestWrapper_t))) {",
          "        fp = test_funcs[func_idx];"
        ]
      },
      "Suggestion": "Consider passing 'test_funcs' explicitly as argument to the function 'dispatch_test' and use that argument instead; use the 'restrict' keyword for 'test_funcs' to hint the compiler that it is free of aliasing",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR001"
    },
    {
      "Check": "PWR001",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/build/tests/test_suite_chacha20.c:420:1",
      "Title": "Declare global variables as function parameters",
      "RelatedCodeList": {
        "Subtitle": "Usages",
        "Code": [
          "    if (func_idx < (int) (sizeof(test_funcs)/sizeof(TestWrapper_t))) {",
          "        fp = test_funcs[func_idx];"
        ]
      },
      "Suggestion": "Consider passing 'test_funcs' explicitly as argument to the function 'check_test' and use that argument instead; use the 'restrict' keyword for 'test_funcs' to hint the compiler that it is free of aliasing",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR001"
    },
    {
      "Check": "PWR001",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/build/tests/test_suite_chacha20.c:762:1",
      "Title": "Declare global variables as function parameters",
      "RelatedCodeList": {
        "Subtitle": "Usages",
        "Code": [
          "    if (platform == NULL) {",
          "        platform = getenv(\"MBEDTLS_TEST_PLATFORM\");",
          "        if (platform == NULL) {",
          "            platform = \"unknown\";",
          "    if (configuration == NULL) {",
          "        configuration = getenv(\"MBEDTLS_TEST_CONFIGURATION\");",
          "        if (configuration == NULL) {",
          "            configuration = \"unknown\";",
          "    if (test_suite == NULL) {",
          "        test_suite = strrchr(argv0, '/');",
          "        if (test_suite != NULL) {",
          "            test_suite += 1; // skip the '/'",
          "            test_suite = argv0;",
          "                    platform, configuration, test_suite, test_case);"
        ]
      },
      "Suggestion": "Consider passing 'platform', 'configuration' and 'test_suite' explicitly as arguments to the function 'write_outcome_entry' and use those arguments instead; use the 'restrict' keyword for 'platform', 'configuration' and 'test_suite' to hint the compiler that they are free of aliasing if you can guarantee it",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR001"
    },
    {
      "Check": "PWR001",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/build/tests/test_suite_chachapoly.c:514:1",
      "Title": "Declare global variables as function parameters",
      "RelatedCodeList": {
        "Subtitle": "Usages",
        "Code": [
          "    if (func_idx < (int) (sizeof(test_funcs) / sizeof(TestWrapper_t))) {",
          "        fp = test_funcs[func_idx];"
        ]
      },
      "Suggestion": "Consider passing 'test_funcs' explicitly as argument to the function 'dispatch_test' and use that argument instead; use the 'restrict' keyword for 'test_funcs' to hint the compiler that it is free of aliasing",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR001"
    },
    {
      "Check": "PWR001",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/build/tests/test_suite_chachapoly.c:552:1",
      "Title": "Declare global variables as function parameters",
      "RelatedCodeList": {
        "Subtitle": "Usages",
        "Code": [
          "    if (func_idx < (int) (sizeof(test_funcs)/sizeof(TestWrapper_t))) {",
          "        fp = test_funcs[func_idx];"
        ]
      },
      "Suggestion": "Consider passing 'test_funcs' explicitly as argument to the function 'check_test' and use that argument instead; use the 'restrict' keyword for 'test_funcs' to hint the compiler that it is free of aliasing",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR001"
    },
    {
      "Check": "PWR001",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/build/tests/test_suite_chachapoly.c:894:1",
      "Title": "Declare global variables as function parameters",
      "RelatedCodeList": {
        "Subtitle": "Usages",
        "Code": [
          "    if (platform == NULL) {",
          "        platform = getenv(\"MBEDTLS_TEST_PLATFORM\");",
          "        if (platform == NULL) {",
          "            platform = \"unknown\";",
          "    if (configuration == NULL) {",
          "        configuration = getenv(\"MBEDTLS_TEST_CONFIGURATION\");",
          "        if (configuration == NULL) {",
          "            configuration = \"unknown\";",
          "    if (test_suite == NULL) {",
          "        test_suite = strrchr(argv0, '/');",
          "        if (test_suite != NULL) {",
          "            test_suite += 1; // skip the '/'",
          "            test_suite = argv0;",
          "                    platform, configuration, test_suite, test_case);"
        ]
      },
      "Suggestion": "Consider passing 'platform', 'configuration' and 'test_suite' explicitly as arguments to the function 'write_outcome_entry' and use those arguments instead; use the 'restrict' keyword for 'platform', 'configuration' and 'test_suite' to hint the compiler that they are free of aliasing if you can guarantee it",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR001"
    },
    {
      "Check": "PWR001",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/build/tests/test_suite_cipher.aes.c:2055:1",
      "Title": "Declare global variables as function parameters",
      "RelatedCodeList": {
        "Subtitle": "Usages",
        "Code": [
          "    if (func_idx < (int) (sizeof(test_funcs) / sizeof(TestWrapper_t))) {",
          "        fp = test_funcs[func_idx];"
        ]
      },
      "Suggestion": "Consider passing 'test_funcs' explicitly as argument to the function 'dispatch_test' and use that argument instead; use the 'restrict' keyword for 'test_funcs' to hint the compiler that it is free of aliasing",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR001"
    },
    {
      "Check": "PWR001",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/build/tests/test_suite_cipher.aes.c:2093:1",
      "Title": "Declare global variables as function parameters",
      "RelatedCodeList": {
        "Subtitle": "Usages",
        "Code": [
          "    if (func_idx < (int) (sizeof(test_funcs)/sizeof(TestWrapper_t))) {",
          "        fp = test_funcs[func_idx];"
        ]
      },
      "Suggestion": "Consider passing 'test_funcs' explicitly as argument to the function 'check_test' and use that argument instead; use the 'restrict' keyword for 'test_funcs' to hint the compiler that it is free of aliasing",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR001"
    },
    {
      "Check": "PWR001",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/build/tests/test_suite_cipher.aes.c:2435:1",
      "Title": "Declare global variables as function parameters",
      "RelatedCodeList": {
        "Subtitle": "Usages",
        "Code": [
          "    if (platform == NULL) {",
          "        platform = getenv(\"MBEDTLS_TEST_PLATFORM\");",
          "        if (platform == NULL) {",
          "            platform = \"unknown\";",
          "    if (configuration == NULL) {",
          "        configuration = getenv(\"MBEDTLS_TEST_CONFIGURATION\");",
          "        if (configuration == NULL) {",
          "            configuration = \"unknown\";",
          "    if (test_suite == NULL) {",
          "        test_suite = strrchr(argv0, '/');",
          "        if (test_suite != NULL) {",
          "            test_suite += 1; // skip the '/'",
          "            test_suite = argv0;",
          "                    platform, configuration, test_suite, test_case);"
        ]
      },
      "Suggestion": "Consider passing 'platform', 'configuration' and 'test_suite' explicitly as arguments to the function 'write_outcome_entry' and use those arguments instead; use the 'restrict' keyword for 'platform', 'configuration' and 'test_suite' to hint the compiler that they are free of aliasing if you can guarantee it",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR001"
    },
    {
      "Check": "PWR001",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/build/tests/test_suite_cipher.aria.c:1820:1",
      "Title": "Declare global variables as function parameters",
      "RelatedCodeList": {
        "Subtitle": "Usages",
        "Code": [
          "    if (func_idx < (int) (sizeof(test_funcs) / sizeof(TestWrapper_t))) {",
          "        fp = test_funcs[func_idx];"
        ]
      },
      "Suggestion": "Consider passing 'test_funcs' explicitly as argument to the function 'dispatch_test' and use that argument instead; use the 'restrict' keyword for 'test_funcs' to hint the compiler that it is free of aliasing",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR001"
    },
    {
      "Check": "PWR001",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/build/tests/test_suite_cipher.aria.c:1858:1",
      "Title": "Declare global variables as function parameters",
      "RelatedCodeList": {
        "Subtitle": "Usages",
        "Code": [
          "    if (func_idx < (int) (sizeof(test_funcs)/sizeof(TestWrapper_t))) {",
          "        fp = test_funcs[func_idx];"
        ]
      },
      "Suggestion": "Consider passing 'test_funcs' explicitly as argument to the function 'check_test' and use that argument instead; use the 'restrict' keyword for 'test_funcs' to hint the compiler that it is free of aliasing",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR001"
    },
    {
      "Check": "PWR001",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/build/tests/test_suite_cipher.aria.c:2200:1",
      "Title": "Declare global variables as function parameters",
      "RelatedCodeList": {
        "Subtitle": "Usages",
        "Code": [
          "    if (platform == NULL) {",
          "        platform = getenv(\"MBEDTLS_TEST_PLATFORM\");",
          "        if (platform == NULL) {",
          "            platform = \"unknown\";",
          "    if (configuration == NULL) {",
          "        configuration = getenv(\"MBEDTLS_TEST_CONFIGURATION\");",
          "        if (configuration == NULL) {",
          "            configuration = \"unknown\";",
          "    if (test_suite == NULL) {",
          "        test_suite = strrchr(argv0, '/');",
          "        if (test_suite != NULL) {",
          "            test_suite += 1; // skip the '/'",
          "            test_suite = argv0;",
          "                    platform, configuration, test_suite, test_case);"
        ]
      },
      "Suggestion": "Consider passing 'platform', 'configuration' and 'test_suite' explicitly as arguments to the function 'write_outcome_entry' and use those arguments instead; use the 'restrict' keyword for 'platform', 'configuration' and 'test_suite' to hint the compiler that they are free of aliasing if you can guarantee it",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR001"
    },
    {
      "Check": "PWR001",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/build/tests/test_suite_cipher.camellia.c:1905:1",
      "Title": "Declare global variables as function parameters",
      "RelatedCodeList": {
        "Subtitle": "Usages",
        "Code": [
          "    if (func_idx < (int) (sizeof(test_funcs) / sizeof(TestWrapper_t))) {",
          "        fp = test_funcs[func_idx];"
        ]
      },
      "Suggestion": "Consider passing 'test_funcs' explicitly as argument to the function 'dispatch_test' and use that argument instead; use the 'restrict' keyword for 'test_funcs' to hint the compiler that it is free of aliasing",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR001"
    },
    {
      "Check": "PWR001",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/build/tests/test_suite_cipher.camellia.c:1943:1",
      "Title": "Declare global variables as function parameters",
      "RelatedCodeList": {
        "Subtitle": "Usages",
        "Code": [
          "    if (func_idx < (int) (sizeof(test_funcs)/sizeof(TestWrapper_t))) {",
          "        fp = test_funcs[func_idx];"
        ]
      },
      "Suggestion": "Consider passing 'test_funcs' explicitly as argument to the function 'check_test' and use that argument instead; use the 'restrict' keyword for 'test_funcs' to hint the compiler that it is free of aliasing",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR001"
    },
    {
      "Check": "PWR001",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/build/tests/test_suite_cipher.camellia.c:2285:1",
      "Title": "Declare global variables as function parameters",
      "RelatedCodeList": {
        "Subtitle": "Usages",
        "Code": [
          "    if (platform == NULL) {",
          "        platform = getenv(\"MBEDTLS_TEST_PLATFORM\");",
          "        if (platform == NULL) {",
          "            platform = \"unknown\";",
          "    if (configuration == NULL) {",
          "        configuration = getenv(\"MBEDTLS_TEST_CONFIGURATION\");",
          "        if (configuration == NULL) {",
          "            configuration = \"unknown\";",
          "    if (test_suite == NULL) {",
          "        test_suite = strrchr(argv0, '/');",
          "        if (test_suite != NULL) {",
          "            test_suite += 1; // skip the '/'",
          "            test_suite = argv0;",
          "                    platform, configuration, test_suite, test_case);"
        ]
      },
      "Suggestion": "Consider passing 'platform', 'configuration' and 'test_suite' explicitly as arguments to the function 'write_outcome_entry' and use those arguments instead; use the 'restrict' keyword for 'platform', 'configuration' and 'test_suite' to hint the compiler that they are free of aliasing if you can guarantee it",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR001"
    },
    {
      "Check": "PWR001",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/build/tests/test_suite_cipher.ccm.c:1836:1",
      "Title": "Declare global variables as function parameters",
      "RelatedCodeList": {
        "Subtitle": "Usages",
        "Code": [
          "    if (func_idx < (int) (sizeof(test_funcs) / sizeof(TestWrapper_t))) {",
          "        fp = test_funcs[func_idx];"
        ]
      },
      "Suggestion": "Consider passing 'test_funcs' explicitly as argument to the function 'dispatch_test' and use that argument instead; use the 'restrict' keyword for 'test_funcs' to hint the compiler that it is free of aliasing",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR001"
    },
    {
      "Check": "PWR001",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/build/tests/test_suite_cipher.ccm.c:1874:1",
      "Title": "Declare global variables as function parameters",
      "RelatedCodeList": {
        "Subtitle": "Usages",
        "Code": [
          "    if (func_idx < (int) (sizeof(test_funcs)/sizeof(TestWrapper_t))) {",
          "        fp = test_funcs[func_idx];"
        ]
      },
      "Suggestion": "Consider passing 'test_funcs' explicitly as argument to the function 'check_test' and use that argument instead; use the 'restrict' keyword for 'test_funcs' to hint the compiler that it is free of aliasing",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR001"
    },
    {
      "Check": "PWR001",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/build/tests/test_suite_cipher.ccm.c:2216:1",
      "Title": "Declare global variables as function parameters",
      "RelatedCodeList": {
        "Subtitle": "Usages",
        "Code": [
          "    if (platform == NULL) {",
          "        platform = getenv(\"MBEDTLS_TEST_PLATFORM\");",
          "        if (platform == NULL) {",
          "            platform = \"unknown\";",
          "    if (configuration == NULL) {",
          "        configuration = getenv(\"MBEDTLS_TEST_CONFIGURATION\");",
          "        if (configuration == NULL) {",
          "            configuration = \"unknown\";",
          "    if (test_suite == NULL) {",
          "        test_suite = strrchr(argv0, '/');",
          "        if (test_suite != NULL) {",
          "            test_suite += 1; // skip the '/'",
          "            test_suite = argv0;",
          "                    platform, configuration, test_suite, test_case);"
        ]
      },
      "Suggestion": "Consider passing 'platform', 'configuration' and 'test_suite' explicitly as arguments to the function 'write_outcome_entry' and use those arguments instead; use the 'restrict' keyword for 'platform', 'configuration' and 'test_suite' to hint the compiler that they are free of aliasing if you can guarantee it",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR001"
    },
    {
      "Check": "PWR001",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/build/tests/test_suite_cipher.chacha20.c:1763:1",
      "Title": "Declare global variables as function parameters",
      "RelatedCodeList": {
        "Subtitle": "Usages",
        "Code": [
          "    if (func_idx < (int) (sizeof(test_funcs) / sizeof(TestWrapper_t))) {",
          "        fp = test_funcs[func_idx];"
        ]
      },
      "Suggestion": "Consider passing 'test_funcs' explicitly as argument to the function 'dispatch_test' and use that argument instead; use the 'restrict' keyword for 'test_funcs' to hint the compiler that it is free of aliasing",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR001"
    },
    {
      "Check": "PWR001",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/build/tests/test_suite_cipher.chacha20.c:1801:1",
      "Title": "Declare global variables as function parameters",
      "RelatedCodeList": {
        "Subtitle": "Usages",
        "Code": [
          "    if (func_idx < (int) (sizeof(test_funcs)/sizeof(TestWrapper_t))) {",
          "        fp = test_funcs[func_idx];"
        ]
      },
      "Suggestion": "Consider passing 'test_funcs' explicitly as argument to the function 'check_test' and use that argument instead; use the 'restrict' keyword for 'test_funcs' to hint the compiler that it is free of aliasing",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR001"
    },
    {
      "Check": "PWR001",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/build/tests/test_suite_cipher.chacha20.c:2143:1",
      "Title": "Declare global variables as function parameters",
      "RelatedCodeList": {
        "Subtitle": "Usages",
        "Code": [
          "    if (platform == NULL) {",
          "        platform = getenv(\"MBEDTLS_TEST_PLATFORM\");",
          "        if (platform == NULL) {",
          "            platform = \"unknown\";",
          "    if (configuration == NULL) {",
          "        configuration = getenv(\"MBEDTLS_TEST_CONFIGURATION\");",
          "        if (configuration == NULL) {",
          "            configuration = \"unknown\";",
          "    if (test_suite == NULL) {",
          "        test_suite = strrchr(argv0, '/');",
          "        if (test_suite != NULL) {",
          "            test_suite += 1; // skip the '/'",
          "            test_suite = argv0;",
          "                    platform, configuration, test_suite, test_case);"
        ]
      },
      "Suggestion": "Consider passing 'platform', 'configuration' and 'test_suite' explicitly as arguments to the function 'write_outcome_entry' and use those arguments instead; use the 'restrict' keyword for 'platform', 'configuration' and 'test_suite' to hint the compiler that they are free of aliasing if you can guarantee it",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR001"
    },
    {
      "Check": "PWR001",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/build/tests/test_suite_cipher.chachapoly.c:1763:1",
      "Title": "Declare global variables as function parameters",
      "RelatedCodeList": {
        "Subtitle": "Usages",
        "Code": [
          "    if (func_idx < (int) (sizeof(test_funcs) / sizeof(TestWrapper_t))) {",
          "        fp = test_funcs[func_idx];"
        ]
      },
      "Suggestion": "Consider passing 'test_funcs' explicitly as argument to the function 'dispatch_test' and use that argument instead; use the 'restrict' keyword for 'test_funcs' to hint the compiler that it is free of aliasing",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR001"
    },
    {
      "Check": "PWR001",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/build/tests/test_suite_cipher.chachapoly.c:1801:1",
      "Title": "Declare global variables as function parameters",
      "RelatedCodeList": {
        "Subtitle": "Usages",
        "Code": [
          "    if (func_idx < (int) (sizeof(test_funcs)/sizeof(TestWrapper_t))) {",
          "        fp = test_funcs[func_idx];"
        ]
      },
      "Suggestion": "Consider passing 'test_funcs' explicitly as argument to the function 'check_test' and use that argument instead; use the 'restrict' keyword for 'test_funcs' to hint the compiler that it is free of aliasing",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR001"
    },
    {
      "Check": "PWR001",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/build/tests/test_suite_cipher.chachapoly.c:2143:1",
      "Title": "Declare global variables as function parameters",
      "RelatedCodeList": {
        "Subtitle": "Usages",
        "Code": [
          "    if (platform == NULL) {",
          "        platform = getenv(\"MBEDTLS_TEST_PLATFORM\");",
          "        if (platform == NULL) {",
          "            platform = \"unknown\";",
          "    if (configuration == NULL) {",
          "        configuration = getenv(\"MBEDTLS_TEST_CONFIGURATION\");",
          "        if (configuration == NULL) {",
          "            configuration = \"unknown\";",
          "    if (test_suite == NULL) {",
          "        test_suite = strrchr(argv0, '/');",
          "        if (test_suite != NULL) {",
          "            test_suite += 1; // skip the '/'",
          "            test_suite = argv0;",
          "                    platform, configuration, test_suite, test_case);"
        ]
      },
      "Suggestion": "Consider passing 'platform', 'configuration' and 'test_suite' explicitly as arguments to the function 'write_outcome_entry' and use those arguments instead; use the 'restrict' keyword for 'platform', 'configuration' and 'test_suite' to hint the compiler that they are free of aliasing if you can guarantee it",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR001"
    },
    {
      "Check": "PWR001",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/build/tests/test_suite_cipher.des.c:1863:1",
      "Title": "Declare global variables as function parameters",
      "RelatedCodeList": {
        "Subtitle": "Usages",
        "Code": [
          "    if (func_idx < (int) (sizeof(test_funcs) / sizeof(TestWrapper_t))) {",
          "        fp = test_funcs[func_idx];"
        ]
      },
      "Suggestion": "Consider passing 'test_funcs' explicitly as argument to the function 'dispatch_test' and use that argument instead; use the 'restrict' keyword for 'test_funcs' to hint the compiler that it is free of aliasing",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR001"
    },
    {
      "Check": "PWR001",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/build/tests/test_suite_cipher.des.c:1901:1",
      "Title": "Declare global variables as function parameters",
      "RelatedCodeList": {
        "Subtitle": "Usages",
        "Code": [
          "    if (func_idx < (int) (sizeof(test_funcs)/sizeof(TestWrapper_t))) {",
          "        fp = test_funcs[func_idx];"
        ]
      },
      "Suggestion": "Consider passing 'test_funcs' explicitly as argument to the function 'check_test' and use that argument instead; use the 'restrict' keyword for 'test_funcs' to hint the compiler that it is free of aliasing",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR001"
    },
    {
      "Check": "PWR001",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/build/tests/test_suite_cipher.des.c:2243:1",
      "Title": "Declare global variables as function parameters",
      "RelatedCodeList": {
        "Subtitle": "Usages",
        "Code": [
          "    if (platform == NULL) {",
          "        platform = getenv(\"MBEDTLS_TEST_PLATFORM\");",
          "        if (platform == NULL) {",
          "            platform = \"unknown\";",
          "    if (configuration == NULL) {",
          "        configuration = getenv(\"MBEDTLS_TEST_CONFIGURATION\");",
          "        if (configuration == NULL) {",
          "            configuration = \"unknown\";",
          "    if (test_suite == NULL) {",
          "        test_suite = strrchr(argv0, '/');",
          "        if (test_suite != NULL) {",
          "            test_suite += 1; // skip the '/'",
          "            test_suite = argv0;",
          "                    platform, configuration, test_suite, test_case);"
        ]
      },
      "Suggestion": "Consider passing 'platform', 'configuration' and 'test_suite' explicitly as arguments to the function 'write_outcome_entry' and use those arguments instead; use the 'restrict' keyword for 'platform', 'configuration' and 'test_suite' to hint the compiler that they are free of aliasing if you can guarantee it",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR001"
    },
    {
      "Check": "PWR001",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/build/tests/test_suite_cipher.gcm.c:1865:1",
      "Title": "Declare global variables as function parameters",
      "RelatedCodeList": {
        "Subtitle": "Usages",
        "Code": [
          "    if (func_idx < (int) (sizeof(test_funcs) / sizeof(TestWrapper_t))) {",
          "        fp = test_funcs[func_idx];"
        ]
      },
      "Suggestion": "Consider passing 'test_funcs' explicitly as argument to the function 'dispatch_test' and use that argument instead; use the 'restrict' keyword for 'test_funcs' to hint the compiler that it is free of aliasing",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR001"
    },
    {
      "Check": "PWR001",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/build/tests/test_suite_cipher.gcm.c:1903:1",
      "Title": "Declare global variables as function parameters",
      "RelatedCodeList": {
        "Subtitle": "Usages",
        "Code": [
          "    if (func_idx < (int) (sizeof(test_funcs)/sizeof(TestWrapper_t))) {",
          "        fp = test_funcs[func_idx];"
        ]
      },
      "Suggestion": "Consider passing 'test_funcs' explicitly as argument to the function 'check_test' and use that argument instead; use the 'restrict' keyword for 'test_funcs' to hint the compiler that it is free of aliasing",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR001"
    },
    {
      "Check": "PWR001",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/build/tests/test_suite_cipher.gcm.c:2245:1",
      "Title": "Declare global variables as function parameters",
      "RelatedCodeList": {
        "Subtitle": "Usages",
        "Code": [
          "    if (platform == NULL) {",
          "        platform = getenv(\"MBEDTLS_TEST_PLATFORM\");",
          "        if (platform == NULL) {",
          "            platform = \"unknown\";",
          "    if (configuration == NULL) {",
          "        configuration = getenv(\"MBEDTLS_TEST_CONFIGURATION\");",
          "        if (configuration == NULL) {",
          "            configuration = \"unknown\";",
          "    if (test_suite == NULL) {",
          "        test_suite = strrchr(argv0, '/');",
          "        if (test_suite != NULL) {",
          "            test_suite += 1; // skip the '/'",
          "            test_suite = argv0;",
          "                    platform, configuration, test_suite, test_case);"
        ]
      },
      "Suggestion": "Consider passing 'platform', 'configuration' and 'test_suite' explicitly as arguments to the function 'write_outcome_entry' and use those arguments instead; use the 'restrict' keyword for 'platform', 'configuration' and 'test_suite' to hint the compiler that they are free of aliasing if you can guarantee it",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR001"
    },
    {
      "Check": "PWR001",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/build/tests/test_suite_cipher.misc.c:1744:1",
      "Title": "Declare global variables as function parameters",
      "RelatedCodeList": {
        "Subtitle": "Usages",
        "Code": [
          "    if (func_idx < (int) (sizeof(test_funcs) / sizeof(TestWrapper_t))) {",
          "        fp = test_funcs[func_idx];"
        ]
      },
      "Suggestion": "Consider passing 'test_funcs' explicitly as argument to the function 'dispatch_test' and use that argument instead; use the 'restrict' keyword for 'test_funcs' to hint the compiler that it is free of aliasing",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR001"
    },
    {
      "Check": "PWR001",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/build/tests/test_suite_cipher.misc.c:1782:1",
      "Title": "Declare global variables as function parameters",
      "RelatedCodeList": {
        "Subtitle": "Usages",
        "Code": [
          "    if (func_idx < (int) (sizeof(test_funcs)/sizeof(TestWrapper_t))) {",
          "        fp = test_funcs[func_idx];"
        ]
      },
      "Suggestion": "Consider passing 'test_funcs' explicitly as argument to the function 'check_test' and use that argument instead; use the 'restrict' keyword for 'test_funcs' to hint the compiler that it is free of aliasing",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR001"
    },
    {
      "Check": "PWR001",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/build/tests/test_suite_cipher.misc.c:2124:1",
      "Title": "Declare global variables as function parameters",
      "RelatedCodeList": {
        "Subtitle": "Usages",
        "Code": [
          "    if (platform == NULL) {",
          "        platform = getenv(\"MBEDTLS_TEST_PLATFORM\");",
          "        if (platform == NULL) {",
          "            platform = \"unknown\";",
          "    if (configuration == NULL) {",
          "        configuration = getenv(\"MBEDTLS_TEST_CONFIGURATION\");",
          "        if (configuration == NULL) {",
          "            configuration = \"unknown\";",
          "    if (test_suite == NULL) {",
          "        test_suite = strrchr(argv0, '/');",
          "        if (test_suite != NULL) {",
          "            test_suite += 1; // skip the '/'",
          "            test_suite = argv0;",
          "                    platform, configuration, test_suite, test_case);"
        ]
      },
      "Suggestion": "Consider passing 'platform', 'configuration' and 'test_suite' explicitly as arguments to the function 'write_outcome_entry' and use those arguments instead; use the 'restrict' keyword for 'platform', 'configuration' and 'test_suite' to hint the compiler that they are free of aliasing if you can guarantee it",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR001"
    },
    {
      "Check": "PWR001",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/build/tests/test_suite_cipher.nist_kw.c:1806:1",
      "Title": "Declare global variables as function parameters",
      "RelatedCodeList": {
        "Subtitle": "Usages",
        "Code": [
          "    if (func_idx < (int) (sizeof(test_funcs) / sizeof(TestWrapper_t))) {",
          "        fp = test_funcs[func_idx];"
        ]
      },
      "Suggestion": "Consider passing 'test_funcs' explicitly as argument to the function 'dispatch_test' and use that argument instead; use the 'restrict' keyword for 'test_funcs' to hint the compiler that it is free of aliasing",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR001"
    },
    {
      "Check": "PWR001",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/build/tests/test_suite_cipher.nist_kw.c:1844:1",
      "Title": "Declare global variables as function parameters",
      "RelatedCodeList": {
        "Subtitle": "Usages",
        "Code": [
          "    if (func_idx < (int) (sizeof(test_funcs)/sizeof(TestWrapper_t))) {",
          "        fp = test_funcs[func_idx];"
        ]
      },
      "Suggestion": "Consider passing 'test_funcs' explicitly as argument to the function 'check_test' and use that argument instead; use the 'restrict' keyword for 'test_funcs' to hint the compiler that it is free of aliasing",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR001"
    },
    {
      "Check": "PWR001",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/build/tests/test_suite_cipher.nist_kw.c:2186:1",
      "Title": "Declare global variables as function parameters",
      "RelatedCodeList": {
        "Subtitle": "Usages",
        "Code": [
          "    if (platform == NULL) {",
          "        platform = getenv(\"MBEDTLS_TEST_PLATFORM\");",
          "        if (platform == NULL) {",
          "            platform = \"unknown\";",
          "    if (configuration == NULL) {",
          "        configuration = getenv(\"MBEDTLS_TEST_CONFIGURATION\");",
          "        if (configuration == NULL) {",
          "            configuration = \"unknown\";",
          "    if (test_suite == NULL) {",
          "        test_suite = strrchr(argv0, '/');",
          "        if (test_suite != NULL) {",
          "            test_suite += 1; // skip the '/'",
          "            test_suite = argv0;",
          "                    platform, configuration, test_suite, test_case);"
        ]
      },
      "Suggestion": "Consider passing 'platform', 'configuration' and 'test_suite' explicitly as arguments to the function 'write_outcome_entry' and use those arguments instead; use the 'restrict' keyword for 'platform', 'configuration' and 'test_suite' to hint the compiler that they are free of aliasing if you can guarantee it",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR001"
    },
    {
      "Check": "PWR001",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/build/tests/test_suite_cipher.null.c:1758:1",
      "Title": "Declare global variables as function parameters",
      "RelatedCodeList": {
        "Subtitle": "Usages",
        "Code": [
          "    if (func_idx < (int) (sizeof(test_funcs) / sizeof(TestWrapper_t))) {",
          "        fp = test_funcs[func_idx];"
        ]
      },
      "Suggestion": "Consider passing 'test_funcs' explicitly as argument to the function 'dispatch_test' and use that argument instead; use the 'restrict' keyword for 'test_funcs' to hint the compiler that it is free of aliasing",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR001"
    },
    {
      "Check": "PWR001",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/build/tests/test_suite_cipher.null.c:1796:1",
      "Title": "Declare global variables as function parameters",
      "RelatedCodeList": {
        "Subtitle": "Usages",
        "Code": [
          "    if (func_idx < (int) (sizeof(test_funcs)/sizeof(TestWrapper_t))) {",
          "        fp = test_funcs[func_idx];"
        ]
      },
      "Suggestion": "Consider passing 'test_funcs' explicitly as argument to the function 'check_test' and use that argument instead; use the 'restrict' keyword for 'test_funcs' to hint the compiler that it is free of aliasing",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR001"
    },
    {
      "Check": "PWR001",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/build/tests/test_suite_cipher.null.c:2138:1",
      "Title": "Declare global variables as function parameters",
      "RelatedCodeList": {
        "Subtitle": "Usages",
        "Code": [
          "    if (platform == NULL) {",
          "        platform = getenv(\"MBEDTLS_TEST_PLATFORM\");",
          "        if (platform == NULL) {",
          "            platform = \"unknown\";",
          "    if (configuration == NULL) {",
          "        configuration = getenv(\"MBEDTLS_TEST_CONFIGURATION\");",
          "        if (configuration == NULL) {",
          "            configuration = \"unknown\";",
          "    if (test_suite == NULL) {",
          "        test_suite = strrchr(argv0, '/');",
          "        if (test_suite != NULL) {",
          "            test_suite += 1; // skip the '/'",
          "            test_suite = argv0;",
          "                    platform, configuration, test_suite, test_case);"
        ]
      },
      "Suggestion": "Consider passing 'platform', 'configuration' and 'test_suite' explicitly as arguments to the function 'write_outcome_entry' and use those arguments instead; use the 'restrict' keyword for 'platform', 'configuration' and 'test_suite' to hint the compiler that they are free of aliasing if you can guarantee it",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR001"
    },
    {
      "Check": "PWR001",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/build/tests/test_suite_cipher.padding.c:1923:1",
      "Title": "Declare global variables as function parameters",
      "RelatedCodeList": {
        "Subtitle": "Usages",
        "Code": [
          "    if (func_idx < (int) (sizeof(test_funcs) / sizeof(TestWrapper_t))) {",
          "        fp = test_funcs[func_idx];"
        ]
      },
      "Suggestion": "Consider passing 'test_funcs' explicitly as argument to the function 'dispatch_test' and use that argument instead; use the 'restrict' keyword for 'test_funcs' to hint the compiler that it is free of aliasing",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR001"
    },
    {
      "Check": "PWR001",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/build/tests/test_suite_cipher.padding.c:1961:1",
      "Title": "Declare global variables as function parameters",
      "RelatedCodeList": {
        "Subtitle": "Usages",
        "Code": [
          "    if (func_idx < (int) (sizeof(test_funcs)/sizeof(TestWrapper_t))) {",
          "        fp = test_funcs[func_idx];"
        ]
      },
      "Suggestion": "Consider passing 'test_funcs' explicitly as argument to the function 'check_test' and use that argument instead; use the 'restrict' keyword for 'test_funcs' to hint the compiler that it is free of aliasing",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR001"
    },
    {
      "Check": "PWR001",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/build/tests/test_suite_cipher.padding.c:2303:1",
      "Title": "Declare global variables as function parameters",
      "RelatedCodeList": {
        "Subtitle": "Usages",
        "Code": [
          "    if (platform == NULL) {",
          "        platform = getenv(\"MBEDTLS_TEST_PLATFORM\");",
          "        if (platform == NULL) {",
          "            platform = \"unknown\";",
          "    if (configuration == NULL) {",
          "        configuration = getenv(\"MBEDTLS_TEST_CONFIGURATION\");",
          "        if (configuration == NULL) {",
          "            configuration = \"unknown\";",
          "    if (test_suite == NULL) {",
          "        test_suite = strrchr(argv0, '/');",
          "        if (test_suite != NULL) {",
          "            test_suite += 1; // skip the '/'",
          "            test_suite = argv0;",
          "                    platform, configuration, test_suite, test_case);"
        ]
      },
      "Suggestion": "Consider passing 'platform', 'configuration' and 'test_suite' explicitly as arguments to the function 'write_outcome_entry' and use those arguments instead; use the 'restrict' keyword for 'platform', 'configuration' and 'test_suite' to hint the compiler that they are free of aliasing if you can guarantee it",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR001"
    },
    {
      "Check": "PWR001",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/build/tests/test_suite_cmac.c:753:1",
      "Title": "Declare global variables as function parameters",
      "RelatedCodeList": {
        "Subtitle": "Usages",
        "Code": [
          "    if (func_idx < (int) (sizeof(test_funcs) / sizeof(TestWrapper_t))) {",
          "        fp = test_funcs[func_idx];"
        ]
      },
      "Suggestion": "Consider passing 'test_funcs' explicitly as argument to the function 'dispatch_test' and use that argument instead; use the 'restrict' keyword for 'test_funcs' to hint the compiler that it is free of aliasing",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR001"
    },
    {
      "Check": "PWR001",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/build/tests/test_suite_cmac.c:791:1",
      "Title": "Declare global variables as function parameters",
      "RelatedCodeList": {
        "Subtitle": "Usages",
        "Code": [
          "    if (func_idx < (int) (sizeof(test_funcs)/sizeof(TestWrapper_t))) {",
          "        fp = test_funcs[func_idx];"
        ]
      },
      "Suggestion": "Consider passing 'test_funcs' explicitly as argument to the function 'check_test' and use that argument instead; use the 'restrict' keyword for 'test_funcs' to hint the compiler that it is free of aliasing",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR001"
    },
    {
      "Check": "PWR001",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/build/tests/test_suite_cmac.c:1133:1",
      "Title": "Declare global variables as function parameters",
      "RelatedCodeList": {
        "Subtitle": "Usages",
        "Code": [
          "    if (platform == NULL) {",
          "        platform = getenv(\"MBEDTLS_TEST_PLATFORM\");",
          "        if (platform == NULL) {",
          "            platform = \"unknown\";",
          "    if (configuration == NULL) {",
          "        configuration = getenv(\"MBEDTLS_TEST_CONFIGURATION\");",
          "        if (configuration == NULL) {",
          "            configuration = \"unknown\";",
          "    if (test_suite == NULL) {",
          "        test_suite = strrchr(argv0, '/');",
          "        if (test_suite != NULL) {",
          "            test_suite += 1; // skip the '/'",
          "            test_suite = argv0;",
          "                    platform, configuration, test_suite, test_case);"
        ]
      },
      "Suggestion": "Consider passing 'platform', 'configuration' and 'test_suite' explicitly as arguments to the function 'write_outcome_entry' and use those arguments instead; use the 'restrict' keyword for 'platform', 'configuration' and 'test_suite' to hint the compiler that they are free of aliasing if you can guarantee it",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR001"
    },
    {
      "Check": "PWR001",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/build/tests/test_suite_common.c:358:1",
      "Title": "Declare global variables as function parameters",
      "RelatedCodeList": {
        "Subtitle": "Usages",
        "Code": [
          "    if (func_idx < (int) (sizeof(test_funcs) / sizeof(TestWrapper_t))) {",
          "        fp = test_funcs[func_idx];"
        ]
      },
      "Suggestion": "Consider passing 'test_funcs' explicitly as argument to the function 'dispatch_test' and use that argument instead; use the 'restrict' keyword for 'test_funcs' to hint the compiler that it is free of aliasing",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR001"
    },
    {
      "Check": "PWR001",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/build/tests/test_suite_common.c:396:1",
      "Title": "Declare global variables as function parameters",
      "RelatedCodeList": {
        "Subtitle": "Usages",
        "Code": [
          "    if (func_idx < (int) (sizeof(test_funcs)/sizeof(TestWrapper_t))) {",
          "        fp = test_funcs[func_idx];"
        ]
      },
      "Suggestion": "Consider passing 'test_funcs' explicitly as argument to the function 'check_test' and use that argument instead; use the 'restrict' keyword for 'test_funcs' to hint the compiler that it is free of aliasing",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR001"
    },
    {
      "Check": "PWR001",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/build/tests/test_suite_common.c:738:1",
      "Title": "Declare global variables as function parameters",
      "RelatedCodeList": {
        "Subtitle": "Usages",
        "Code": [
          "    if (platform == NULL) {",
          "        platform = getenv(\"MBEDTLS_TEST_PLATFORM\");",
          "        if (platform == NULL) {",
          "            platform = \"unknown\";",
          "    if (configuration == NULL) {",
          "        configuration = getenv(\"MBEDTLS_TEST_CONFIGURATION\");",
          "        if (configuration == NULL) {",
          "            configuration = \"unknown\";",
          "    if (test_suite == NULL) {",
          "        test_suite = strrchr(argv0, '/');",
          "        if (test_suite != NULL) {",
          "            test_suite += 1; // skip the '/'",
          "            test_suite = argv0;",
          "                    platform, configuration, test_suite, test_case);"
        ]
      },
      "Suggestion": "Consider passing 'platform', 'configuration' and 'test_suite' explicitly as arguments to the function 'write_outcome_entry' and use those arguments instead; use the 'restrict' keyword for 'platform', 'configuration' and 'test_suite' to hint the compiler that they are free of aliasing if you can guarantee it",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR001"
    },
    {
      "Check": "PWR001",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/build/tests/test_suite_constant_time.c:905:1",
      "Title": "Declare global variables as function parameters",
      "RelatedCodeList": {
        "Subtitle": "Usages",
        "Code": [
          "    if (func_idx < (int) (sizeof(test_funcs) / sizeof(TestWrapper_t))) {",
          "        fp = test_funcs[func_idx];"
        ]
      },
      "Suggestion": "Consider passing 'test_funcs' explicitly as argument to the function 'dispatch_test' and use that argument instead; use the 'restrict' keyword for 'test_funcs' to hint the compiler that it is free of aliasing",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR001"
    },
    {
      "Check": "PWR001",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/build/tests/test_suite_constant_time.c:943:1",
      "Title": "Declare global variables as function parameters",
      "RelatedCodeList": {
        "Subtitle": "Usages",
        "Code": [
          "    if (func_idx < (int) (sizeof(test_funcs)/sizeof(TestWrapper_t))) {",
          "        fp = test_funcs[func_idx];"
        ]
      },
      "Suggestion": "Consider passing 'test_funcs' explicitly as argument to the function 'check_test' and use that argument instead; use the 'restrict' keyword for 'test_funcs' to hint the compiler that it is free of aliasing",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR001"
    },
    {
      "Check": "PWR001",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/build/tests/test_suite_constant_time.c:1285:1",
      "Title": "Declare global variables as function parameters",
      "RelatedCodeList": {
        "Subtitle": "Usages",
        "Code": [
          "    if (platform == NULL) {",
          "        platform = getenv(\"MBEDTLS_TEST_PLATFORM\");",
          "        if (platform == NULL) {",
          "            platform = \"unknown\";",
          "    if (configuration == NULL) {",
          "        configuration = getenv(\"MBEDTLS_TEST_CONFIGURATION\");",
          "        if (configuration == NULL) {",
          "            configuration = \"unknown\";",
          "    if (test_suite == NULL) {",
          "        test_suite = strrchr(argv0, '/');",
          "        if (test_suite != NULL) {",
          "            test_suite += 1; // skip the '/'",
          "            test_suite = argv0;",
          "                    platform, configuration, test_suite, test_case);"
        ]
      },
      "Suggestion": "Consider passing 'platform', 'configuration' and 'test_suite' explicitly as arguments to the function 'write_outcome_entry' and use those arguments instead; use the 'restrict' keyword for 'platform', 'configuration' and 'test_suite' to hint the compiler that they are free of aliasing if you can guarantee it",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR001"
    },
    {
      "Check": "PWR001",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/build/tests/test_suite_constant_time_hmac.c:501:1",
      "Title": "Declare global variables as function parameters",
      "RelatedCodeList": {
        "Subtitle": "Usages",
        "Code": [
          "    if (func_idx < (int) (sizeof(test_funcs) / sizeof(TestWrapper_t))) {",
          "        fp = test_funcs[func_idx];"
        ]
      },
      "Suggestion": "Consider passing 'test_funcs' explicitly as argument to the function 'dispatch_test' and use that argument instead; use the 'restrict' keyword for 'test_funcs' to hint the compiler that it is free of aliasing",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR001"
    },
    {
      "Check": "PWR001",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/build/tests/test_suite_constant_time_hmac.c:539:1",
      "Title": "Declare global variables as function parameters",
      "RelatedCodeList": {
        "Subtitle": "Usages",
        "Code": [
          "    if (func_idx < (int) (sizeof(test_funcs)/sizeof(TestWrapper_t))) {",
          "        fp = test_funcs[func_idx];"
        ]
      },
      "Suggestion": "Consider passing 'test_funcs' explicitly as argument to the function 'check_test' and use that argument instead; use the 'restrict' keyword for 'test_funcs' to hint the compiler that it is free of aliasing",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR001"
    },
    {
      "Check": "PWR001",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/build/tests/test_suite_constant_time_hmac.c:881:1",
      "Title": "Declare global variables as function parameters",
      "RelatedCodeList": {
        "Subtitle": "Usages",
        "Code": [
          "    if (platform == NULL) {",
          "        platform = getenv(\"MBEDTLS_TEST_PLATFORM\");",
          "        if (platform == NULL) {",
          "            platform = \"unknown\";",
          "    if (configuration == NULL) {",
          "        configuration = getenv(\"MBEDTLS_TEST_CONFIGURATION\");",
          "        if (configuration == NULL) {",
          "            configuration = \"unknown\";",
          "    if (test_suite == NULL) {",
          "        test_suite = strrchr(argv0, '/');",
          "        if (test_suite != NULL) {",
          "            test_suite += 1; // skip the '/'",
          "            test_suite = argv0;",
          "                    platform, configuration, test_suite, test_case);"
        ]
      },
      "Suggestion": "Consider passing 'platform', 'configuration' and 'test_suite' explicitly as arguments to the function 'write_outcome_entry' and use those arguments instead; use the 'restrict' keyword for 'platform', 'configuration' and 'test_suite' to hint the compiler that they are free of aliasing if you can guarantee it",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR001"
    },
    {
      "Check": "PWR001",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/build/tests/test_suite_ctr_drbg.c:184:1",
      "Title": "Declare global variables as function parameters",
      "RelatedCodeList": {
        "Subtitle": "Usages",
        "Code": [
          "    if (test_offset_idx + len > test_max_idx) {",
          "    memcpy(buf, p + test_offset_idx, len);",
          "    test_offset_idx += len;"
        ]
      },
      "Suggestion": "Consider passing 'test_offset_idx' and 'test_max_idx' explicitly as arguments to the function 'mbedtls_test_entropy_func' and use those arguments instead; use the 'restrict' keyword for 'test_offset_idx' and 'test_max_idx' to hint the compiler that they are free of aliasing",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR001"
    },
    {
      "Check": "PWR001",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/build/tests/test_suite_ctr_drbg.c:195:1",
      "Title": "Declare global variables as function parameters",
      "RelatedCodeList": {
        "Subtitle": "Usages",
        "Code": [
          "    test_offset_idx = 0;",
          "    test_max_idx = entropy->len;"
        ]
      },
      "Suggestion": "Consider passing 'test_offset_idx' and 'test_max_idx' explicitly as arguments to the function 'ctr_drbg_validate_internal' and use those arguments instead; use the 'restrict' keyword for 'test_offset_idx' and 'test_max_idx' to hint the compiler that they are free of aliasing",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR001"
    },
    {
      "Check": "PWR001",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/build/tests/test_suite_ctr_drbg.c:421:1",
      "Title": "Declare global variables as function parameters",
      "RelatedCodeList": {
        "Subtitle": "Usages",
        "Code": [
          "    test_offset_idx = 0;",
          "    test_max_idx = sizeof(entropy);",
          "    TEST_ASSERT(test_offset_idx >= (byte_strength * 3 + 1) / 2);",
          "    last_idx = test_offset_idx;",
          "    TEST_ASSERT(test_offset_idx - last_idx >= byte_strength);"
        ]
      },
      "Suggestion": "Consider passing 'test_offset_idx' and 'test_max_idx' explicitly as arguments to the function 'test_ctr_drbg_entropy_strength' and use those arguments instead; use the 'restrict' keyword for 'test_offset_idx' and 'test_max_idx' to hint the compiler that they are free of aliasing",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR001"
    },
    {
      "Check": "PWR001",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/build/tests/test_suite_ctr_drbg.c:460:1",
      "Title": "Declare global variables as function parameters",
      "RelatedCodeList": {
        "Subtitle": "Usages",
        "Code": [
          "    test_offset_idx = 0;",
          "    test_max_idx = sizeof(entropy);",
          "    TEST_EQUAL(test_offset_idx, expected_idx);",
          "    TEST_EQUAL(test_offset_idx, expected_idx);",
          "    TEST_EQUAL(test_offset_idx, expected_idx);",
          "    TEST_EQUAL(test_offset_idx, expected_idx);",
          "    TEST_EQUAL(test_offset_idx, expected_idx);",
          "    TEST_EQUAL(test_offset_idx, expected_idx);",
          "    TEST_EQUAL(test_offset_idx, expected_idx);"
        ]
      },
      "Suggestion": "Consider passing 'test_offset_idx' and 'test_max_idx' explicitly as arguments to the function 'test_ctr_drbg_entropy_usage' and use those arguments instead; use the 'restrict' keyword for 'test_offset_idx' and 'test_max_idx' to hint the compiler that they are free of aliasing",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR001"
    },
    {
      "Check": "PWR001",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/build/tests/test_suite_ctr_drbg.c:1011:1",
      "Title": "Declare global variables as function parameters",
      "RelatedCodeList": {
        "Subtitle": "Usages",
        "Code": [
          "    if (func_idx < (int) (sizeof(test_funcs) / sizeof(TestWrapper_t))) {",
          "        fp = test_funcs[func_idx];"
        ]
      },
      "Suggestion": "Consider passing 'test_funcs' explicitly as argument to the function 'dispatch_test' and use that argument instead; use the 'restrict' keyword for 'test_funcs' to hint the compiler that it is free of aliasing",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR001"
    },
    {
      "Check": "PWR001",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/build/tests/test_suite_ctr_drbg.c:1049:1",
      "Title": "Declare global variables as function parameters",
      "RelatedCodeList": {
        "Subtitle": "Usages",
        "Code": [
          "    if (func_idx < (int) (sizeof(test_funcs)/sizeof(TestWrapper_t))) {",
          "        fp = test_funcs[func_idx];"
        ]
      },
      "Suggestion": "Consider passing 'test_funcs' explicitly as argument to the function 'check_test' and use that argument instead; use the 'restrict' keyword for 'test_funcs' to hint the compiler that it is free of aliasing",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR001"
    },
    {
      "Check": "PWR001",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/build/tests/test_suite_ctr_drbg.c:1391:1",
      "Title": "Declare global variables as function parameters",
      "RelatedCodeList": {
        "Subtitle": "Usages",
        "Code": [
          "    if (platform == NULL) {",
          "        platform = getenv(\"MBEDTLS_TEST_PLATFORM\");",
          "        if (platform == NULL) {",
          "            platform = \"unknown\";",
          "    if (configuration == NULL) {",
          "        configuration = getenv(\"MBEDTLS_TEST_CONFIGURATION\");",
          "        if (configuration == NULL) {",
          "            configuration = \"unknown\";",
          "    if (test_suite == NULL) {",
          "        test_suite = strrchr(argv0, '/');",
          "        if (test_suite != NULL) {",
          "            test_suite += 1; // skip the '/'",
          "            test_suite = argv0;",
          "                    platform, configuration, test_suite, test_case);"
        ]
      },
      "Suggestion": "Consider passing 'platform', 'configuration' and 'test_suite' explicitly as arguments to the function 'write_outcome_entry' and use those arguments instead; use the 'restrict' keyword for 'platform', 'configuration' and 'test_suite' to hint the compiler that they are free of aliasing if you can guarantee it",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR001"
    },
    {
      "Check": "PWR001",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/build/tests/test_suite_debug.c:659:1",
      "Title": "Declare global variables as function parameters",
      "RelatedCodeList": {
        "Subtitle": "Usages",
        "Code": [
          "    if (func_idx < (int) (sizeof(test_funcs) / sizeof(TestWrapper_t))) {",
          "        fp = test_funcs[func_idx];"
        ]
      },
      "Suggestion": "Consider passing 'test_funcs' explicitly as argument to the function 'dispatch_test' and use that argument instead; use the 'restrict' keyword for 'test_funcs' to hint the compiler that it is free of aliasing",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR001"
    },
    {
      "Check": "PWR001",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/build/tests/test_suite_debug.c:697:1",
      "Title": "Declare global variables as function parameters",
      "RelatedCodeList": {
        "Subtitle": "Usages",
        "Code": [
          "    if (func_idx < (int) (sizeof(test_funcs)/sizeof(TestWrapper_t))) {",
          "        fp = test_funcs[func_idx];"
        ]
      },
      "Suggestion": "Consider passing 'test_funcs' explicitly as argument to the function 'check_test' and use that argument instead; use the 'restrict' keyword for 'test_funcs' to hint the compiler that it is free of aliasing",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR001"
    },
    {
      "Check": "PWR001",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/build/tests/test_suite_debug.c:1039:1",
      "Title": "Declare global variables as function parameters",
      "RelatedCodeList": {
        "Subtitle": "Usages",
        "Code": [
          "    if (platform == NULL) {",
          "        platform = getenv(\"MBEDTLS_TEST_PLATFORM\");",
          "        if (platform == NULL) {",
          "            platform = \"unknown\";",
          "    if (configuration == NULL) {",
          "        configuration = getenv(\"MBEDTLS_TEST_CONFIGURATION\");",
          "        if (configuration == NULL) {",
          "            configuration = \"unknown\";",
          "    if (test_suite == NULL) {",
          "        test_suite = strrchr(argv0, '/');",
          "        if (test_suite != NULL) {",
          "            test_suite += 1; // skip the '/'",
          "            test_suite = argv0;",
          "                    platform, configuration, test_suite, test_case);"
        ]
      },
      "Suggestion": "Consider passing 'platform', 'configuration' and 'test_suite' explicitly as arguments to the function 'write_outcome_entry' and use those arguments instead; use the 'restrict' keyword for 'platform', 'configuration' and 'test_suite' to hint the compiler that they are free of aliasing if you can guarantee it",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR001"
    },
    {
      "Check": "PWR001",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/build/tests/test_suite_des.c:727:1",
      "Title": "Declare global variables as function parameters",
      "RelatedCodeList": {
        "Subtitle": "Usages",
        "Code": [
          "    if (func_idx < (int) (sizeof(test_funcs) / sizeof(TestWrapper_t))) {",
          "        fp = test_funcs[func_idx];"
        ]
      },
      "Suggestion": "Consider passing 'test_funcs' explicitly as argument to the function 'dispatch_test' and use that argument instead; use the 'restrict' keyword for 'test_funcs' to hint the compiler that it is free of aliasing",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR001"
    },
    {
      "Check": "PWR001",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/build/tests/test_suite_des.c:765:1",
      "Title": "Declare global variables as function parameters",
      "RelatedCodeList": {
        "Subtitle": "Usages",
        "Code": [
          "    if (func_idx < (int) (sizeof(test_funcs)/sizeof(TestWrapper_t))) {",
          "        fp = test_funcs[func_idx];"
        ]
      },
      "Suggestion": "Consider passing 'test_funcs' explicitly as argument to the function 'check_test' and use that argument instead; use the 'restrict' keyword for 'test_funcs' to hint the compiler that it is free of aliasing",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR001"
    },
    {
      "Check": "PWR001",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/build/tests/test_suite_des.c:1107:1",
      "Title": "Declare global variables as function parameters",
      "RelatedCodeList": {
        "Subtitle": "Usages",
        "Code": [
          "    if (platform == NULL) {",
          "        platform = getenv(\"MBEDTLS_TEST_PLATFORM\");",
          "        if (platform == NULL) {",
          "            platform = \"unknown\";",
          "    if (configuration == NULL) {",
          "        configuration = getenv(\"MBEDTLS_TEST_CONFIGURATION\");",
          "        if (configuration == NULL) {",
          "            configuration = \"unknown\";",
          "    if (test_suite == NULL) {",
          "        test_suite = strrchr(argv0, '/');",
          "        if (test_suite != NULL) {",
          "            test_suite += 1; // skip the '/'",
          "            test_suite = argv0;",
          "                    platform, configuration, test_suite, test_case);"
        ]
      },
      "Suggestion": "Consider passing 'platform', 'configuration' and 'test_suite' explicitly as arguments to the function 'write_outcome_entry' and use those arguments instead; use the 'restrict' keyword for 'platform', 'configuration' and 'test_suite' to hint the compiler that they are free of aliasing if you can guarantee it",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR001"
    },
    {
      "Check": "PWR001",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/build/tests/test_suite_dhm.c:653:1",
      "Title": "Declare global variables as function parameters",
      "RelatedCodeList": {
        "Subtitle": "Usages",
        "Code": [
          "    if (func_idx < (int) (sizeof(test_funcs) / sizeof(TestWrapper_t))) {",
          "        fp = test_funcs[func_idx];"
        ]
      },
      "Suggestion": "Consider passing 'test_funcs' explicitly as argument to the function 'dispatch_test' and use that argument instead; use the 'restrict' keyword for 'test_funcs' to hint the compiler that it is free of aliasing",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR001"
    },
    {
      "Check": "PWR001",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/build/tests/test_suite_dhm.c:691:1",
      "Title": "Declare global variables as function parameters",
      "RelatedCodeList": {
        "Subtitle": "Usages",
        "Code": [
          "    if (func_idx < (int) (sizeof(test_funcs)/sizeof(TestWrapper_t))) {",
          "        fp = test_funcs[func_idx];"
        ]
      },
      "Suggestion": "Consider passing 'test_funcs' explicitly as argument to the function 'check_test' and use that argument instead; use the 'restrict' keyword for 'test_funcs' to hint the compiler that it is free of aliasing",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR001"
    },
    {
      "Check": "PWR001",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/build/tests/test_suite_dhm.c:1033:1",
      "Title": "Declare global variables as function parameters",
      "RelatedCodeList": {
        "Subtitle": "Usages",
        "Code": [
          "    if (platform == NULL) {",
          "        platform = getenv(\"MBEDTLS_TEST_PLATFORM\");",
          "        if (platform == NULL) {",
          "            platform = \"unknown\";",
          "    if (configuration == NULL) {",
          "        configuration = getenv(\"MBEDTLS_TEST_CONFIGURATION\");",
          "        if (configuration == NULL) {",
          "            configuration = \"unknown\";",
          "    if (test_suite == NULL) {",
          "        test_suite = strrchr(argv0, '/');",
          "        if (test_suite != NULL) {",
          "            test_suite += 1; // skip the '/'",
          "            test_suite = argv0;",
          "                    platform, configuration, test_suite, test_case);"
        ]
      },
      "Suggestion": "Consider passing 'platform', 'configuration' and 'test_suite' explicitly as arguments to the function 'write_outcome_entry' and use those arguments instead; use the 'restrict' keyword for 'platform', 'configuration' and 'test_suite' to hint the compiler that they are free of aliasing if you can guarantee it",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR001"
    },
    {
      "Check": "PWR001",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/build/tests/test_suite_ecdh.c:933:1",
      "Title": "Declare global variables as function parameters",
      "RelatedCodeList": {
        "Subtitle": "Usages",
        "Code": [
          "    if (func_idx < (int) (sizeof(test_funcs) / sizeof(TestWrapper_t))) {",
          "        fp = test_funcs[func_idx];"
        ]
      },
      "Suggestion": "Consider passing 'test_funcs' explicitly as argument to the function 'dispatch_test' and use that argument instead; use the 'restrict' keyword for 'test_funcs' to hint the compiler that it is free of aliasing",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR001"
    },
    {
      "Check": "PWR001",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/build/tests/test_suite_ecdh.c:971:1",
      "Title": "Declare global variables as function parameters",
      "RelatedCodeList": {
        "Subtitle": "Usages",
        "Code": [
          "    if (func_idx < (int) (sizeof(test_funcs)/sizeof(TestWrapper_t))) {",
          "        fp = test_funcs[func_idx];"
        ]
      },
      "Suggestion": "Consider passing 'test_funcs' explicitly as argument to the function 'check_test' and use that argument instead; use the 'restrict' keyword for 'test_funcs' to hint the compiler that it is free of aliasing",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR001"
    },
    {
      "Check": "PWR001",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/build/tests/test_suite_ecdh.c:1313:1",
      "Title": "Declare global variables as function parameters",
      "RelatedCodeList": {
        "Subtitle": "Usages",
        "Code": [
          "    if (platform == NULL) {",
          "        platform = getenv(\"MBEDTLS_TEST_PLATFORM\");",
          "        if (platform == NULL) {",
          "            platform = \"unknown\";",
          "    if (configuration == NULL) {",
          "        configuration = getenv(\"MBEDTLS_TEST_CONFIGURATION\");",
          "        if (configuration == NULL) {",
          "            configuration = \"unknown\";",
          "    if (test_suite == NULL) {",
          "        test_suite = strrchr(argv0, '/');",
          "        if (test_suite != NULL) {",
          "            test_suite += 1; // skip the '/'",
          "            test_suite = argv0;",
          "                    platform, configuration, test_suite, test_case);"
        ]
      },
      "Suggestion": "Consider passing 'platform', 'configuration' and 'test_suite' explicitly as arguments to the function 'write_outcome_entry' and use those arguments instead; use the 'restrict' keyword for 'platform', 'configuration' and 'test_suite' to hint the compiler that they are free of aliasing if you can guarantee it",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR001"
    },
    {
      "Check": "PWR001",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/build/tests/test_suite_ecdsa.c:1088:1",
      "Title": "Declare global variables as function parameters",
      "RelatedCodeList": {
        "Subtitle": "Usages",
        "Code": [
          "    if (func_idx < (int) (sizeof(test_funcs) / sizeof(TestWrapper_t))) {",
          "        fp = test_funcs[func_idx];"
        ]
      },
      "Suggestion": "Consider passing 'test_funcs' explicitly as argument to the function 'dispatch_test' and use that argument instead; use the 'restrict' keyword for 'test_funcs' to hint the compiler that it is free of aliasing",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR001"
    },
    {
      "Check": "PWR001",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/build/tests/test_suite_ecdsa.c:1126:1",
      "Title": "Declare global variables as function parameters",
      "RelatedCodeList": {
        "Subtitle": "Usages",
        "Code": [
          "    if (func_idx < (int) (sizeof(test_funcs)/sizeof(TestWrapper_t))) {",
          "        fp = test_funcs[func_idx];"
        ]
      },
      "Suggestion": "Consider passing 'test_funcs' explicitly as argument to the function 'check_test' and use that argument instead; use the 'restrict' keyword for 'test_funcs' to hint the compiler that it is free of aliasing",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR001"
    },
    {
      "Check": "PWR001",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/build/tests/test_suite_ecdsa.c:1468:1",
      "Title": "Declare global variables as function parameters",
      "RelatedCodeList": {
        "Subtitle": "Usages",
        "Code": [
          "    if (platform == NULL) {",
          "        platform = getenv(\"MBEDTLS_TEST_PLATFORM\");",
          "        if (platform == NULL) {",
          "            platform = \"unknown\";",
          "    if (configuration == NULL) {",
          "        configuration = getenv(\"MBEDTLS_TEST_CONFIGURATION\");",
          "        if (configuration == NULL) {",
          "            configuration = \"unknown\";",
          "    if (test_suite == NULL) {",
          "        test_suite = strrchr(argv0, '/');",
          "        if (test_suite != NULL) {",
          "            test_suite += 1; // skip the '/'",
          "            test_suite = argv0;",
          "                    platform, configuration, test_suite, test_case);"
        ]
      },
      "Suggestion": "Consider passing 'platform', 'configuration' and 'test_suite' explicitly as arguments to the function 'write_outcome_entry' and use those arguments instead; use the 'restrict' keyword for 'platform', 'configuration' and 'test_suite' to hint the compiler that they are free of aliasing if you can guarantee it",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR001"
    },
    {
      "Check": "PWR001",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/build/tests/test_suite_ecjpake.c:375:1",
      "Title": "Declare global variables as function parameters",
      "RelatedCodeList": {
        "Subtitle": "Usages",
        "Code": [
          "                                  ADD_SIZE(ecjpake_test_x1), ADD_SIZE(ecjpake_test_x2),",
          "                                  ADD_SIZE(ecjpake_test_X1), ADD_SIZE(ecjpake_test_X2),",
          "                                  ADD_SIZE(ecjpake_test_X3), ADD_SIZE(ecjpake_test_X4))"
        ]
      },
      "Suggestion": "Consider passing 'ecjpake_test_x1', 'ecjpake_test_x2', 'ecjpake_test_X1', 'ecjpake_test_X2', 'ecjpake_test_X3' and 'ecjpake_test_X4' explicitly as arguments to the function 'test_read_round_two_cli' and use those arguments instead; use the 'restrict' keyword for 'ecjpake_test_x1', 'ecjpake_test_x2', 'ecjpake_test_X1', 'ecjpake_test_X2', 'ecjpake_test_X3' and 'ecjpake_test_X4' to hint the compiler that they are free of aliasing",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR001"
    },
    {
      "Check": "PWR001",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/build/tests/test_suite_ecjpake.c:413:1",
      "Title": "Declare global variables as function parameters",
      "RelatedCodeList": {
        "Subtitle": "Usages",
        "Code": [
          "                                  ADD_SIZE(ecjpake_test_x3), ADD_SIZE(ecjpake_test_x4),",
          "                                  ADD_SIZE(ecjpake_test_X3), ADD_SIZE(ecjpake_test_X4),",
          "                                  ADD_SIZE(ecjpake_test_X1), ADD_SIZE(ecjpake_test_X2))"
        ]
      },
      "Suggestion": "Consider passing 'ecjpake_test_x3', 'ecjpake_test_x4', 'ecjpake_test_X3', 'ecjpake_test_X4', 'ecjpake_test_X1' and 'ecjpake_test_X2' explicitly as arguments to the function 'test_read_round_two_srv' and use those arguments instead; use the 'restrict' keyword for 'ecjpake_test_x3', 'ecjpake_test_x4', 'ecjpake_test_X3', 'ecjpake_test_X4', 'ecjpake_test_X1' and 'ecjpake_test_X2' to hint the compiler that they are free of aliasing",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR001"
    },
    {
      "Check": "PWR001",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/build/tests/test_suite_ecjpake.c:636:1",
      "Title": "Declare global variables as function parameters",
      "RelatedCodeList": {
        "Subtitle": "Usages",
        "Code": [
          "    if (func_idx < (int) (sizeof(test_funcs) / sizeof(TestWrapper_t))) {",
          "        fp = test_funcs[func_idx];"
        ]
      },
      "Suggestion": "Consider passing 'test_funcs' explicitly as argument to the function 'dispatch_test' and use that argument instead; use the 'restrict' keyword for 'test_funcs' to hint the compiler that it is free of aliasing",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR001"
    },
    {
      "Check": "PWR001",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/build/tests/test_suite_ecjpake.c:674:1",
      "Title": "Declare global variables as function parameters",
      "RelatedCodeList": {
        "Subtitle": "Usages",
        "Code": [
          "    if (func_idx < (int) (sizeof(test_funcs)/sizeof(TestWrapper_t))) {",
          "        fp = test_funcs[func_idx];"
        ]
      },
      "Suggestion": "Consider passing 'test_funcs' explicitly as argument to the function 'check_test' and use that argument instead; use the 'restrict' keyword for 'test_funcs' to hint the compiler that it is free of aliasing",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR001"
    },
    {
      "Check": "PWR001",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/build/tests/test_suite_ecjpake.c:1016:1",
      "Title": "Declare global variables as function parameters",
      "RelatedCodeList": {
        "Subtitle": "Usages",
        "Code": [
          "    if (platform == NULL) {",
          "        platform = getenv(\"MBEDTLS_TEST_PLATFORM\");",
          "        if (platform == NULL) {",
          "            platform = \"unknown\";",
          "    if (configuration == NULL) {",
          "        configuration = getenv(\"MBEDTLS_TEST_CONFIGURATION\");",
          "        if (configuration == NULL) {",
          "            configuration = \"unknown\";",
          "    if (test_suite == NULL) {",
          "        test_suite = strrchr(argv0, '/');",
          "        if (test_suite != NULL) {",
          "            test_suite += 1; // skip the '/'",
          "            test_suite = argv0;",
          "                    platform, configuration, test_suite, test_case);"
        ]
      },
      "Suggestion": "Consider passing 'platform', 'configuration' and 'test_suite' explicitly as arguments to the function 'write_outcome_entry' and use those arguments instead; use the 'restrict' keyword for 'platform', 'configuration' and 'test_suite' to hint the compiler that they are free of aliasing if you can guarantee it",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR001"
    },
    {
      "Check": "PWR001",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/build/tests/test_suite_ecp.c:2904:1",
      "Title": "Declare global variables as function parameters",
      "RelatedCodeList": {
        "Subtitle": "Usages",
        "Code": [
          "    if (func_idx < (int) (sizeof(test_funcs) / sizeof(TestWrapper_t))) {",
          "        fp = test_funcs[func_idx];"
        ]
      },
      "Suggestion": "Consider passing 'test_funcs' explicitly as argument to the function 'dispatch_test' and use that argument instead; use the 'restrict' keyword for 'test_funcs' to hint the compiler that it is free of aliasing",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR001"
    },
    {
      "Check": "PWR001",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/build/tests/test_suite_ecp.c:2942:1",
      "Title": "Declare global variables as function parameters",
      "RelatedCodeList": {
        "Subtitle": "Usages",
        "Code": [
          "    if (func_idx < (int) (sizeof(test_funcs)/sizeof(TestWrapper_t))) {",
          "        fp = test_funcs[func_idx];"
        ]
      },
      "Suggestion": "Consider passing 'test_funcs' explicitly as argument to the function 'check_test' and use that argument instead; use the 'restrict' keyword for 'test_funcs' to hint the compiler that it is free of aliasing",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR001"
    },
    {
      "Check": "PWR001",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/build/tests/test_suite_ecp.c:3284:1",
      "Title": "Declare global variables as function parameters",
      "RelatedCodeList": {
        "Subtitle": "Usages",
        "Code": [
          "    if (platform == NULL) {",
          "        platform = getenv(\"MBEDTLS_TEST_PLATFORM\");",
          "        if (platform == NULL) {",
          "            platform = \"unknown\";",
          "    if (configuration == NULL) {",
          "        configuration = getenv(\"MBEDTLS_TEST_CONFIGURATION\");",
          "        if (configuration == NULL) {",
          "            configuration = \"unknown\";",
          "    if (test_suite == NULL) {",
          "        test_suite = strrchr(argv0, '/');",
          "        if (test_suite != NULL) {",
          "            test_suite += 1; // skip the '/'",
          "            test_suite = argv0;",
          "                    platform, configuration, test_suite, test_case);"
        ]
      },
      "Suggestion": "Consider passing 'platform', 'configuration' and 'test_suite' explicitly as arguments to the function 'write_outcome_entry' and use those arguments instead; use the 'restrict' keyword for 'platform', 'configuration' and 'test_suite' to hint the compiler that they are free of aliasing if you can guarantee it",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR001"
    },
    {
      "Check": "PWR001",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/build/tests/test_suite_ecp.generated.c:2783:1",
      "Title": "Declare global variables as function parameters",
      "RelatedCodeList": {
        "Subtitle": "Usages",
        "Code": [
          "    if (func_idx < (int) (sizeof(test_funcs) / sizeof(TestWrapper_t))) {",
          "        fp = test_funcs[func_idx];"
        ]
      },
      "Suggestion": "Consider passing 'test_funcs' explicitly as argument to the function 'dispatch_test' and use that argument instead; use the 'restrict' keyword for 'test_funcs' to hint the compiler that it is free of aliasing",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR001"
    },
    {
      "Check": "PWR001",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/build/tests/test_suite_ecp.generated.c:2821:1",
      "Title": "Declare global variables as function parameters",
      "RelatedCodeList": {
        "Subtitle": "Usages",
        "Code": [
          "    if (func_idx < (int) (sizeof(test_funcs)/sizeof(TestWrapper_t))) {",
          "        fp = test_funcs[func_idx];"
        ]
      },
      "Suggestion": "Consider passing 'test_funcs' explicitly as argument to the function 'check_test' and use that argument instead; use the 'restrict' keyword for 'test_funcs' to hint the compiler that it is free of aliasing",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR001"
    },
    {
      "Check": "PWR001",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/build/tests/test_suite_ecp.generated.c:3163:1",
      "Title": "Declare global variables as function parameters",
      "RelatedCodeList": {
        "Subtitle": "Usages",
        "Code": [
          "    if (platform == NULL) {",
          "        platform = getenv(\"MBEDTLS_TEST_PLATFORM\");",
          "        if (platform == NULL) {",
          "            platform = \"unknown\";",
          "    if (configuration == NULL) {",
          "        configuration = getenv(\"MBEDTLS_TEST_CONFIGURATION\");",
          "        if (configuration == NULL) {",
          "            configuration = \"unknown\";",
          "    if (test_suite == NULL) {",
          "        test_suite = strrchr(argv0, '/');",
          "        if (test_suite != NULL) {",
          "            test_suite += 1; // skip the '/'",
          "            test_suite = argv0;",
          "                    platform, configuration, test_suite, test_case);"
        ]
      },
      "Suggestion": "Consider passing 'platform', 'configuration' and 'test_suite' explicitly as arguments to the function 'write_outcome_entry' and use those arguments instead; use the 'restrict' keyword for 'platform', 'configuration' and 'test_suite' to hint the compiler that they are free of aliasing if you can guarantee it",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR001"
    },
    {
      "Check": "PWR001",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/build/tests/test_suite_entropy.c:1060:1",
      "Title": "Declare global variables as function parameters",
      "RelatedCodeList": {
        "Subtitle": "Usages",
        "Code": [
          "    if (func_idx < (int) (sizeof(test_funcs) / sizeof(TestWrapper_t))) {",
          "        fp = test_funcs[func_idx];"
        ]
      },
      "Suggestion": "Consider passing 'test_funcs' explicitly as argument to the function 'dispatch_test' and use that argument instead; use the 'restrict' keyword for 'test_funcs' to hint the compiler that it is free of aliasing",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR001"
    },
    {
      "Check": "PWR001",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/build/tests/test_suite_entropy.c:1098:1",
      "Title": "Declare global variables as function parameters",
      "RelatedCodeList": {
        "Subtitle": "Usages",
        "Code": [
          "    if (func_idx < (int) (sizeof(test_funcs)/sizeof(TestWrapper_t))) {",
          "        fp = test_funcs[func_idx];"
        ]
      },
      "Suggestion": "Consider passing 'test_funcs' explicitly as argument to the function 'check_test' and use that argument instead; use the 'restrict' keyword for 'test_funcs' to hint the compiler that it is free of aliasing",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR001"
    },
    {
      "Check": "PWR001",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/build/tests/test_suite_entropy.c:1440:1",
      "Title": "Declare global variables as function parameters",
      "RelatedCodeList": {
        "Subtitle": "Usages",
        "Code": [
          "    if (platform == NULL) {",
          "        platform = getenv(\"MBEDTLS_TEST_PLATFORM\");",
          "        if (platform == NULL) {",
          "            platform = \"unknown\";",
          "    if (configuration == NULL) {",
          "        configuration = getenv(\"MBEDTLS_TEST_CONFIGURATION\");",
          "        if (configuration == NULL) {",
          "            configuration = \"unknown\";",
          "    if (test_suite == NULL) {",
          "        test_suite = strrchr(argv0, '/');",
          "        if (test_suite != NULL) {",
          "            test_suite += 1; // skip the '/'",
          "            test_suite = argv0;",
          "                    platform, configuration, test_suite, test_case);"
        ]
      },
      "Suggestion": "Consider passing 'platform', 'configuration' and 'test_suite' explicitly as arguments to the function 'write_outcome_entry' and use those arguments instead; use the 'restrict' keyword for 'platform', 'configuration' and 'test_suite' to hint the compiler that they are free of aliasing if you can guarantee it",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR001"
    },
    {
      "Check": "PWR001",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/build/tests/test_suite_error.c:326:1",
      "Title": "Declare global variables as function parameters",
      "RelatedCodeList": {
        "Subtitle": "Usages",
        "Code": [
          "    if (func_idx < (int) (sizeof(test_funcs) / sizeof(TestWrapper_t))) {",
          "        fp = test_funcs[func_idx];"
        ]
      },
      "Suggestion": "Consider passing 'test_funcs' explicitly as argument to the function 'dispatch_test' and use that argument instead; use the 'restrict' keyword for 'test_funcs' to hint the compiler that it is free of aliasing",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR001"
    },
    {
      "Check": "PWR001",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/build/tests/test_suite_error.c:364:1",
      "Title": "Declare global variables as function parameters",
      "RelatedCodeList": {
        "Subtitle": "Usages",
        "Code": [
          "    if (func_idx < (int) (sizeof(test_funcs)/sizeof(TestWrapper_t))) {",
          "        fp = test_funcs[func_idx];"
        ]
      },
      "Suggestion": "Consider passing 'test_funcs' explicitly as argument to the function 'check_test' and use that argument instead; use the 'restrict' keyword for 'test_funcs' to hint the compiler that it is free of aliasing",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR001"
    },
    {
      "Check": "PWR001",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/build/tests/test_suite_error.c:706:1",
      "Title": "Declare global variables as function parameters",
      "RelatedCodeList": {
        "Subtitle": "Usages",
        "Code": [
          "    if (platform == NULL) {",
          "        platform = getenv(\"MBEDTLS_TEST_PLATFORM\");",
          "        if (platform == NULL) {",
          "            platform = \"unknown\";",
          "    if (configuration == NULL) {",
          "        configuration = getenv(\"MBEDTLS_TEST_CONFIGURATION\");",
          "        if (configuration == NULL) {",
          "            configuration = \"unknown\";",
          "    if (test_suite == NULL) {",
          "        test_suite = strrchr(argv0, '/');",
          "        if (test_suite != NULL) {",
          "            test_suite += 1; // skip the '/'",
          "            test_suite = argv0;",
          "                    platform, configuration, test_suite, test_case);"
        ]
      },
      "Suggestion": "Consider passing 'platform', 'configuration' and 'test_suite' explicitly as arguments to the function 'write_outcome_entry' and use those arguments instead; use the 'restrict' keyword for 'platform', 'configuration' and 'test_suite' to hint the compiler that they are free of aliasing if you can guarantee it",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR001"
    },
    {
      "Check": "PWR001",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/build/tests/test_suite_gcm.aes128_de.c:1140:1",
      "Title": "Declare global variables as function parameters",
      "RelatedCodeList": {
        "Subtitle": "Usages",
        "Code": [
          "    if (func_idx < (int) (sizeof(test_funcs) / sizeof(TestWrapper_t))) {",
          "        fp = test_funcs[func_idx];"
        ]
      },
      "Suggestion": "Consider passing 'test_funcs' explicitly as argument to the function 'dispatch_test' and use that argument instead; use the 'restrict' keyword for 'test_funcs' to hint the compiler that it is free of aliasing",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR001"
    },
    {
      "Check": "PWR001",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/build/tests/test_suite_gcm.aes128_de.c:1178:1",
      "Title": "Declare global variables as function parameters",
      "RelatedCodeList": {
        "Subtitle": "Usages",
        "Code": [
          "    if (func_idx < (int) (sizeof(test_funcs)/sizeof(TestWrapper_t))) {",
          "        fp = test_funcs[func_idx];"
        ]
      },
      "Suggestion": "Consider passing 'test_funcs' explicitly as argument to the function 'check_test' and use that argument instead; use the 'restrict' keyword for 'test_funcs' to hint the compiler that it is free of aliasing",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR001"
    },
    {
      "Check": "PWR001",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/build/tests/test_suite_gcm.aes128_de.c:1520:1",
      "Title": "Declare global variables as function parameters",
      "RelatedCodeList": {
        "Subtitle": "Usages",
        "Code": [
          "    if (platform == NULL) {",
          "        platform = getenv(\"MBEDTLS_TEST_PLATFORM\");",
          "        if (platform == NULL) {",
          "            platform = \"unknown\";",
          "    if (configuration == NULL) {",
          "        configuration = getenv(\"MBEDTLS_TEST_CONFIGURATION\");",
          "        if (configuration == NULL) {",
          "            configuration = \"unknown\";",
          "    if (test_suite == NULL) {",
          "        test_suite = strrchr(argv0, '/');",
          "        if (test_suite != NULL) {",
          "            test_suite += 1; // skip the '/'",
          "            test_suite = argv0;",
          "                    platform, configuration, test_suite, test_case);"
        ]
      },
      "Suggestion": "Consider passing 'platform', 'configuration' and 'test_suite' explicitly as arguments to the function 'write_outcome_entry' and use those arguments instead; use the 'restrict' keyword for 'platform', 'configuration' and 'test_suite' to hint the compiler that they are free of aliasing if you can guarantee it",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR001"
    },
    {
      "Check": "PWR001",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/build/tests/test_suite_gcm.aes128_en.c:1140:1",
      "Title": "Declare global variables as function parameters",
      "RelatedCodeList": {
        "Subtitle": "Usages",
        "Code": [
          "    if (func_idx < (int) (sizeof(test_funcs) / sizeof(TestWrapper_t))) {",
          "        fp = test_funcs[func_idx];"
        ]
      },
      "Suggestion": "Consider passing 'test_funcs' explicitly as argument to the function 'dispatch_test' and use that argument instead; use the 'restrict' keyword for 'test_funcs' to hint the compiler that it is free of aliasing",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR001"
    },
    {
      "Check": "PWR001",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/build/tests/test_suite_gcm.aes128_en.c:1178:1",
      "Title": "Declare global variables as function parameters",
      "RelatedCodeList": {
        "Subtitle": "Usages",
        "Code": [
          "    if (func_idx < (int) (sizeof(test_funcs)/sizeof(TestWrapper_t))) {",
          "        fp = test_funcs[func_idx];"
        ]
      },
      "Suggestion": "Consider passing 'test_funcs' explicitly as argument to the function 'check_test' and use that argument instead; use the 'restrict' keyword for 'test_funcs' to hint the compiler that it is free of aliasing",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR001"
    },
    {
      "Check": "PWR001",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/build/tests/test_suite_gcm.aes128_en.c:1520:1",
      "Title": "Declare global variables as function parameters",
      "RelatedCodeList": {
        "Subtitle": "Usages",
        "Code": [
          "    if (platform == NULL) {",
          "        platform = getenv(\"MBEDTLS_TEST_PLATFORM\");",
          "        if (platform == NULL) {",
          "            platform = \"unknown\";",
          "    if (configuration == NULL) {",
          "        configuration = getenv(\"MBEDTLS_TEST_CONFIGURATION\");",
          "        if (configuration == NULL) {",
          "            configuration = \"unknown\";",
          "    if (test_suite == NULL) {",
          "        test_suite = strrchr(argv0, '/');",
          "        if (test_suite != NULL) {",
          "            test_suite += 1; // skip the '/'",
          "            test_suite = argv0;",
          "                    platform, configuration, test_suite, test_case);"
        ]
      },
      "Suggestion": "Consider passing 'platform', 'configuration' and 'test_suite' explicitly as arguments to the function 'write_outcome_entry' and use those arguments instead; use the 'restrict' keyword for 'platform', 'configuration' and 'test_suite' to hint the compiler that they are free of aliasing if you can guarantee it",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR001"
    },
    {
      "Check": "PWR001",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/build/tests/test_suite_gcm.aes192_de.c:1149:1",
      "Title": "Declare global variables as function parameters",
      "RelatedCodeList": {
        "Subtitle": "Usages",
        "Code": [
          "    if (func_idx < (int) (sizeof(test_funcs) / sizeof(TestWrapper_t))) {",
          "        fp = test_funcs[func_idx];"
        ]
      },
      "Suggestion": "Consider passing 'test_funcs' explicitly as argument to the function 'dispatch_test' and use that argument instead; use the 'restrict' keyword for 'test_funcs' to hint the compiler that it is free of aliasing",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR001"
    },
    {
      "Check": "PWR001",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/build/tests/test_suite_gcm.aes192_de.c:1187:1",
      "Title": "Declare global variables as function parameters",
      "RelatedCodeList": {
        "Subtitle": "Usages",
        "Code": [
          "    if (func_idx < (int) (sizeof(test_funcs)/sizeof(TestWrapper_t))) {",
          "        fp = test_funcs[func_idx];"
        ]
      },
      "Suggestion": "Consider passing 'test_funcs' explicitly as argument to the function 'check_test' and use that argument instead; use the 'restrict' keyword for 'test_funcs' to hint the compiler that it is free of aliasing",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR001"
    },
    {
      "Check": "PWR001",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/build/tests/test_suite_gcm.aes192_de.c:1529:1",
      "Title": "Declare global variables as function parameters",
      "RelatedCodeList": {
        "Subtitle": "Usages",
        "Code": [
          "    if (platform == NULL) {",
          "        platform = getenv(\"MBEDTLS_TEST_PLATFORM\");",
          "        if (platform == NULL) {",
          "            platform = \"unknown\";",
          "    if (configuration == NULL) {",
          "        configuration = getenv(\"MBEDTLS_TEST_CONFIGURATION\");",
          "        if (configuration == NULL) {",
          "            configuration = \"unknown\";",
          "    if (test_suite == NULL) {",
          "        test_suite = strrchr(argv0, '/');",
          "        if (test_suite != NULL) {",
          "            test_suite += 1; // skip the '/'",
          "            test_suite = argv0;",
          "                    platform, configuration, test_suite, test_case);"
        ]
      },
      "Suggestion": "Consider passing 'platform', 'configuration' and 'test_suite' explicitly as arguments to the function 'write_outcome_entry' and use those arguments instead; use the 'restrict' keyword for 'platform', 'configuration' and 'test_suite' to hint the compiler that they are free of aliasing if you can guarantee it",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR001"
    },
    {
      "Check": "PWR001",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/build/tests/test_suite_gcm.aes192_en.c:1149:1",
      "Title": "Declare global variables as function parameters",
      "RelatedCodeList": {
        "Subtitle": "Usages",
        "Code": [
          "    if (func_idx < (int) (sizeof(test_funcs) / sizeof(TestWrapper_t))) {",
          "        fp = test_funcs[func_idx];"
        ]
      },
      "Suggestion": "Consider passing 'test_funcs' explicitly as argument to the function 'dispatch_test' and use that argument instead; use the 'restrict' keyword for 'test_funcs' to hint the compiler that it is free of aliasing",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR001"
    },
    {
      "Check": "PWR001",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/build/tests/test_suite_gcm.aes192_en.c:1187:1",
      "Title": "Declare global variables as function parameters",
      "RelatedCodeList": {
        "Subtitle": "Usages",
        "Code": [
          "    if (func_idx < (int) (sizeof(test_funcs)/sizeof(TestWrapper_t))) {",
          "        fp = test_funcs[func_idx];"
        ]
      },
      "Suggestion": "Consider passing 'test_funcs' explicitly as argument to the function 'check_test' and use that argument instead; use the 'restrict' keyword for 'test_funcs' to hint the compiler that it is free of aliasing",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR001"
    },
    {
      "Check": "PWR001",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/build/tests/test_suite_gcm.aes192_en.c:1529:1",
      "Title": "Declare global variables as function parameters",
      "RelatedCodeList": {
        "Subtitle": "Usages",
        "Code": [
          "    if (platform == NULL) {",
          "        platform = getenv(\"MBEDTLS_TEST_PLATFORM\");",
          "        if (platform == NULL) {",
          "            platform = \"unknown\";",
          "    if (configuration == NULL) {",
          "        configuration = getenv(\"MBEDTLS_TEST_CONFIGURATION\");",
          "        if (configuration == NULL) {",
          "            configuration = \"unknown\";",
          "    if (test_suite == NULL) {",
          "        test_suite = strrchr(argv0, '/');",
          "        if (test_suite != NULL) {",
          "            test_suite += 1; // skip the '/'",
          "            test_suite = argv0;",
          "                    platform, configuration, test_suite, test_case);"
        ]
      },
      "Suggestion": "Consider passing 'platform', 'configuration' and 'test_suite' explicitly as arguments to the function 'write_outcome_entry' and use those arguments instead; use the 'restrict' keyword for 'platform', 'configuration' and 'test_suite' to hint the compiler that they are free of aliasing if you can guarantee it",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR001"
    },
    {
      "Check": "PWR001",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/build/tests/test_suite_gcm.aes256_de.c:1149:1",
      "Title": "Declare global variables as function parameters",
      "RelatedCodeList": {
        "Subtitle": "Usages",
        "Code": [
          "    if (func_idx < (int) (sizeof(test_funcs) / sizeof(TestWrapper_t))) {",
          "        fp = test_funcs[func_idx];"
        ]
      },
      "Suggestion": "Consider passing 'test_funcs' explicitly as argument to the function 'dispatch_test' and use that argument instead; use the 'restrict' keyword for 'test_funcs' to hint the compiler that it is free of aliasing",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR001"
    },
    {
      "Check": "PWR001",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/build/tests/test_suite_gcm.aes256_de.c:1187:1",
      "Title": "Declare global variables as function parameters",
      "RelatedCodeList": {
        "Subtitle": "Usages",
        "Code": [
          "    if (func_idx < (int) (sizeof(test_funcs)/sizeof(TestWrapper_t))) {",
          "        fp = test_funcs[func_idx];"
        ]
      },
      "Suggestion": "Consider passing 'test_funcs' explicitly as argument to the function 'check_test' and use that argument instead; use the 'restrict' keyword for 'test_funcs' to hint the compiler that it is free of aliasing",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR001"
    },
    {
      "Check": "PWR001",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/build/tests/test_suite_gcm.aes256_de.c:1529:1",
      "Title": "Declare global variables as function parameters",
      "RelatedCodeList": {
        "Subtitle": "Usages",
        "Code": [
          "    if (platform == NULL) {",
          "        platform = getenv(\"MBEDTLS_TEST_PLATFORM\");",
          "        if (platform == NULL) {",
          "            platform = \"unknown\";",
          "    if (configuration == NULL) {",
          "        configuration = getenv(\"MBEDTLS_TEST_CONFIGURATION\");",
          "        if (configuration == NULL) {",
          "            configuration = \"unknown\";",
          "    if (test_suite == NULL) {",
          "        test_suite = strrchr(argv0, '/');",
          "        if (test_suite != NULL) {",
          "            test_suite += 1; // skip the '/'",
          "            test_suite = argv0;",
          "                    platform, configuration, test_suite, test_case);"
        ]
      },
      "Suggestion": "Consider passing 'platform', 'configuration' and 'test_suite' explicitly as arguments to the function 'write_outcome_entry' and use those arguments instead; use the 'restrict' keyword for 'platform', 'configuration' and 'test_suite' to hint the compiler that they are free of aliasing if you can guarantee it",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR001"
    },
    {
      "Check": "PWR001",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/build/tests/test_suite_gcm.aes256_en.c:1149:1",
      "Title": "Declare global variables as function parameters",
      "RelatedCodeList": {
        "Subtitle": "Usages",
        "Code": [
          "    if (func_idx < (int) (sizeof(test_funcs) / sizeof(TestWrapper_t))) {",
          "        fp = test_funcs[func_idx];"
        ]
      },
      "Suggestion": "Consider passing 'test_funcs' explicitly as argument to the function 'dispatch_test' and use that argument instead; use the 'restrict' keyword for 'test_funcs' to hint the compiler that it is free of aliasing",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR001"
    },
    {
      "Check": "PWR001",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/build/tests/test_suite_gcm.aes256_en.c:1187:1",
      "Title": "Declare global variables as function parameters",
      "RelatedCodeList": {
        "Subtitle": "Usages",
        "Code": [
          "    if (func_idx < (int) (sizeof(test_funcs)/sizeof(TestWrapper_t))) {",
          "        fp = test_funcs[func_idx];"
        ]
      },
      "Suggestion": "Consider passing 'test_funcs' explicitly as argument to the function 'check_test' and use that argument instead; use the 'restrict' keyword for 'test_funcs' to hint the compiler that it is free of aliasing",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR001"
    },
    {
      "Check": "PWR001",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/build/tests/test_suite_gcm.aes256_en.c:1529:1",
      "Title": "Declare global variables as function parameters",
      "RelatedCodeList": {
        "Subtitle": "Usages",
        "Code": [
          "    if (platform == NULL) {",
          "        platform = getenv(\"MBEDTLS_TEST_PLATFORM\");",
          "        if (platform == NULL) {",
          "            platform = \"unknown\";",
          "    if (configuration == NULL) {",
          "        configuration = getenv(\"MBEDTLS_TEST_CONFIGURATION\");",
          "        if (configuration == NULL) {",
          "            configuration = \"unknown\";",
          "    if (test_suite == NULL) {",
          "        test_suite = strrchr(argv0, '/');",
          "        if (test_suite != NULL) {",
          "            test_suite += 1; // skip the '/'",
          "            test_suite = argv0;",
          "                    platform, configuration, test_suite, test_case);"
        ]
      },
      "Suggestion": "Consider passing 'platform', 'configuration' and 'test_suite' explicitly as arguments to the function 'write_outcome_entry' and use those arguments instead; use the 'restrict' keyword for 'platform', 'configuration' and 'test_suite' to hint the compiler that they are free of aliasing if you can guarantee it",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR001"
    },
    {
      "Check": "PWR001",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/build/tests/test_suite_gcm.camellia.c:1130:1",
      "Title": "Declare global variables as function parameters",
      "RelatedCodeList": {
        "Subtitle": "Usages",
        "Code": [
          "    if (func_idx < (int) (sizeof(test_funcs) / sizeof(TestWrapper_t))) {",
          "        fp = test_funcs[func_idx];"
        ]
      },
      "Suggestion": "Consider passing 'test_funcs' explicitly as argument to the function 'dispatch_test' and use that argument instead; use the 'restrict' keyword for 'test_funcs' to hint the compiler that it is free of aliasing",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR001"
    },
    {
      "Check": "PWR001",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/build/tests/test_suite_gcm.camellia.c:1168:1",
      "Title": "Declare global variables as function parameters",
      "RelatedCodeList": {
        "Subtitle": "Usages",
        "Code": [
          "    if (func_idx < (int) (sizeof(test_funcs)/sizeof(TestWrapper_t))) {",
          "        fp = test_funcs[func_idx];"
        ]
      },
      "Suggestion": "Consider passing 'test_funcs' explicitly as argument to the function 'check_test' and use that argument instead; use the 'restrict' keyword for 'test_funcs' to hint the compiler that it is free of aliasing",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR001"
    },
    {
      "Check": "PWR001",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/build/tests/test_suite_gcm.camellia.c:1510:1",
      "Title": "Declare global variables as function parameters",
      "RelatedCodeList": {
        "Subtitle": "Usages",
        "Code": [
          "    if (platform == NULL) {",
          "        platform = getenv(\"MBEDTLS_TEST_PLATFORM\");",
          "        if (platform == NULL) {",
          "            platform = \"unknown\";",
          "    if (configuration == NULL) {",
          "        configuration = getenv(\"MBEDTLS_TEST_CONFIGURATION\");",
          "        if (configuration == NULL) {",
          "            configuration = \"unknown\";",
          "    if (test_suite == NULL) {",
          "        test_suite = strrchr(argv0, '/');",
          "        if (test_suite != NULL) {",
          "            test_suite += 1; // skip the '/'",
          "            test_suite = argv0;",
          "                    platform, configuration, test_suite, test_case);"
        ]
      },
      "Suggestion": "Consider passing 'platform', 'configuration' and 'test_suite' explicitly as arguments to the function 'write_outcome_entry' and use those arguments instead; use the 'restrict' keyword for 'platform', 'configuration' and 'test_suite' to hint the compiler that they are free of aliasing if you can guarantee it",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR001"
    },
    {
      "Check": "PWR001",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/build/tests/test_suite_gcm.misc.c:1134:1",
      "Title": "Declare global variables as function parameters",
      "RelatedCodeList": {
        "Subtitle": "Usages",
        "Code": [
          "    if (func_idx < (int) (sizeof(test_funcs) / sizeof(TestWrapper_t))) {",
          "        fp = test_funcs[func_idx];"
        ]
      },
      "Suggestion": "Consider passing 'test_funcs' explicitly as argument to the function 'dispatch_test' and use that argument instead; use the 'restrict' keyword for 'test_funcs' to hint the compiler that it is free of aliasing",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR001"
    },
    {
      "Check": "PWR001",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/build/tests/test_suite_gcm.misc.c:1172:1",
      "Title": "Declare global variables as function parameters",
      "RelatedCodeList": {
        "Subtitle": "Usages",
        "Code": [
          "    if (func_idx < (int) (sizeof(test_funcs)/sizeof(TestWrapper_t))) {",
          "        fp = test_funcs[func_idx];"
        ]
      },
      "Suggestion": "Consider passing 'test_funcs' explicitly as argument to the function 'check_test' and use that argument instead; use the 'restrict' keyword for 'test_funcs' to hint the compiler that it is free of aliasing",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR001"
    },
    {
      "Check": "PWR001",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/build/tests/test_suite_gcm.misc.c:1514:1",
      "Title": "Declare global variables as function parameters",
      "RelatedCodeList": {
        "Subtitle": "Usages",
        "Code": [
          "    if (platform == NULL) {",
          "        platform = getenv(\"MBEDTLS_TEST_PLATFORM\");",
          "        if (platform == NULL) {",
          "            platform = \"unknown\";",
          "    if (configuration == NULL) {",
          "        configuration = getenv(\"MBEDTLS_TEST_CONFIGURATION\");",
          "        if (configuration == NULL) {",
          "            configuration = \"unknown\";",
          "    if (test_suite == NULL) {",
          "        test_suite = strrchr(argv0, '/');",
          "        if (test_suite != NULL) {",
          "            test_suite += 1; // skip the '/'",
          "            test_suite = argv0;",
          "                    platform, configuration, test_suite, test_case);"
        ]
      },
      "Suggestion": "Consider passing 'platform', 'configuration' and 'test_suite' explicitly as arguments to the function 'write_outcome_entry' and use those arguments instead; use the 'restrict' keyword for 'platform', 'configuration' and 'test_suite' to hint the compiler that they are free of aliasing if you can guarantee it",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR001"
    },
    {
      "Check": "PWR001",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/build/tests/test_suite_hkdf.c:530:1",
      "Title": "Declare global variables as function parameters",
      "RelatedCodeList": {
        "Subtitle": "Usages",
        "Code": [
          "    if (func_idx < (int) (sizeof(test_funcs) / sizeof(TestWrapper_t))) {",
          "        fp = test_funcs[func_idx];"
        ]
      },
      "Suggestion": "Consider passing 'test_funcs' explicitly as argument to the function 'dispatch_test' and use that argument instead; use the 'restrict' keyword for 'test_funcs' to hint the compiler that it is free of aliasing",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR001"
    },
    {
      "Check": "PWR001",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/build/tests/test_suite_hkdf.c:568:1",
      "Title": "Declare global variables as function parameters",
      "RelatedCodeList": {
        "Subtitle": "Usages",
        "Code": [
          "    if (func_idx < (int) (sizeof(test_funcs)/sizeof(TestWrapper_t))) {",
          "        fp = test_funcs[func_idx];"
        ]
      },
      "Suggestion": "Consider passing 'test_funcs' explicitly as argument to the function 'check_test' and use that argument instead; use the 'restrict' keyword for 'test_funcs' to hint the compiler that it is free of aliasing",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR001"
    },
    {
      "Check": "PWR001",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/build/tests/test_suite_hkdf.c:910:1",
      "Title": "Declare global variables as function parameters",
      "RelatedCodeList": {
        "Subtitle": "Usages",
        "Code": [
          "    if (platform == NULL) {",
          "        platform = getenv(\"MBEDTLS_TEST_PLATFORM\");",
          "        if (platform == NULL) {",
          "            platform = \"unknown\";",
          "    if (configuration == NULL) {",
          "        configuration = getenv(\"MBEDTLS_TEST_CONFIGURATION\");",
          "        if (configuration == NULL) {",
          "            configuration = \"unknown\";",
          "    if (test_suite == NULL) {",
          "        test_suite = strrchr(argv0, '/');",
          "        if (test_suite != NULL) {",
          "            test_suite += 1; // skip the '/'",
          "            test_suite = argv0;",
          "                    platform, configuration, test_suite, test_case);"
        ]
      },
      "Suggestion": "Consider passing 'platform', 'configuration' and 'test_suite' explicitly as arguments to the function 'write_outcome_entry' and use those arguments instead; use the 'restrict' keyword for 'platform', 'configuration' and 'test_suite' to hint the compiler that they are free of aliasing if you can guarantee it",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR001"
    },
    {
      "Check": "PWR001",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/build/tests/test_suite_hmac_drbg.misc.c:821:1",
      "Title": "Declare global variables as function parameters",
      "RelatedCodeList": {
        "Subtitle": "Usages",
        "Code": [
          "    if (func_idx < (int) (sizeof(test_funcs) / sizeof(TestWrapper_t))) {",
          "        fp = test_funcs[func_idx];"
        ]
      },
      "Suggestion": "Consider passing 'test_funcs' explicitly as argument to the function 'dispatch_test' and use that argument instead; use the 'restrict' keyword for 'test_funcs' to hint the compiler that it is free of aliasing",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR001"
    },
    {
      "Check": "PWR001",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/build/tests/test_suite_hmac_drbg.misc.c:859:1",
      "Title": "Declare global variables as function parameters",
      "RelatedCodeList": {
        "Subtitle": "Usages",
        "Code": [
          "    if (func_idx < (int) (sizeof(test_funcs)/sizeof(TestWrapper_t))) {",
          "        fp = test_funcs[func_idx];"
        ]
      },
      "Suggestion": "Consider passing 'test_funcs' explicitly as argument to the function 'check_test' and use that argument instead; use the 'restrict' keyword for 'test_funcs' to hint the compiler that it is free of aliasing",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR001"
    },
    {
      "Check": "PWR001",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/build/tests/test_suite_hmac_drbg.misc.c:1201:1",
      "Title": "Declare global variables as function parameters",
      "RelatedCodeList": {
        "Subtitle": "Usages",
        "Code": [
          "    if (platform == NULL) {",
          "        platform = getenv(\"MBEDTLS_TEST_PLATFORM\");",
          "        if (platform == NULL) {",
          "            platform = \"unknown\";",
          "    if (configuration == NULL) {",
          "        configuration = getenv(\"MBEDTLS_TEST_CONFIGURATION\");",
          "        if (configuration == NULL) {",
          "            configuration = \"unknown\";",
          "    if (test_suite == NULL) {",
          "        test_suite = strrchr(argv0, '/');",
          "        if (test_suite != NULL) {",
          "            test_suite += 1; // skip the '/'",
          "            test_suite = argv0;",
          "                    platform, configuration, test_suite, test_case);"
        ]
      },
      "Suggestion": "Consider passing 'platform', 'configuration' and 'test_suite' explicitly as arguments to the function 'write_outcome_entry' and use those arguments instead; use the 'restrict' keyword for 'platform', 'configuration' and 'test_suite' to hint the compiler that they are free of aliasing if you can guarantee it",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR001"
    },
    {
      "Check": "PWR001",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/build/tests/test_suite_hmac_drbg.no_reseed.c:760:1",
      "Title": "Declare global variables as function parameters",
      "RelatedCodeList": {
        "Subtitle": "Usages",
        "Code": [
          "    if (func_idx < (int) (sizeof(test_funcs) / sizeof(TestWrapper_t))) {",
          "        fp = test_funcs[func_idx];"
        ]
      },
      "Suggestion": "Consider passing 'test_funcs' explicitly as argument to the function 'dispatch_test' and use that argument instead; use the 'restrict' keyword for 'test_funcs' to hint the compiler that it is free of aliasing",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR001"
    },
    {
      "Check": "PWR001",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/build/tests/test_suite_hmac_drbg.no_reseed.c:798:1",
      "Title": "Declare global variables as function parameters",
      "RelatedCodeList": {
        "Subtitle": "Usages",
        "Code": [
          "    if (func_idx < (int) (sizeof(test_funcs)/sizeof(TestWrapper_t))) {",
          "        fp = test_funcs[func_idx];"
        ]
      },
      "Suggestion": "Consider passing 'test_funcs' explicitly as argument to the function 'check_test' and use that argument instead; use the 'restrict' keyword for 'test_funcs' to hint the compiler that it is free of aliasing",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR001"
    },
    {
      "Check": "PWR001",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/build/tests/test_suite_hmac_drbg.no_reseed.c:1140:1",
      "Title": "Declare global variables as function parameters",
      "RelatedCodeList": {
        "Subtitle": "Usages",
        "Code": [
          "    if (platform == NULL) {",
          "        platform = getenv(\"MBEDTLS_TEST_PLATFORM\");",
          "        if (platform == NULL) {",
          "            platform = \"unknown\";",
          "    if (configuration == NULL) {",
          "        configuration = getenv(\"MBEDTLS_TEST_CONFIGURATION\");",
          "        if (configuration == NULL) {",
          "            configuration = \"unknown\";",
          "    if (test_suite == NULL) {",
          "        test_suite = strrchr(argv0, '/');",
          "        if (test_suite != NULL) {",
          "            test_suite += 1; // skip the '/'",
          "            test_suite = argv0;",
          "                    platform, configuration, test_suite, test_case);"
        ]
      },
      "Suggestion": "Consider passing 'platform', 'configuration' and 'test_suite' explicitly as arguments to the function 'write_outcome_entry' and use those arguments instead; use the 'restrict' keyword for 'platform', 'configuration' and 'test_suite' to hint the compiler that they are free of aliasing if you can guarantee it",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR001"
    },
    {
      "Check": "PWR001",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/build/tests/test_suite_hmac_drbg.nopr.c:760:1",
      "Title": "Declare global variables as function parameters",
      "RelatedCodeList": {
        "Subtitle": "Usages",
        "Code": [
          "    if (func_idx < (int) (sizeof(test_funcs) / sizeof(TestWrapper_t))) {",
          "        fp = test_funcs[func_idx];"
        ]
      },
      "Suggestion": "Consider passing 'test_funcs' explicitly as argument to the function 'dispatch_test' and use that argument instead; use the 'restrict' keyword for 'test_funcs' to hint the compiler that it is free of aliasing",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR001"
    },
    {
      "Check": "PWR001",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/build/tests/test_suite_hmac_drbg.nopr.c:798:1",
      "Title": "Declare global variables as function parameters",
      "RelatedCodeList": {
        "Subtitle": "Usages",
        "Code": [
          "    if (func_idx < (int) (sizeof(test_funcs)/sizeof(TestWrapper_t))) {",
          "        fp = test_funcs[func_idx];"
        ]
      },
      "Suggestion": "Consider passing 'test_funcs' explicitly as argument to the function 'check_test' and use that argument instead; use the 'restrict' keyword for 'test_funcs' to hint the compiler that it is free of aliasing",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR001"
    },
    {
      "Check": "PWR001",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/build/tests/test_suite_hmac_drbg.nopr.c:1140:1",
      "Title": "Declare global variables as function parameters",
      "RelatedCodeList": {
        "Subtitle": "Usages",
        "Code": [
          "    if (platform == NULL) {",
          "        platform = getenv(\"MBEDTLS_TEST_PLATFORM\");",
          "        if (platform == NULL) {",
          "            platform = \"unknown\";",
          "    if (configuration == NULL) {",
          "        configuration = getenv(\"MBEDTLS_TEST_CONFIGURATION\");",
          "        if (configuration == NULL) {",
          "            configuration = \"unknown\";",
          "    if (test_suite == NULL) {",
          "        test_suite = strrchr(argv0, '/');",
          "        if (test_suite != NULL) {",
          "            test_suite += 1; // skip the '/'",
          "            test_suite = argv0;",
          "                    platform, configuration, test_suite, test_case);"
        ]
      },
      "Suggestion": "Consider passing 'platform', 'configuration' and 'test_suite' explicitly as arguments to the function 'write_outcome_entry' and use those arguments instead; use the 'restrict' keyword for 'platform', 'configuration' and 'test_suite' to hint the compiler that they are free of aliasing if you can guarantee it",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR001"
    },
    {
      "Check": "PWR001",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/build/tests/test_suite_hmac_drbg.pr.c:760:1",
      "Title": "Declare global variables as function parameters",
      "RelatedCodeList": {
        "Subtitle": "Usages",
        "Code": [
          "    if (func_idx < (int) (sizeof(test_funcs) / sizeof(TestWrapper_t))) {",
          "        fp = test_funcs[func_idx];"
        ]
      },
      "Suggestion": "Consider passing 'test_funcs' explicitly as argument to the function 'dispatch_test' and use that argument instead; use the 'restrict' keyword for 'test_funcs' to hint the compiler that it is free of aliasing",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR001"
    },
    {
      "Check": "PWR001",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/build/tests/test_suite_hmac_drbg.pr.c:798:1",
      "Title": "Declare global variables as function parameters",
      "RelatedCodeList": {
        "Subtitle": "Usages",
        "Code": [
          "    if (func_idx < (int) (sizeof(test_funcs)/sizeof(TestWrapper_t))) {",
          "        fp = test_funcs[func_idx];"
        ]
      },
      "Suggestion": "Consider passing 'test_funcs' explicitly as argument to the function 'check_test' and use that argument instead; use the 'restrict' keyword for 'test_funcs' to hint the compiler that it is free of aliasing",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR001"
    },
    {
      "Check": "PWR001",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/build/tests/test_suite_hmac_drbg.pr.c:1140:1",
      "Title": "Declare global variables as function parameters",
      "RelatedCodeList": {
        "Subtitle": "Usages",
        "Code": [
          "    if (platform == NULL) {",
          "        platform = getenv(\"MBEDTLS_TEST_PLATFORM\");",
          "        if (platform == NULL) {",
          "            platform = \"unknown\";",
          "    if (configuration == NULL) {",
          "        configuration = getenv(\"MBEDTLS_TEST_CONFIGURATION\");",
          "        if (configuration == NULL) {",
          "            configuration = \"unknown\";",
          "    if (test_suite == NULL) {",
          "        test_suite = strrchr(argv0, '/');",
          "        if (test_suite != NULL) {",
          "            test_suite += 1; // skip the '/'",
          "            test_suite = argv0;",
          "                    platform, configuration, test_suite, test_case);"
        ]
      },
      "Suggestion": "Consider passing 'platform', 'configuration' and 'test_suite' explicitly as arguments to the function 'write_outcome_entry' and use those arguments instead; use the 'restrict' keyword for 'platform', 'configuration' and 'test_suite' to hint the compiler that they are free of aliasing if you can guarantee it",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR001"
    },
    {
      "Check": "PWR001",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/build/tests/test_suite_lmots.c:621:1",
      "Title": "Declare global variables as function parameters",
      "RelatedCodeList": {
        "Subtitle": "Usages",
        "Code": [
          "    if (func_idx < (int) (sizeof(test_funcs) / sizeof(TestWrapper_t))) {",
          "        fp = test_funcs[func_idx];"
        ]
      },
      "Suggestion": "Consider passing 'test_funcs' explicitly as argument to the function 'dispatch_test' and use that argument instead; use the 'restrict' keyword for 'test_funcs' to hint the compiler that it is free of aliasing",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR001"
    },
    {
      "Check": "PWR001",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/build/tests/test_suite_lmots.c:659:1",
      "Title": "Declare global variables as function parameters",
      "RelatedCodeList": {
        "Subtitle": "Usages",
        "Code": [
          "    if (func_idx < (int) (sizeof(test_funcs)/sizeof(TestWrapper_t))) {",
          "        fp = test_funcs[func_idx];"
        ]
      },
      "Suggestion": "Consider passing 'test_funcs' explicitly as argument to the function 'check_test' and use that argument instead; use the 'restrict' keyword for 'test_funcs' to hint the compiler that it is free of aliasing",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR001"
    },
    {
      "Check": "PWR001",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/build/tests/test_suite_lmots.c:1001:1",
      "Title": "Declare global variables as function parameters",
      "RelatedCodeList": {
        "Subtitle": "Usages",
        "Code": [
          "    if (platform == NULL) {",
          "        platform = getenv(\"MBEDTLS_TEST_PLATFORM\");",
          "        if (platform == NULL) {",
          "            platform = \"unknown\";",
          "    if (configuration == NULL) {",
          "        configuration = getenv(\"MBEDTLS_TEST_CONFIGURATION\");",
          "        if (configuration == NULL) {",
          "            configuration = \"unknown\";",
          "    if (test_suite == NULL) {",
          "        test_suite = strrchr(argv0, '/');",
          "        if (test_suite != NULL) {",
          "            test_suite += 1; // skip the '/'",
          "            test_suite = argv0;",
          "                    platform, configuration, test_suite, test_case);"
        ]
      },
      "Suggestion": "Consider passing 'platform', 'configuration' and 'test_suite' explicitly as arguments to the function 'write_outcome_entry' and use those arguments instead; use the 'restrict' keyword for 'platform', 'configuration' and 'test_suite' to hint the compiler that they are free of aliasing if you can guarantee it",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR001"
    },
    {
      "Check": "PWR001",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/build/tests/test_suite_lms.c:537:1",
      "Title": "Declare global variables as function parameters",
      "RelatedCodeList": {
        "Subtitle": "Usages",
        "Code": [
          "    if (func_idx < (int) (sizeof(test_funcs) / sizeof(TestWrapper_t))) {",
          "        fp = test_funcs[func_idx];"
        ]
      },
      "Suggestion": "Consider passing 'test_funcs' explicitly as argument to the function 'dispatch_test' and use that argument instead; use the 'restrict' keyword for 'test_funcs' to hint the compiler that it is free of aliasing",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR001"
    },
    {
      "Check": "PWR001",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/build/tests/test_suite_lms.c:575:1",
      "Title": "Declare global variables as function parameters",
      "RelatedCodeList": {
        "Subtitle": "Usages",
        "Code": [
          "    if (func_idx < (int) (sizeof(test_funcs)/sizeof(TestWrapper_t))) {",
          "        fp = test_funcs[func_idx];"
        ]
      },
      "Suggestion": "Consider passing 'test_funcs' explicitly as argument to the function 'check_test' and use that argument instead; use the 'restrict' keyword for 'test_funcs' to hint the compiler that it is free of aliasing",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR001"
    },
    {
      "Check": "PWR001",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/build/tests/test_suite_lms.c:917:1",
      "Title": "Declare global variables as function parameters",
      "RelatedCodeList": {
        "Subtitle": "Usages",
        "Code": [
          "    if (platform == NULL) {",
          "        platform = getenv(\"MBEDTLS_TEST_PLATFORM\");",
          "        if (platform == NULL) {",
          "            platform = \"unknown\";",
          "    if (configuration == NULL) {",
          "        configuration = getenv(\"MBEDTLS_TEST_CONFIGURATION\");",
          "        if (configuration == NULL) {",
          "            configuration = \"unknown\";",
          "    if (test_suite == NULL) {",
          "        test_suite = strrchr(argv0, '/');",
          "        if (test_suite != NULL) {",
          "            test_suite += 1; // skip the '/'",
          "            test_suite = argv0;",
          "                    platform, configuration, test_suite, test_case);"
        ]
      },
      "Suggestion": "Consider passing 'platform', 'configuration' and 'test_suite' explicitly as arguments to the function 'write_outcome_entry' and use those arguments instead; use the 'restrict' keyword for 'platform', 'configuration' and 'test_suite' to hint the compiler that they are free of aliasing if you can guarantee it",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR001"
    },
    {
      "Check": "PWR001",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/build/tests/test_suite_md.c:1066:1",
      "Title": "Declare global variables as function parameters",
      "RelatedCodeList": {
        "Subtitle": "Usages",
        "Code": [
          "    if (func_idx < (int) (sizeof(test_funcs) / sizeof(TestWrapper_t))) {",
          "        fp = test_funcs[func_idx];"
        ]
      },
      "Suggestion": "Consider passing 'test_funcs' explicitly as argument to the function 'dispatch_test' and use that argument instead; use the 'restrict' keyword for 'test_funcs' to hint the compiler that it is free of aliasing",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR001"
    },
    {
      "Check": "PWR001",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/build/tests/test_suite_md.c:1104:1",
      "Title": "Declare global variables as function parameters",
      "RelatedCodeList": {
        "Subtitle": "Usages",
        "Code": [
          "    if (func_idx < (int) (sizeof(test_funcs)/sizeof(TestWrapper_t))) {",
          "        fp = test_funcs[func_idx];"
        ]
      },
      "Suggestion": "Consider passing 'test_funcs' explicitly as argument to the function 'check_test' and use that argument instead; use the 'restrict' keyword for 'test_funcs' to hint the compiler that it is free of aliasing",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR001"
    },
    {
      "Check": "PWR001",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/build/tests/test_suite_md.c:1446:1",
      "Title": "Declare global variables as function parameters",
      "RelatedCodeList": {
        "Subtitle": "Usages",
        "Code": [
          "    if (platform == NULL) {",
          "        platform = getenv(\"MBEDTLS_TEST_PLATFORM\");",
          "        if (platform == NULL) {",
          "            platform = \"unknown\";",
          "    if (configuration == NULL) {",
          "        configuration = getenv(\"MBEDTLS_TEST_CONFIGURATION\");",
          "        if (configuration == NULL) {",
          "            configuration = \"unknown\";",
          "    if (test_suite == NULL) {",
          "        test_suite = strrchr(argv0, '/');",
          "        if (test_suite != NULL) {",
          "            test_suite += 1; // skip the '/'",
          "            test_suite = argv0;",
          "                    platform, configuration, test_suite, test_case);"
        ]
      },
      "Suggestion": "Consider passing 'platform', 'configuration' and 'test_suite' explicitly as arguments to the function 'write_outcome_entry' and use those arguments instead; use the 'restrict' keyword for 'platform', 'configuration' and 'test_suite' to hint the compiler that they are free of aliasing if you can guarantee it",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR001"
    },
    {
      "Check": "PWR001",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/build/tests/test_suite_md.psa.c:1324:1",
      "Title": "Declare global variables as function parameters",
      "RelatedCodeList": {
        "Subtitle": "Usages",
        "Code": [
          "    if (func_idx < (int) (sizeof(test_funcs) / sizeof(TestWrapper_t))) {",
          "        fp = test_funcs[func_idx];"
        ]
      },
      "Suggestion": "Consider passing 'test_funcs' explicitly as argument to the function 'dispatch_test' and use that argument instead; use the 'restrict' keyword for 'test_funcs' to hint the compiler that it is free of aliasing",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR001"
    },
    {
      "Check": "PWR001",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/build/tests/test_suite_md.psa.c:1362:1",
      "Title": "Declare global variables as function parameters",
      "RelatedCodeList": {
        "Subtitle": "Usages",
        "Code": [
          "    if (func_idx < (int) (sizeof(test_funcs)/sizeof(TestWrapper_t))) {",
          "        fp = test_funcs[func_idx];"
        ]
      },
      "Suggestion": "Consider passing 'test_funcs' explicitly as argument to the function 'check_test' and use that argument instead; use the 'restrict' keyword for 'test_funcs' to hint the compiler that it is free of aliasing",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR001"
    },
    {
      "Check": "PWR001",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/build/tests/test_suite_md.psa.c:1704:1",
      "Title": "Declare global variables as function parameters",
      "RelatedCodeList": {
        "Subtitle": "Usages",
        "Code": [
          "    if (platform == NULL) {",
          "        platform = getenv(\"MBEDTLS_TEST_PLATFORM\");",
          "        if (platform == NULL) {",
          "            platform = \"unknown\";",
          "    if (configuration == NULL) {",
          "        configuration = getenv(\"MBEDTLS_TEST_CONFIGURATION\");",
          "        if (configuration == NULL) {",
          "            configuration = \"unknown\";",
          "    if (test_suite == NULL) {",
          "        test_suite = strrchr(argv0, '/');",
          "        if (test_suite != NULL) {",
          "            test_suite += 1; // skip the '/'",
          "            test_suite = argv0;",
          "                    platform, configuration, test_suite, test_case);"
        ]
      },
      "Suggestion": "Consider passing 'platform', 'configuration' and 'test_suite' explicitly as arguments to the function 'write_outcome_entry' and use those arguments instead; use the 'restrict' keyword for 'platform', 'configuration' and 'test_suite' to hint the compiler that they are free of aliasing if you can guarantee it",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR001"
    },
    {
      "Check": "PWR001",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/build/tests/test_suite_mdx.c:395:1",
      "Title": "Declare global variables as function parameters",
      "RelatedCodeList": {
        "Subtitle": "Usages",
        "Code": [
          "    if (func_idx < (int) (sizeof(test_funcs) / sizeof(TestWrapper_t))) {",
          "        fp = test_funcs[func_idx];"
        ]
      },
      "Suggestion": "Consider passing 'test_funcs' explicitly as argument to the function 'dispatch_test' and use that argument instead; use the 'restrict' keyword for 'test_funcs' to hint the compiler that it is free of aliasing",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR001"
    },
    {
      "Check": "PWR001",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/build/tests/test_suite_mdx.c:433:1",
      "Title": "Declare global variables as function parameters",
      "RelatedCodeList": {
        "Subtitle": "Usages",
        "Code": [
          "    if (func_idx < (int) (sizeof(test_funcs)/sizeof(TestWrapper_t))) {",
          "        fp = test_funcs[func_idx];"
        ]
      },
      "Suggestion": "Consider passing 'test_funcs' explicitly as argument to the function 'check_test' and use that argument instead; use the 'restrict' keyword for 'test_funcs' to hint the compiler that it is free of aliasing",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR001"
    },
    {
      "Check": "PWR001",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/build/tests/test_suite_mdx.c:775:1",
      "Title": "Declare global variables as function parameters",
      "RelatedCodeList": {
        "Subtitle": "Usages",
        "Code": [
          "    if (platform == NULL) {",
          "        platform = getenv(\"MBEDTLS_TEST_PLATFORM\");",
          "        if (platform == NULL) {",
          "            platform = \"unknown\";",
          "    if (configuration == NULL) {",
          "        configuration = getenv(\"MBEDTLS_TEST_CONFIGURATION\");",
          "        if (configuration == NULL) {",
          "            configuration = \"unknown\";",
          "    if (test_suite == NULL) {",
          "        test_suite = strrchr(argv0, '/');",
          "        if (test_suite != NULL) {",
          "            test_suite += 1; // skip the '/'",
          "            test_suite = argv0;",
          "                    platform, configuration, test_suite, test_case);"
        ]
      },
      "Suggestion": "Consider passing 'platform', 'configuration' and 'test_suite' explicitly as arguments to the function 'write_outcome_entry' and use those arguments instead; use the 'restrict' keyword for 'platform', 'configuration' and 'test_suite' to hint the compiler that they are free of aliasing if you can guarantee it",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR001"
    },
    {
      "Check": "PWR001",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/build/tests/test_suite_memory_buffer_alloc.c:601:1",
      "Title": "Declare global variables as function parameters",
      "RelatedCodeList": {
        "Subtitle": "Usages",
        "Code": [
          "    if (func_idx < (int) (sizeof(test_funcs) / sizeof(TestWrapper_t))) {",
          "        fp = test_funcs[func_idx];"
        ]
      },
      "Suggestion": "Consider passing 'test_funcs' explicitly as argument to the function 'dispatch_test' and use that argument instead; use the 'restrict' keyword for 'test_funcs' to hint the compiler that it is free of aliasing",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR001"
    },
    {
      "Check": "PWR001",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/build/tests/test_suite_memory_buffer_alloc.c:639:1",
      "Title": "Declare global variables as function parameters",
      "RelatedCodeList": {
        "Subtitle": "Usages",
        "Code": [
          "    if (func_idx < (int) (sizeof(test_funcs)/sizeof(TestWrapper_t))) {",
          "        fp = test_funcs[func_idx];"
        ]
      },
      "Suggestion": "Consider passing 'test_funcs' explicitly as argument to the function 'check_test' and use that argument instead; use the 'restrict' keyword for 'test_funcs' to hint the compiler that it is free of aliasing",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR001"
    },
    {
      "Check": "PWR001",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/build/tests/test_suite_memory_buffer_alloc.c:981:1",
      "Title": "Declare global variables as function parameters",
      "RelatedCodeList": {
        "Subtitle": "Usages",
        "Code": [
          "    if (platform == NULL) {",
          "        platform = getenv(\"MBEDTLS_TEST_PLATFORM\");",
          "        if (platform == NULL) {",
          "            platform = \"unknown\";",
          "    if (configuration == NULL) {",
          "        configuration = getenv(\"MBEDTLS_TEST_CONFIGURATION\");",
          "        if (configuration == NULL) {",
          "            configuration = \"unknown\";",
          "    if (test_suite == NULL) {",
          "        test_suite = strrchr(argv0, '/');",
          "        if (test_suite != NULL) {",
          "            test_suite += 1; // skip the '/'",
          "            test_suite = argv0;",
          "                    platform, configuration, test_suite, test_case);"
        ]
      },
      "Suggestion": "Consider passing 'platform', 'configuration' and 'test_suite' explicitly as arguments to the function 'write_outcome_entry' and use those arguments instead; use the 'restrict' keyword for 'platform', 'configuration' and 'test_suite' to hint the compiler that they are free of aliasing if you can guarantee it",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR001"
    },
    {
      "Check": "PWR001",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/build/tests/test_suite_mps.c:1641:1",
      "Title": "Declare global variables as function parameters",
      "RelatedCodeList": {
        "Subtitle": "Usages",
        "Code": [
          "    if (func_idx < (int) (sizeof(test_funcs) / sizeof(TestWrapper_t))) {",
          "        fp = test_funcs[func_idx];"
        ]
      },
      "Suggestion": "Consider passing 'test_funcs' explicitly as argument to the function 'dispatch_test' and use that argument instead; use the 'restrict' keyword for 'test_funcs' to hint the compiler that it is free of aliasing",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR001"
    },
    {
      "Check": "PWR001",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/build/tests/test_suite_mps.c:1679:1",
      "Title": "Declare global variables as function parameters",
      "RelatedCodeList": {
        "Subtitle": "Usages",
        "Code": [
          "    if (func_idx < (int) (sizeof(test_funcs)/sizeof(TestWrapper_t))) {",
          "        fp = test_funcs[func_idx];"
        ]
      },
      "Suggestion": "Consider passing 'test_funcs' explicitly as argument to the function 'check_test' and use that argument instead; use the 'restrict' keyword for 'test_funcs' to hint the compiler that it is free of aliasing",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR001"
    },
    {
      "Check": "PWR001",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/build/tests/test_suite_mps.c:2021:1",
      "Title": "Declare global variables as function parameters",
      "RelatedCodeList": {
        "Subtitle": "Usages",
        "Code": [
          "    if (platform == NULL) {",
          "        platform = getenv(\"MBEDTLS_TEST_PLATFORM\");",
          "        if (platform == NULL) {",
          "            platform = \"unknown\";",
          "    if (configuration == NULL) {",
          "        configuration = getenv(\"MBEDTLS_TEST_CONFIGURATION\");",
          "        if (configuration == NULL) {",
          "            configuration = \"unknown\";",
          "    if (test_suite == NULL) {",
          "        test_suite = strrchr(argv0, '/');",
          "        if (test_suite != NULL) {",
          "            test_suite += 1; // skip the '/'",
          "            test_suite = argv0;",
          "                    platform, configuration, test_suite, test_case);"
        ]
      },
      "Suggestion": "Consider passing 'platform', 'configuration' and 'test_suite' explicitly as arguments to the function 'write_outcome_entry' and use those arguments instead; use the 'restrict' keyword for 'platform', 'configuration' and 'test_suite' to hint the compiler that they are free of aliasing if you can guarantee it",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR001"
    },
    {
      "Check": "PWR001",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/build/tests/test_suite_net.c:438:1",
      "Title": "Declare global variables as function parameters",
      "RelatedCodeList": {
        "Subtitle": "Usages",
        "Code": [
          "    if (func_idx < (int) (sizeof(test_funcs) / sizeof(TestWrapper_t))) {",
          "        fp = test_funcs[func_idx];"
        ]
      },
      "Suggestion": "Consider passing 'test_funcs' explicitly as argument to the function 'dispatch_test' and use that argument instead; use the 'restrict' keyword for 'test_funcs' to hint the compiler that it is free of aliasing",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR001"
    },
    {
      "Check": "PWR001",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/build/tests/test_suite_net.c:476:1",
      "Title": "Declare global variables as function parameters",
      "RelatedCodeList": {
        "Subtitle": "Usages",
        "Code": [
          "    if (func_idx < (int) (sizeof(test_funcs)/sizeof(TestWrapper_t))) {",
          "        fp = test_funcs[func_idx];"
        ]
      },
      "Suggestion": "Consider passing 'test_funcs' explicitly as argument to the function 'check_test' and use that argument instead; use the 'restrict' keyword for 'test_funcs' to hint the compiler that it is free of aliasing",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR001"
    },
    {
      "Check": "PWR001",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/build/tests/test_suite_net.c:818:1",
      "Title": "Declare global variables as function parameters",
      "RelatedCodeList": {
        "Subtitle": "Usages",
        "Code": [
          "    if (platform == NULL) {",
          "        platform = getenv(\"MBEDTLS_TEST_PLATFORM\");",
          "        if (platform == NULL) {",
          "            platform = \"unknown\";",
          "    if (configuration == NULL) {",
          "        configuration = getenv(\"MBEDTLS_TEST_CONFIGURATION\");",
          "        if (configuration == NULL) {",
          "            configuration = \"unknown\";",
          "    if (test_suite == NULL) {",
          "        test_suite = strrchr(argv0, '/');",
          "        if (test_suite != NULL) {",
          "            test_suite += 1; // skip the '/'",
          "            test_suite = argv0;",
          "                    platform, configuration, test_suite, test_case);"
        ]
      },
      "Suggestion": "Consider passing 'platform', 'configuration' and 'test_suite' explicitly as arguments to the function 'write_outcome_entry' and use those arguments instead; use the 'restrict' keyword for 'platform', 'configuration' and 'test_suite' to hint the compiler that they are free of aliasing if you can guarantee it",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR001"
    },
    {
      "Check": "PWR001",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/build/tests/test_suite_nist_kw.c:750:1",
      "Title": "Declare global variables as function parameters",
      "RelatedCodeList": {
        "Subtitle": "Usages",
        "Code": [
          "    if (func_idx < (int) (sizeof(test_funcs) / sizeof(TestWrapper_t))) {",
          "        fp = test_funcs[func_idx];"
        ]
      },
      "Suggestion": "Consider passing 'test_funcs' explicitly as argument to the function 'dispatch_test' and use that argument instead; use the 'restrict' keyword for 'test_funcs' to hint the compiler that it is free of aliasing",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR001"
    },
    {
      "Check": "PWR001",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/build/tests/test_suite_nist_kw.c:788:1",
      "Title": "Declare global variables as function parameters",
      "RelatedCodeList": {
        "Subtitle": "Usages",
        "Code": [
          "    if (func_idx < (int) (sizeof(test_funcs)/sizeof(TestWrapper_t))) {",
          "        fp = test_funcs[func_idx];"
        ]
      },
      "Suggestion": "Consider passing 'test_funcs' explicitly as argument to the function 'check_test' and use that argument instead; use the 'restrict' keyword for 'test_funcs' to hint the compiler that it is free of aliasing",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR001"
    },
    {
      "Check": "PWR001",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/build/tests/test_suite_nist_kw.c:1130:1",
      "Title": "Declare global variables as function parameters",
      "RelatedCodeList": {
        "Subtitle": "Usages",
        "Code": [
          "    if (platform == NULL) {",
          "        platform = getenv(\"MBEDTLS_TEST_PLATFORM\");",
          "        if (platform == NULL) {",
          "            platform = \"unknown\";",
          "    if (configuration == NULL) {",
          "        configuration = getenv(\"MBEDTLS_TEST_CONFIGURATION\");",
          "        if (configuration == NULL) {",
          "            configuration = \"unknown\";",
          "    if (test_suite == NULL) {",
          "        test_suite = strrchr(argv0, '/');",
          "        if (test_suite != NULL) {",
          "            test_suite += 1; // skip the '/'",
          "            test_suite = argv0;",
          "                    platform, configuration, test_suite, test_case);"
        ]
      },
      "Suggestion": "Consider passing 'platform', 'configuration' and 'test_suite' explicitly as arguments to the function 'write_outcome_entry' and use those arguments instead; use the 'restrict' keyword for 'platform', 'configuration' and 'test_suite' to hint the compiler that they are free of aliasing if you can guarantee it",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR001"
    },
    {
      "Check": "PWR001",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/build/tests/test_suite_oid.c:738:1",
      "Title": "Declare global variables as function parameters",
      "RelatedCodeList": {
        "Subtitle": "Usages",
        "Code": [
          "    if (func_idx < (int) (sizeof(test_funcs) / sizeof(TestWrapper_t))) {",
          "        fp = test_funcs[func_idx];"
        ]
      },
      "Suggestion": "Consider passing 'test_funcs' explicitly as argument to the function 'dispatch_test' and use that argument instead; use the 'restrict' keyword for 'test_funcs' to hint the compiler that it is free of aliasing",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR001"
    },
    {
      "Check": "PWR001",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/build/tests/test_suite_oid.c:776:1",
      "Title": "Declare global variables as function parameters",
      "RelatedCodeList": {
        "Subtitle": "Usages",
        "Code": [
          "    if (func_idx < (int) (sizeof(test_funcs)/sizeof(TestWrapper_t))) {",
          "        fp = test_funcs[func_idx];"
        ]
      },
      "Suggestion": "Consider passing 'test_funcs' explicitly as argument to the function 'check_test' and use that argument instead; use the 'restrict' keyword for 'test_funcs' to hint the compiler that it is free of aliasing",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR001"
    },
    {
      "Check": "PWR001",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/build/tests/test_suite_oid.c:1118:1",
      "Title": "Declare global variables as function parameters",
      "RelatedCodeList": {
        "Subtitle": "Usages",
        "Code": [
          "    if (platform == NULL) {",
          "        platform = getenv(\"MBEDTLS_TEST_PLATFORM\");",
          "        if (platform == NULL) {",
          "            platform = \"unknown\";",
          "    if (configuration == NULL) {",
          "        configuration = getenv(\"MBEDTLS_TEST_CONFIGURATION\");",
          "        if (configuration == NULL) {",
          "            configuration = \"unknown\";",
          "    if (test_suite == NULL) {",
          "        test_suite = strrchr(argv0, '/');",
          "        if (test_suite != NULL) {",
          "            test_suite += 1; // skip the '/'",
          "            test_suite = argv0;",
          "                    platform, configuration, test_suite, test_case);"
        ]
      },
      "Suggestion": "Consider passing 'platform', 'configuration' and 'test_suite' explicitly as arguments to the function 'write_outcome_entry' and use those arguments instead; use the 'restrict' keyword for 'platform', 'configuration' and 'test_suite' to hint the compiler that they are free of aliasing if you can guarantee it",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR001"
    },
    {
      "Check": "PWR001",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/build/tests/test_suite_pem.c:463:1",
      "Title": "Declare global variables as function parameters",
      "RelatedCodeList": {
        "Subtitle": "Usages",
        "Code": [
          "    if (func_idx < (int) (sizeof(test_funcs) / sizeof(TestWrapper_t))) {",
          "        fp = test_funcs[func_idx];"
        ]
      },
      "Suggestion": "Consider passing 'test_funcs' explicitly as argument to the function 'dispatch_test' and use that argument instead; use the 'restrict' keyword for 'test_funcs' to hint the compiler that it is free of aliasing",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR001"
    },
    {
      "Check": "PWR001",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/build/tests/test_suite_pem.c:501:1",
      "Title": "Declare global variables as function parameters",
      "RelatedCodeList": {
        "Subtitle": "Usages",
        "Code": [
          "    if (func_idx < (int) (sizeof(test_funcs)/sizeof(TestWrapper_t))) {",
          "        fp = test_funcs[func_idx];"
        ]
      },
      "Suggestion": "Consider passing 'test_funcs' explicitly as argument to the function 'check_test' and use that argument instead; use the 'restrict' keyword for 'test_funcs' to hint the compiler that it is free of aliasing",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR001"
    },
    {
      "Check": "PWR001",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/build/tests/test_suite_pem.c:843:1",
      "Title": "Declare global variables as function parameters",
      "RelatedCodeList": {
        "Subtitle": "Usages",
        "Code": [
          "    if (platform == NULL) {",
          "        platform = getenv(\"MBEDTLS_TEST_PLATFORM\");",
          "        if (platform == NULL) {",
          "            platform = \"unknown\";",
          "    if (configuration == NULL) {",
          "        configuration = getenv(\"MBEDTLS_TEST_CONFIGURATION\");",
          "        if (configuration == NULL) {",
          "            configuration = \"unknown\";",
          "    if (test_suite == NULL) {",
          "        test_suite = strrchr(argv0, '/');",
          "        if (test_suite != NULL) {",
          "            test_suite += 1; // skip the '/'",
          "            test_suite = argv0;",
          "                    platform, configuration, test_suite, test_case);"
        ]
      },
      "Suggestion": "Consider passing 'platform', 'configuration' and 'test_suite' explicitly as arguments to the function 'write_outcome_entry' and use those arguments instead; use the 'restrict' keyword for 'platform', 'configuration' and 'test_suite' to hint the compiler that they are free of aliasing if you can guarantee it",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR001"
    },
    {
      "Check": "PWR001",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/build/tests/test_suite_pk.c:3284:1",
      "Title": "Declare global variables as function parameters",
      "RelatedCodeList": {
        "Subtitle": "Usages",
        "Code": [
          "    if (func_idx < (int) (sizeof(test_funcs) / sizeof(TestWrapper_t))) {",
          "        fp = test_funcs[func_idx];"
        ]
      },
      "Suggestion": "Consider passing 'test_funcs' explicitly as argument to the function 'dispatch_test' and use that argument instead; use the 'restrict' keyword for 'test_funcs' to hint the compiler that it is free of aliasing",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR001"
    },
    {
      "Check": "PWR001",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/build/tests/test_suite_pk.c:3322:1",
      "Title": "Declare global variables as function parameters",
      "RelatedCodeList": {
        "Subtitle": "Usages",
        "Code": [
          "    if (func_idx < (int) (sizeof(test_funcs)/sizeof(TestWrapper_t))) {",
          "        fp = test_funcs[func_idx];"
        ]
      },
      "Suggestion": "Consider passing 'test_funcs' explicitly as argument to the function 'check_test' and use that argument instead; use the 'restrict' keyword for 'test_funcs' to hint the compiler that it is free of aliasing",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR001"
    },
    {
      "Check": "PWR001",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/build/tests/test_suite_pk.c:3664:1",
      "Title": "Declare global variables as function parameters",
      "RelatedCodeList": {
        "Subtitle": "Usages",
        "Code": [
          "    if (platform == NULL) {",
          "        platform = getenv(\"MBEDTLS_TEST_PLATFORM\");",
          "        if (platform == NULL) {",
          "            platform = \"unknown\";",
          "    if (configuration == NULL) {",
          "        configuration = getenv(\"MBEDTLS_TEST_CONFIGURATION\");",
          "        if (configuration == NULL) {",
          "            configuration = \"unknown\";",
          "    if (test_suite == NULL) {",
          "        test_suite = strrchr(argv0, '/');",
          "        if (test_suite != NULL) {",
          "            test_suite += 1; // skip the '/'",
          "            test_suite = argv0;",
          "                    platform, configuration, test_suite, test_case);"
        ]
      },
      "Suggestion": "Consider passing 'platform', 'configuration' and 'test_suite' explicitly as arguments to the function 'write_outcome_entry' and use those arguments instead; use the 'restrict' keyword for 'platform', 'configuration' and 'test_suite' to hint the compiler that they are free of aliasing if you can guarantee it",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR001"
    },
    {
      "Check": "PWR001",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/build/tests/test_suite_pkcs12.c:611:1",
      "Title": "Declare global variables as function parameters",
      "RelatedCodeList": {
        "Subtitle": "Usages",
        "Code": [
          "    if (func_idx < (int) (sizeof(test_funcs) / sizeof(TestWrapper_t))) {",
          "        fp = test_funcs[func_idx];"
        ]
      },
      "Suggestion": "Consider passing 'test_funcs' explicitly as argument to the function 'dispatch_test' and use that argument instead; use the 'restrict' keyword for 'test_funcs' to hint the compiler that it is free of aliasing",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR001"
    },
    {
      "Check": "PWR001",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/build/tests/test_suite_pkcs12.c:649:1",
      "Title": "Declare global variables as function parameters",
      "RelatedCodeList": {
        "Subtitle": "Usages",
        "Code": [
          "    if (func_idx < (int) (sizeof(test_funcs)/sizeof(TestWrapper_t))) {",
          "        fp = test_funcs[func_idx];"
        ]
      },
      "Suggestion": "Consider passing 'test_funcs' explicitly as argument to the function 'check_test' and use that argument instead; use the 'restrict' keyword for 'test_funcs' to hint the compiler that it is free of aliasing",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR001"
    },
    {
      "Check": "PWR001",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/build/tests/test_suite_pkcs12.c:991:1",
      "Title": "Declare global variables as function parameters",
      "RelatedCodeList": {
        "Subtitle": "Usages",
        "Code": [
          "    if (platform == NULL) {",
          "        platform = getenv(\"MBEDTLS_TEST_PLATFORM\");",
          "        if (platform == NULL) {",
          "            platform = \"unknown\";",
          "    if (configuration == NULL) {",
          "        configuration = getenv(\"MBEDTLS_TEST_CONFIGURATION\");",
          "        if (configuration == NULL) {",
          "            configuration = \"unknown\";",
          "    if (test_suite == NULL) {",
          "        test_suite = strrchr(argv0, '/');",
          "        if (test_suite != NULL) {",
          "            test_suite += 1; // skip the '/'",
          "            test_suite = argv0;",
          "                    platform, configuration, test_suite, test_case);"
        ]
      },
      "Suggestion": "Consider passing 'platform', 'configuration' and 'test_suite' explicitly as arguments to the function 'write_outcome_entry' and use those arguments instead; use the 'restrict' keyword for 'platform', 'configuration' and 'test_suite' to hint the compiler that they are free of aliasing if you can guarantee it",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR001"
    },
    {
      "Check": "PWR001",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/build/tests/test_suite_pkcs1_v15.c:298:1",
      "Title": "Declare global variables as function parameters",
      "RelatedCodeList": {
        "Subtitle": "Usages",
        "Code": [
          "    TEST_ASSERT(mbedtls_mpi_read_binary(&Nmpi, N, sizeof(N)) == 0);",
          "    TEST_ASSERT(mbedtls_mpi_read_binary(&Empi, E, sizeof(E)) == 0);",
          "    TEST_ASSERT(mbedtls_mpi_read_binary(&Pmpi, P, sizeof(P)) == 0);",
          "    TEST_ASSERT(mbedtls_mpi_read_binary(&Qmpi, Q, sizeof(Q)) == 0);",
          "    TEST_ASSERT(input->len <= sizeof(N));",
          "    memcpy(final, default_content, sizeof(final));",
          "        TEST_ASSERT(memcmp(original + sizeof(N) - output_length,",
          "            output_size > sizeof(N) - 11 ? sizeof(N) - 11 : output_size;",
          "            count += (final[i] == default_content[i]);"
        ]
      },
      "Suggestion": "Consider passing 'N', 'E', 'P', 'Q' and 'default_content' explicitly as arguments to the function 'test_pkcs1_v15_decode' and use those arguments instead; use the 'restrict' keyword for 'N', 'E', 'P', 'Q' and 'default_content' to hint the compiler that they are free of aliasing",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR001"
    },
    {
      "Check": "PWR001",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/build/tests/test_suite_pkcs1_v15.c:728:1",
      "Title": "Declare global variables as function parameters",
      "RelatedCodeList": {
        "Subtitle": "Usages",
        "Code": [
          "    if (func_idx < (int) (sizeof(test_funcs) / sizeof(TestWrapper_t))) {",
          "        fp = test_funcs[func_idx];"
        ]
      },
      "Suggestion": "Consider passing 'test_funcs' explicitly as argument to the function 'dispatch_test' and use that argument instead; use the 'restrict' keyword for 'test_funcs' to hint the compiler that it is free of aliasing",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR001"
    },
    {
      "Check": "PWR001",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/build/tests/test_suite_pkcs1_v15.c:766:1",
      "Title": "Declare global variables as function parameters",
      "RelatedCodeList": {
        "Subtitle": "Usages",
        "Code": [
          "    if (func_idx < (int) (sizeof(test_funcs)/sizeof(TestWrapper_t))) {",
          "        fp = test_funcs[func_idx];"
        ]
      },
      "Suggestion": "Consider passing 'test_funcs' explicitly as argument to the function 'check_test' and use that argument instead; use the 'restrict' keyword for 'test_funcs' to hint the compiler that it is free of aliasing",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR001"
    },
    {
      "Check": "PWR001",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/build/tests/test_suite_pkcs1_v15.c:1108:1",
      "Title": "Declare global variables as function parameters",
      "RelatedCodeList": {
        "Subtitle": "Usages",
        "Code": [
          "    if (platform == NULL) {",
          "        platform = getenv(\"MBEDTLS_TEST_PLATFORM\");",
          "        if (platform == NULL) {",
          "            platform = \"unknown\";",
          "    if (configuration == NULL) {",
          "        configuration = getenv(\"MBEDTLS_TEST_CONFIGURATION\");",
          "        if (configuration == NULL) {",
          "            configuration = \"unknown\";",
          "    if (test_suite == NULL) {",
          "        test_suite = strrchr(argv0, '/');",
          "        if (test_suite != NULL) {",
          "            test_suite += 1; // skip the '/'",
          "            test_suite = argv0;",
          "                    platform, configuration, test_suite, test_case);"
        ]
      },
      "Suggestion": "Consider passing 'platform', 'configuration' and 'test_suite' explicitly as arguments to the function 'write_outcome_entry' and use those arguments instead; use the 'restrict' keyword for 'platform', 'configuration' and 'test_suite' to hint the compiler that they are free of aliasing if you can guarantee it",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR001"
    },
    {
      "Check": "PWR001",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/build/tests/test_suite_pkcs1_v21.c:724:1",
      "Title": "Declare global variables as function parameters",
      "RelatedCodeList": {
        "Subtitle": "Usages",
        "Code": [
          "    if (func_idx < (int) (sizeof(test_funcs) / sizeof(TestWrapper_t))) {",
          "        fp = test_funcs[func_idx];"
        ]
      },
      "Suggestion": "Consider passing 'test_funcs' explicitly as argument to the function 'dispatch_test' and use that argument instead; use the 'restrict' keyword for 'test_funcs' to hint the compiler that it is free of aliasing",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR001"
    },
    {
      "Check": "PWR001",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/build/tests/test_suite_pkcs1_v21.c:762:1",
      "Title": "Declare global variables as function parameters",
      "RelatedCodeList": {
        "Subtitle": "Usages",
        "Code": [
          "    if (func_idx < (int) (sizeof(test_funcs)/sizeof(TestWrapper_t))) {",
          "        fp = test_funcs[func_idx];"
        ]
      },
      "Suggestion": "Consider passing 'test_funcs' explicitly as argument to the function 'check_test' and use that argument instead; use the 'restrict' keyword for 'test_funcs' to hint the compiler that it is free of aliasing",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR001"
    },
    {
      "Check": "PWR001",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/build/tests/test_suite_pkcs1_v21.c:1104:1",
      "Title": "Declare global variables as function parameters",
      "RelatedCodeList": {
        "Subtitle": "Usages",
        "Code": [
          "    if (platform == NULL) {",
          "        platform = getenv(\"MBEDTLS_TEST_PLATFORM\");",
          "        if (platform == NULL) {",
          "            platform = \"unknown\";",
          "    if (configuration == NULL) {",
          "        configuration = getenv(\"MBEDTLS_TEST_CONFIGURATION\");",
          "        if (configuration == NULL) {",
          "            configuration = \"unknown\";",
          "    if (test_suite == NULL) {",
          "        test_suite = strrchr(argv0, '/');",
          "        if (test_suite != NULL) {",
          "            test_suite += 1; // skip the '/'",
          "            test_suite = argv0;",
          "                    platform, configuration, test_suite, test_case);"
        ]
      },
      "Suggestion": "Consider passing 'platform', 'configuration' and 'test_suite' explicitly as arguments to the function 'write_outcome_entry' and use those arguments instead; use the 'restrict' keyword for 'platform', 'configuration' and 'test_suite' to hint the compiler that they are free of aliasing if you can guarantee it",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR001"
    },
    {
      "Check": "PWR001",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/build/tests/test_suite_pkcs5.c:650:1",
      "Title": "Declare global variables as function parameters",
      "RelatedCodeList": {
        "Subtitle": "Usages",
        "Code": [
          "    if (func_idx < (int) (sizeof(test_funcs) / sizeof(TestWrapper_t))) {",
          "        fp = test_funcs[func_idx];"
        ]
      },
      "Suggestion": "Consider passing 'test_funcs' explicitly as argument to the function 'dispatch_test' and use that argument instead; use the 'restrict' keyword for 'test_funcs' to hint the compiler that it is free of aliasing",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR001"
    },
    {
      "Check": "PWR001",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/build/tests/test_suite_pkcs5.c:688:1",
      "Title": "Declare global variables as function parameters",
      "RelatedCodeList": {
        "Subtitle": "Usages",
        "Code": [
          "    if (func_idx < (int) (sizeof(test_funcs)/sizeof(TestWrapper_t))) {",
          "        fp = test_funcs[func_idx];"
        ]
      },
      "Suggestion": "Consider passing 'test_funcs' explicitly as argument to the function 'check_test' and use that argument instead; use the 'restrict' keyword for 'test_funcs' to hint the compiler that it is free of aliasing",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR001"
    },
    {
      "Check": "PWR001",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/build/tests/test_suite_pkcs5.c:1030:1",
      "Title": "Declare global variables as function parameters",
      "RelatedCodeList": {
        "Subtitle": "Usages",
        "Code": [
          "    if (platform == NULL) {",
          "        platform = getenv(\"MBEDTLS_TEST_PLATFORM\");",
          "        if (platform == NULL) {",
          "            platform = \"unknown\";",
          "    if (configuration == NULL) {",
          "        configuration = getenv(\"MBEDTLS_TEST_CONFIGURATION\");",
          "        if (configuration == NULL) {",
          "            configuration = \"unknown\";",
          "    if (test_suite == NULL) {",
          "        test_suite = strrchr(argv0, '/');",
          "        if (test_suite != NULL) {",
          "            test_suite += 1; // skip the '/'",
          "            test_suite = argv0;",
          "                    platform, configuration, test_suite, test_case);"
        ]
      },
      "Suggestion": "Consider passing 'platform', 'configuration' and 'test_suite' explicitly as arguments to the function 'write_outcome_entry' and use those arguments instead; use the 'restrict' keyword for 'platform', 'configuration' and 'test_suite' to hint the compiler that they are free of aliasing if you can guarantee it",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR001"
    },
    {
      "Check": "PWR001",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/build/tests/test_suite_pkcs7.c:636:1",
      "Title": "Declare global variables as function parameters",
      "RelatedCodeList": {
        "Subtitle": "Usages",
        "Code": [
          "    if (func_idx < (int) (sizeof(test_funcs) / sizeof(TestWrapper_t))) {",
          "        fp = test_funcs[func_idx];"
        ]
      },
      "Suggestion": "Consider passing 'test_funcs' explicitly as argument to the function 'dispatch_test' and use that argument instead; use the 'restrict' keyword for 'test_funcs' to hint the compiler that it is free of aliasing",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR001"
    },
    {
      "Check": "PWR001",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/build/tests/test_suite_pkcs7.c:674:1",
      "Title": "Declare global variables as function parameters",
      "RelatedCodeList": {
        "Subtitle": "Usages",
        "Code": [
          "    if (func_idx < (int) (sizeof(test_funcs)/sizeof(TestWrapper_t))) {",
          "        fp = test_funcs[func_idx];"
        ]
      },
      "Suggestion": "Consider passing 'test_funcs' explicitly as argument to the function 'check_test' and use that argument instead; use the 'restrict' keyword for 'test_funcs' to hint the compiler that it is free of aliasing",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR001"
    },
    {
      "Check": "PWR001",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/build/tests/test_suite_pkcs7.c:1016:1",
      "Title": "Declare global variables as function parameters",
      "RelatedCodeList": {
        "Subtitle": "Usages",
        "Code": [
          "    if (platform == NULL) {",
          "        platform = getenv(\"MBEDTLS_TEST_PLATFORM\");",
          "        if (platform == NULL) {",
          "            platform = \"unknown\";",
          "    if (configuration == NULL) {",
          "        configuration = getenv(\"MBEDTLS_TEST_CONFIGURATION\");",
          "        if (configuration == NULL) {",
          "            configuration = \"unknown\";",
          "    if (test_suite == NULL) {",
          "        test_suite = strrchr(argv0, '/');",
          "        if (test_suite != NULL) {",
          "            test_suite += 1; // skip the '/'",
          "            test_suite = argv0;",
          "                    platform, configuration, test_suite, test_case);"
        ]
      },
      "Suggestion": "Consider passing 'platform', 'configuration' and 'test_suite' explicitly as arguments to the function 'write_outcome_entry' and use those arguments instead; use the 'restrict' keyword for 'platform', 'configuration' and 'test_suite' to hint the compiler that they are free of aliasing if you can guarantee it",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR001"
    },
    {
      "Check": "PWR001",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/build/tests/test_suite_pkparse.c:1041:1",
      "Title": "Declare global variables as function parameters",
      "RelatedCodeList": {
        "Subtitle": "Usages",
        "Code": [
          "    if (func_idx < (int) (sizeof(test_funcs) / sizeof(TestWrapper_t))) {",
          "        fp = test_funcs[func_idx];"
        ]
      },
      "Suggestion": "Consider passing 'test_funcs' explicitly as argument to the function 'dispatch_test' and use that argument instead; use the 'restrict' keyword for 'test_funcs' to hint the compiler that it is free of aliasing",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR001"
    },
    {
      "Check": "PWR001",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/build/tests/test_suite_pkparse.c:1079:1",
      "Title": "Declare global variables as function parameters",
      "RelatedCodeList": {
        "Subtitle": "Usages",
        "Code": [
          "    if (func_idx < (int) (sizeof(test_funcs)/sizeof(TestWrapper_t))) {",
          "        fp = test_funcs[func_idx];"
        ]
      },
      "Suggestion": "Consider passing 'test_funcs' explicitly as argument to the function 'check_test' and use that argument instead; use the 'restrict' keyword for 'test_funcs' to hint the compiler that it is free of aliasing",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR001"
    },
    {
      "Check": "PWR001",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/build/tests/test_suite_pkparse.c:1421:1",
      "Title": "Declare global variables as function parameters",
      "RelatedCodeList": {
        "Subtitle": "Usages",
        "Code": [
          "    if (platform == NULL) {",
          "        platform = getenv(\"MBEDTLS_TEST_PLATFORM\");",
          "        if (platform == NULL) {",
          "            platform = \"unknown\";",
          "    if (configuration == NULL) {",
          "        configuration = getenv(\"MBEDTLS_TEST_CONFIGURATION\");",
          "        if (configuration == NULL) {",
          "            configuration = \"unknown\";",
          "    if (test_suite == NULL) {",
          "        test_suite = strrchr(argv0, '/');",
          "        if (test_suite != NULL) {",
          "            test_suite += 1; // skip the '/'",
          "            test_suite = argv0;",
          "                    platform, configuration, test_suite, test_case);"
        ]
      },
      "Suggestion": "Consider passing 'platform', 'configuration' and 'test_suite' explicitly as arguments to the function 'write_outcome_entry' and use those arguments instead; use the 'restrict' keyword for 'platform', 'configuration' and 'test_suite' to hint the compiler that they are free of aliasing if you can guarantee it",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR001"
    },
    {
      "Check": "PWR001",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/build/tests/test_suite_pkwrite.c:632:1",
      "Title": "Declare global variables as function parameters",
      "RelatedCodeList": {
        "Subtitle": "Usages",
        "Code": [
          "    if (func_idx < (int) (sizeof(test_funcs) / sizeof(TestWrapper_t))) {",
          "        fp = test_funcs[func_idx];"
        ]
      },
      "Suggestion": "Consider passing 'test_funcs' explicitly as argument to the function 'dispatch_test' and use that argument instead; use the 'restrict' keyword for 'test_funcs' to hint the compiler that it is free of aliasing",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR001"
    },
    {
      "Check": "PWR001",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/build/tests/test_suite_pkwrite.c:670:1",
      "Title": "Declare global variables as function parameters",
      "RelatedCodeList": {
        "Subtitle": "Usages",
        "Code": [
          "    if (func_idx < (int) (sizeof(test_funcs)/sizeof(TestWrapper_t))) {",
          "        fp = test_funcs[func_idx];"
        ]
      },
      "Suggestion": "Consider passing 'test_funcs' explicitly as argument to the function 'check_test' and use that argument instead; use the 'restrict' keyword for 'test_funcs' to hint the compiler that it is free of aliasing",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR001"
    },
    {
      "Check": "PWR001",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/build/tests/test_suite_pkwrite.c:1012:1",
      "Title": "Declare global variables as function parameters",
      "RelatedCodeList": {
        "Subtitle": "Usages",
        "Code": [
          "    if (platform == NULL) {",
          "        platform = getenv(\"MBEDTLS_TEST_PLATFORM\");",
          "        if (platform == NULL) {",
          "            platform = \"unknown\";",
          "    if (configuration == NULL) {",
          "        configuration = getenv(\"MBEDTLS_TEST_CONFIGURATION\");",
          "        if (configuration == NULL) {",
          "            configuration = \"unknown\";",
          "    if (test_suite == NULL) {",
          "        test_suite = strrchr(argv0, '/');",
          "        if (test_suite != NULL) {",
          "            test_suite += 1; // skip the '/'",
          "            test_suite = argv0;",
          "                    platform, configuration, test_suite, test_case);"
        ]
      },
      "Suggestion": "Consider passing 'platform', 'configuration' and 'test_suite' explicitly as arguments to the function 'write_outcome_entry' and use those arguments instead; use the 'restrict' keyword for 'platform', 'configuration' and 'test_suite' to hint the compiler that they are free of aliasing if you can guarantee it",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR001"
    },
    {
      "Check": "PWR001",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/build/tests/test_suite_platform.c:502:1",
      "Title": "Declare global variables as function parameters",
      "RelatedCodeList": {
        "Subtitle": "Usages",
        "Code": [
          "    if (func_idx < (int) (sizeof(test_funcs) / sizeof(TestWrapper_t))) {",
          "        fp = test_funcs[func_idx];"
        ]
      },
      "Suggestion": "Consider passing 'test_funcs' explicitly as argument to the function 'dispatch_test' and use that argument instead; use the 'restrict' keyword for 'test_funcs' to hint the compiler that it is free of aliasing",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR001"
    },
    {
      "Check": "PWR001",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/build/tests/test_suite_platform.c:540:1",
      "Title": "Declare global variables as function parameters",
      "RelatedCodeList": {
        "Subtitle": "Usages",
        "Code": [
          "    if (func_idx < (int) (sizeof(test_funcs)/sizeof(TestWrapper_t))) {",
          "        fp = test_funcs[func_idx];"
        ]
      },
      "Suggestion": "Consider passing 'test_funcs' explicitly as argument to the function 'check_test' and use that argument instead; use the 'restrict' keyword for 'test_funcs' to hint the compiler that it is free of aliasing",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR001"
    },
    {
      "Check": "PWR001",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/build/tests/test_suite_platform.c:882:1",
      "Title": "Declare global variables as function parameters",
      "RelatedCodeList": {
        "Subtitle": "Usages",
        "Code": [
          "    if (platform == NULL) {",
          "        platform = getenv(\"MBEDTLS_TEST_PLATFORM\");",
          "        if (platform == NULL) {",
          "            platform = \"unknown\";",
          "    if (configuration == NULL) {",
          "        configuration = getenv(\"MBEDTLS_TEST_CONFIGURATION\");",
          "        if (configuration == NULL) {",
          "            configuration = \"unknown\";",
          "    if (test_suite == NULL) {",
          "        test_suite = strrchr(argv0, '/');",
          "        if (test_suite != NULL) {",
          "            test_suite += 1; // skip the '/'",
          "            test_suite = argv0;",
          "                    platform, configuration, test_suite, test_case);"
        ]
      },
      "Suggestion": "Consider passing 'platform', 'configuration' and 'test_suite' explicitly as arguments to the function 'write_outcome_entry' and use those arguments instead; use the 'restrict' keyword for 'platform', 'configuration' and 'test_suite' to hint the compiler that they are free of aliasing if you can guarantee it",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR001"
    },
    {
      "Check": "PWR001",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/build/tests/test_suite_platform_printf.c:429:1",
      "Title": "Declare global variables as function parameters",
      "RelatedCodeList": {
        "Subtitle": "Usages",
        "Code": [
          "    if (func_idx < (int) (sizeof(test_funcs) / sizeof(TestWrapper_t))) {",
          "        fp = test_funcs[func_idx];"
        ]
      },
      "Suggestion": "Consider passing 'test_funcs' explicitly as argument to the function 'dispatch_test' and use that argument instead; use the 'restrict' keyword for 'test_funcs' to hint the compiler that it is free of aliasing",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR001"
    },
    {
      "Check": "PWR001",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/build/tests/test_suite_platform_printf.c:467:1",
      "Title": "Declare global variables as function parameters",
      "RelatedCodeList": {
        "Subtitle": "Usages",
        "Code": [
          "    if (func_idx < (int) (sizeof(test_funcs)/sizeof(TestWrapper_t))) {",
          "        fp = test_funcs[func_idx];"
        ]
      },
      "Suggestion": "Consider passing 'test_funcs' explicitly as argument to the function 'check_test' and use that argument instead; use the 'restrict' keyword for 'test_funcs' to hint the compiler that it is free of aliasing",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR001"
    },
    {
      "Check": "PWR001",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/build/tests/test_suite_platform_printf.c:809:1",
      "Title": "Declare global variables as function parameters",
      "RelatedCodeList": {
        "Subtitle": "Usages",
        "Code": [
          "    if (platform == NULL) {",
          "        platform = getenv(\"MBEDTLS_TEST_PLATFORM\");",
          "        if (platform == NULL) {",
          "            platform = \"unknown\";",
          "    if (configuration == NULL) {",
          "        configuration = getenv(\"MBEDTLS_TEST_CONFIGURATION\");",
          "        if (configuration == NULL) {",
          "            configuration = \"unknown\";",
          "    if (test_suite == NULL) {",
          "        test_suite = strrchr(argv0, '/');",
          "        if (test_suite != NULL) {",
          "            test_suite += 1; // skip the '/'",
          "            test_suite = argv0;",
          "                    platform, configuration, test_suite, test_case);"
        ]
      },
      "Suggestion": "Consider passing 'platform', 'configuration' and 'test_suite' explicitly as arguments to the function 'write_outcome_entry' and use those arguments instead; use the 'restrict' keyword for 'platform', 'configuration' and 'test_suite' to hint the compiler that they are free of aliasing if you can guarantee it",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR001"
    },
    {
      "Check": "PWR001",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/build/tests/test_suite_platform_util.c:348:1",
      "Title": "Declare global variables as function parameters",
      "RelatedCodeList": {
        "Subtitle": "Usages",
        "Code": [
          "    if (func_idx < (int) (sizeof(test_funcs) / sizeof(TestWrapper_t))) {",
          "        fp = test_funcs[func_idx];"
        ]
      },
      "Suggestion": "Consider passing 'test_funcs' explicitly as argument to the function 'dispatch_test' and use that argument instead; use the 'restrict' keyword for 'test_funcs' to hint the compiler that it is free of aliasing",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR001"
    },
    {
      "Check": "PWR001",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/build/tests/test_suite_platform_util.c:386:1",
      "Title": "Declare global variables as function parameters",
      "RelatedCodeList": {
        "Subtitle": "Usages",
        "Code": [
          "    if (func_idx < (int) (sizeof(test_funcs)/sizeof(TestWrapper_t))) {",
          "        fp = test_funcs[func_idx];"
        ]
      },
      "Suggestion": "Consider passing 'test_funcs' explicitly as argument to the function 'check_test' and use that argument instead; use the 'restrict' keyword for 'test_funcs' to hint the compiler that it is free of aliasing",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR001"
    },
    {
      "Check": "PWR001",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/build/tests/test_suite_platform_util.c:728:1",
      "Title": "Declare global variables as function parameters",
      "RelatedCodeList": {
        "Subtitle": "Usages",
        "Code": [
          "    if (platform == NULL) {",
          "        platform = getenv(\"MBEDTLS_TEST_PLATFORM\");",
          "        if (platform == NULL) {",
          "            platform = \"unknown\";",
          "    if (configuration == NULL) {",
          "        configuration = getenv(\"MBEDTLS_TEST_CONFIGURATION\");",
          "        if (configuration == NULL) {",
          "            configuration = \"unknown\";",
          "    if (test_suite == NULL) {",
          "        test_suite = strrchr(argv0, '/');",
          "        if (test_suite != NULL) {",
          "            test_suite += 1; // skip the '/'",
          "            test_suite = argv0;",
          "                    platform, configuration, test_suite, test_case);"
        ]
      },
      "Suggestion": "Consider passing 'platform', 'configuration' and 'test_suite' explicitly as arguments to the function 'write_outcome_entry' and use those arguments instead; use the 'restrict' keyword for 'platform', 'configuration' and 'test_suite' to hint the compiler that they are free of aliasing if you can guarantee it",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR001"
    },
    {
      "Check": "PWR001",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/build/tests/test_suite_poly1305.c:400:1",
      "Title": "Declare global variables as function parameters",
      "RelatedCodeList": {
        "Subtitle": "Usages",
        "Code": [
          "    if (func_idx < (int) (sizeof(test_funcs) / sizeof(TestWrapper_t))) {",
          "        fp = test_funcs[func_idx];"
        ]
      },
      "Suggestion": "Consider passing 'test_funcs' explicitly as argument to the function 'dispatch_test' and use that argument instead; use the 'restrict' keyword for 'test_funcs' to hint the compiler that it is free of aliasing",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR001"
    },
    {
      "Check": "PWR001",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/build/tests/test_suite_poly1305.c:438:1",
      "Title": "Declare global variables as function parameters",
      "RelatedCodeList": {
        "Subtitle": "Usages",
        "Code": [
          "    if (func_idx < (int) (sizeof(test_funcs)/sizeof(TestWrapper_t))) {",
          "        fp = test_funcs[func_idx];"
        ]
      },
      "Suggestion": "Consider passing 'test_funcs' explicitly as argument to the function 'check_test' and use that argument instead; use the 'restrict' keyword for 'test_funcs' to hint the compiler that it is free of aliasing",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR001"
    },
    {
      "Check": "PWR001",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/build/tests/test_suite_poly1305.c:780:1",
      "Title": "Declare global variables as function parameters",
      "RelatedCodeList": {
        "Subtitle": "Usages",
        "Code": [
          "    if (platform == NULL) {",
          "        platform = getenv(\"MBEDTLS_TEST_PLATFORM\");",
          "        if (platform == NULL) {",
          "            platform = \"unknown\";",
          "    if (configuration == NULL) {",
          "        configuration = getenv(\"MBEDTLS_TEST_CONFIGURATION\");",
          "        if (configuration == NULL) {",
          "            configuration = \"unknown\";",
          "    if (test_suite == NULL) {",
          "        test_suite = strrchr(argv0, '/');",
          "        if (test_suite != NULL) {",
          "            test_suite += 1; // skip the '/'",
          "            test_suite = argv0;",
          "                    platform, configuration, test_suite, test_case);"
        ]
      },
      "Suggestion": "Consider passing 'platform', 'configuration' and 'test_suite' explicitly as arguments to the function 'write_outcome_entry' and use those arguments instead; use the 'restrict' keyword for 'platform', 'configuration' and 'test_suite' to hint the compiler that they are free of aliasing if you can guarantee it",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR001"
    },
    {
      "Check": "PWR001",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/build/tests/test_suite_psa_crypto.c:14715:1",
      "Title": "Declare global variables as function parameters",
      "RelatedCodeList": {
        "Subtitle": "Usages",
        "Code": [
          "    if (func_idx < (int) (sizeof(test_funcs) / sizeof(TestWrapper_t))) {",
          "        fp = test_funcs[func_idx];"
        ]
      },
      "Suggestion": "Consider passing 'test_funcs' explicitly as argument to the function 'dispatch_test' and use that argument instead; use the 'restrict' keyword for 'test_funcs' to hint the compiler that it is free of aliasing",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR001"
    },
    {
      "Check": "PWR001",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/build/tests/test_suite_psa_crypto.c:14753:1",
      "Title": "Declare global variables as function parameters",
      "RelatedCodeList": {
        "Subtitle": "Usages",
        "Code": [
          "    if (func_idx < (int) (sizeof(test_funcs)/sizeof(TestWrapper_t))) {",
          "        fp = test_funcs[func_idx];"
        ]
      },
      "Suggestion": "Consider passing 'test_funcs' explicitly as argument to the function 'check_test' and use that argument instead; use the 'restrict' keyword for 'test_funcs' to hint the compiler that it is free of aliasing",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR001"
    },
    {
      "Check": "PWR001",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/build/tests/test_suite_psa_crypto.c:15095:1",
      "Title": "Declare global variables as function parameters",
      "RelatedCodeList": {
        "Subtitle": "Usages",
        "Code": [
          "    if (platform == NULL) {",
          "        platform = getenv(\"MBEDTLS_TEST_PLATFORM\");",
          "        if (platform == NULL) {",
          "            platform = \"unknown\";",
          "    if (configuration == NULL) {",
          "        configuration = getenv(\"MBEDTLS_TEST_CONFIGURATION\");",
          "        if (configuration == NULL) {",
          "            configuration = \"unknown\";",
          "    if (test_suite == NULL) {",
          "        test_suite = strrchr(argv0, '/');",
          "        if (test_suite != NULL) {",
          "            test_suite += 1; // skip the '/'",
          "            test_suite = argv0;",
          "                    platform, configuration, test_suite, test_case);"
        ]
      },
      "Suggestion": "Consider passing 'platform', 'configuration' and 'test_suite' explicitly as arguments to the function 'write_outcome_entry' and use those arguments instead; use the 'restrict' keyword for 'platform', 'configuration' and 'test_suite' to hint the compiler that they are free of aliasing if you can guarantee it",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR001"
    },
    {
      "Check": "PWR001",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/build/tests/test_suite_psa_crypto.pbkdf2.c:12331:1",
      "Title": "Declare global variables as function parameters",
      "RelatedCodeList": {
        "Subtitle": "Usages",
        "Code": [
          "    if (func_idx < (int) (sizeof(test_funcs) / sizeof(TestWrapper_t))) {",
          "        fp = test_funcs[func_idx];"
        ]
      },
      "Suggestion": "Consider passing 'test_funcs' explicitly as argument to the function 'dispatch_test' and use that argument instead; use the 'restrict' keyword for 'test_funcs' to hint the compiler that it is free of aliasing",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR001"
    },
    {
      "Check": "PWR001",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/build/tests/test_suite_psa_crypto.pbkdf2.c:12369:1",
      "Title": "Declare global variables as function parameters",
      "RelatedCodeList": {
        "Subtitle": "Usages",
        "Code": [
          "    if (func_idx < (int) (sizeof(test_funcs)/sizeof(TestWrapper_t))) {",
          "        fp = test_funcs[func_idx];"
        ]
      },
      "Suggestion": "Consider passing 'test_funcs' explicitly as argument to the function 'check_test' and use that argument instead; use the 'restrict' keyword for 'test_funcs' to hint the compiler that it is free of aliasing",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR001"
    },
    {
      "Check": "PWR001",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/build/tests/test_suite_psa_crypto.pbkdf2.c:12711:1",
      "Title": "Declare global variables as function parameters",
      "RelatedCodeList": {
        "Subtitle": "Usages",
        "Code": [
          "    if (platform == NULL) {",
          "        platform = getenv(\"MBEDTLS_TEST_PLATFORM\");",
          "        if (platform == NULL) {",
          "            platform = \"unknown\";",
          "    if (configuration == NULL) {",
          "        configuration = getenv(\"MBEDTLS_TEST_CONFIGURATION\");",
          "        if (configuration == NULL) {",
          "            configuration = \"unknown\";",
          "    if (test_suite == NULL) {",
          "        test_suite = strrchr(argv0, '/');",
          "        if (test_suite != NULL) {",
          "            test_suite += 1; // skip the '/'",
          "            test_suite = argv0;",
          "                    platform, configuration, test_suite, test_case);"
        ]
      },
      "Suggestion": "Consider passing 'platform', 'configuration' and 'test_suite' explicitly as arguments to the function 'write_outcome_entry' and use those arguments instead; use the 'restrict' keyword for 'platform', 'configuration' and 'test_suite' to hint the compiler that they are free of aliasing if you can guarantee it",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR001"
    },
    {
      "Check": "PWR001",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/build/tests/test_suite_psa_crypto_attributes.c:511:1",
      "Title": "Declare global variables as function parameters",
      "RelatedCodeList": {
        "Subtitle": "Usages",
        "Code": [
          "    if (func_idx < (int) (sizeof(test_funcs) / sizeof(TestWrapper_t))) {",
          "        fp = test_funcs[func_idx];"
        ]
      },
      "Suggestion": "Consider passing 'test_funcs' explicitly as argument to the function 'dispatch_test' and use that argument instead; use the 'restrict' keyword for 'test_funcs' to hint the compiler that it is free of aliasing",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR001"
    },
    {
      "Check": "PWR001",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/build/tests/test_suite_psa_crypto_attributes.c:549:1",
      "Title": "Declare global variables as function parameters",
      "RelatedCodeList": {
        "Subtitle": "Usages",
        "Code": [
          "    if (func_idx < (int) (sizeof(test_funcs)/sizeof(TestWrapper_t))) {",
          "        fp = test_funcs[func_idx];"
        ]
      },
      "Suggestion": "Consider passing 'test_funcs' explicitly as argument to the function 'check_test' and use that argument instead; use the 'restrict' keyword for 'test_funcs' to hint the compiler that it is free of aliasing",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR001"
    },
    {
      "Check": "PWR001",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/build/tests/test_suite_psa_crypto_attributes.c:891:1",
      "Title": "Declare global variables as function parameters",
      "RelatedCodeList": {
        "Subtitle": "Usages",
        "Code": [
          "    if (platform == NULL) {",
          "        platform = getenv(\"MBEDTLS_TEST_PLATFORM\");",
          "        if (platform == NULL) {",
          "            platform = \"unknown\";",
          "    if (configuration == NULL) {",
          "        configuration = getenv(\"MBEDTLS_TEST_CONFIGURATION\");",
          "        if (configuration == NULL) {",
          "            configuration = \"unknown\";",
          "    if (test_suite == NULL) {",
          "        test_suite = strrchr(argv0, '/');",
          "        if (test_suite != NULL) {",
          "            test_suite += 1; // skip the '/'",
          "            test_suite = argv0;",
          "                    platform, configuration, test_suite, test_case);"
        ]
      },
      "Suggestion": "Consider passing 'platform', 'configuration' and 'test_suite' explicitly as arguments to the function 'write_outcome_entry' and use those arguments instead; use the 'restrict' keyword for 'platform', 'configuration' and 'test_suite' to hint the compiler that they are free of aliasing if you can guarantee it",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR001"
    },
    {
      "Check": "PWR001",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/build/tests/test_suite_psa_crypto_driver_wrappers.c:4784:1",
      "Title": "Declare global variables as function parameters",
      "RelatedCodeList": {
        "Subtitle": "Usages",
        "Code": [
          "    if (func_idx < (int) (sizeof(test_funcs) / sizeof(TestWrapper_t))) {",
          "        fp = test_funcs[func_idx];"
        ]
      },
      "Suggestion": "Consider passing 'test_funcs' explicitly as argument to the function 'dispatch_test' and use that argument instead; use the 'restrict' keyword for 'test_funcs' to hint the compiler that it is free of aliasing",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR001"
    },
    {
      "Check": "PWR001",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/build/tests/test_suite_psa_crypto_driver_wrappers.c:4822:1",
      "Title": "Declare global variables as function parameters",
      "RelatedCodeList": {
        "Subtitle": "Usages",
        "Code": [
          "    if (func_idx < (int) (sizeof(test_funcs)/sizeof(TestWrapper_t))) {",
          "        fp = test_funcs[func_idx];"
        ]
      },
      "Suggestion": "Consider passing 'test_funcs' explicitly as argument to the function 'check_test' and use that argument instead; use the 'restrict' keyword for 'test_funcs' to hint the compiler that it is free of aliasing",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR001"
    },
    {
      "Check": "PWR001",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/build/tests/test_suite_psa_crypto_driver_wrappers.c:5164:1",
      "Title": "Declare global variables as function parameters",
      "RelatedCodeList": {
        "Subtitle": "Usages",
        "Code": [
          "    if (platform == NULL) {",
          "        platform = getenv(\"MBEDTLS_TEST_PLATFORM\");",
          "        if (platform == NULL) {",
          "            platform = \"unknown\";",
          "    if (configuration == NULL) {",
          "        configuration = getenv(\"MBEDTLS_TEST_CONFIGURATION\");",
          "        if (configuration == NULL) {",
          "            configuration = \"unknown\";",
          "    if (test_suite == NULL) {",
          "        test_suite = strrchr(argv0, '/');",
          "        if (test_suite != NULL) {",
          "            test_suite += 1; // skip the '/'",
          "            test_suite = argv0;",
          "                    platform, configuration, test_suite, test_case);"
        ]
      },
      "Suggestion": "Consider passing 'platform', 'configuration' and 'test_suite' explicitly as arguments to the function 'write_outcome_entry' and use those arguments instead; use the 'restrict' keyword for 'platform', 'configuration' and 'test_suite' to hint the compiler that they are free of aliasing if you can guarantee it",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR001"
    },
    {
      "Check": "PWR001",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/build/tests/test_suite_psa_crypto_entropy.c:789:1",
      "Title": "Declare global variables as function parameters",
      "RelatedCodeList": {
        "Subtitle": "Usages",
        "Code": [
          "    if (func_idx < (int) (sizeof(test_funcs) / sizeof(TestWrapper_t))) {",
          "        fp = test_funcs[func_idx];"
        ]
      },
      "Suggestion": "Consider passing 'test_funcs' explicitly as argument to the function 'dispatch_test' and use that argument instead; use the 'restrict' keyword for 'test_funcs' to hint the compiler that it is free of aliasing",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR001"
    },
    {
      "Check": "PWR001",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/build/tests/test_suite_psa_crypto_entropy.c:827:1",
      "Title": "Declare global variables as function parameters",
      "RelatedCodeList": {
        "Subtitle": "Usages",
        "Code": [
          "    if (func_idx < (int) (sizeof(test_funcs)/sizeof(TestWrapper_t))) {",
          "        fp = test_funcs[func_idx];"
        ]
      },
      "Suggestion": "Consider passing 'test_funcs' explicitly as argument to the function 'check_test' and use that argument instead; use the 'restrict' keyword for 'test_funcs' to hint the compiler that it is free of aliasing",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR001"
    },
    {
      "Check": "PWR001",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/build/tests/test_suite_psa_crypto_entropy.c:1169:1",
      "Title": "Declare global variables as function parameters",
      "RelatedCodeList": {
        "Subtitle": "Usages",
        "Code": [
          "    if (platform == NULL) {",
          "        platform = getenv(\"MBEDTLS_TEST_PLATFORM\");",
          "        if (platform == NULL) {",
          "            platform = \"unknown\";",
          "    if (configuration == NULL) {",
          "        configuration = getenv(\"MBEDTLS_TEST_CONFIGURATION\");",
          "        if (configuration == NULL) {",
          "            configuration = \"unknown\";",
          "    if (test_suite == NULL) {",
          "        test_suite = strrchr(argv0, '/');",
          "        if (test_suite != NULL) {",
          "            test_suite += 1; // skip the '/'",
          "            test_suite = argv0;",
          "                    platform, configuration, test_suite, test_case);"
        ]
      },
      "Suggestion": "Consider passing 'platform', 'configuration' and 'test_suite' explicitly as arguments to the function 'write_outcome_entry' and use those arguments instead; use the 'restrict' keyword for 'platform', 'configuration' and 'test_suite' to hint the compiler that they are free of aliasing if you can guarantee it",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR001"
    },
    {
      "Check": "PWR001",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/build/tests/test_suite_psa_crypto_generate_key.generated.c:985:1",
      "Title": "Declare global variables as function parameters",
      "RelatedCodeList": {
        "Subtitle": "Usages",
        "Code": [
          "    if (func_idx < (int) (sizeof(test_funcs) / sizeof(TestWrapper_t))) {",
          "        fp = test_funcs[func_idx];"
        ]
      },
      "Suggestion": "Consider passing 'test_funcs' explicitly as argument to the function 'dispatch_test' and use that argument instead; use the 'restrict' keyword for 'test_funcs' to hint the compiler that it is free of aliasing",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR001"
    },
    {
      "Check": "PWR001",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/build/tests/test_suite_psa_crypto_generate_key.generated.c:1023:1",
      "Title": "Declare global variables as function parameters",
      "RelatedCodeList": {
        "Subtitle": "Usages",
        "Code": [
          "    if (func_idx < (int) (sizeof(test_funcs)/sizeof(TestWrapper_t))) {",
          "        fp = test_funcs[func_idx];"
        ]
      },
      "Suggestion": "Consider passing 'test_funcs' explicitly as argument to the function 'check_test' and use that argument instead; use the 'restrict' keyword for 'test_funcs' to hint the compiler that it is free of aliasing",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR001"
    },
    {
      "Check": "PWR001",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/build/tests/test_suite_psa_crypto_generate_key.generated.c:1365:1",
      "Title": "Declare global variables as function parameters",
      "RelatedCodeList": {
        "Subtitle": "Usages",
        "Code": [
          "    if (platform == NULL) {",
          "        platform = getenv(\"MBEDTLS_TEST_PLATFORM\");",
          "        if (platform == NULL) {",
          "            platform = \"unknown\";",
          "    if (configuration == NULL) {",
          "        configuration = getenv(\"MBEDTLS_TEST_CONFIGURATION\");",
          "        if (configuration == NULL) {",
          "            configuration = \"unknown\";",
          "    if (test_suite == NULL) {",
          "        test_suite = strrchr(argv0, '/');",
          "        if (test_suite != NULL) {",
          "            test_suite += 1; // skip the '/'",
          "            test_suite = argv0;",
          "                    platform, configuration, test_suite, test_case);"
        ]
      },
      "Suggestion": "Consider passing 'platform', 'configuration' and 'test_suite' explicitly as arguments to the function 'write_outcome_entry' and use those arguments instead; use the 'restrict' keyword for 'platform', 'configuration' and 'test_suite' to hint the compiler that they are free of aliasing if you can guarantee it",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR001"
    },
    {
      "Check": "PWR001",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/build/tests/test_suite_psa_crypto_hash.c:627:1",
      "Title": "Declare global variables as function parameters",
      "RelatedCodeList": {
        "Subtitle": "Usages",
        "Code": [
          "    if (func_idx < (int) (sizeof(test_funcs) / sizeof(TestWrapper_t))) {",
          "        fp = test_funcs[func_idx];"
        ]
      },
      "Suggestion": "Consider passing 'test_funcs' explicitly as argument to the function 'dispatch_test' and use that argument instead; use the 'restrict' keyword for 'test_funcs' to hint the compiler that it is free of aliasing",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR001"
    },
    {
      "Check": "PWR001",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/build/tests/test_suite_psa_crypto_hash.c:665:1",
      "Title": "Declare global variables as function parameters",
      "RelatedCodeList": {
        "Subtitle": "Usages",
        "Code": [
          "    if (func_idx < (int) (sizeof(test_funcs)/sizeof(TestWrapper_t))) {",
          "        fp = test_funcs[func_idx];"
        ]
      },
      "Suggestion": "Consider passing 'test_funcs' explicitly as argument to the function 'check_test' and use that argument instead; use the 'restrict' keyword for 'test_funcs' to hint the compiler that it is free of aliasing",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR001"
    },
    {
      "Check": "PWR001",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/build/tests/test_suite_psa_crypto_hash.c:1007:1",
      "Title": "Declare global variables as function parameters",
      "RelatedCodeList": {
        "Subtitle": "Usages",
        "Code": [
          "    if (platform == NULL) {",
          "        platform = getenv(\"MBEDTLS_TEST_PLATFORM\");",
          "        if (platform == NULL) {",
          "            platform = \"unknown\";",
          "    if (configuration == NULL) {",
          "        configuration = getenv(\"MBEDTLS_TEST_CONFIGURATION\");",
          "        if (configuration == NULL) {",
          "            configuration = \"unknown\";",
          "    if (test_suite == NULL) {",
          "        test_suite = strrchr(argv0, '/');",
          "        if (test_suite != NULL) {",
          "            test_suite += 1; // skip the '/'",
          "            test_suite = argv0;",
          "                    platform, configuration, test_suite, test_case);"
        ]
      },
      "Suggestion": "Consider passing 'platform', 'configuration' and 'test_suite' explicitly as arguments to the function 'write_outcome_entry' and use those arguments instead; use the 'restrict' keyword for 'platform', 'configuration' and 'test_suite' to hint the compiler that they are free of aliasing if you can guarantee it",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR001"
    },
    {
      "Check": "PWR001",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/build/tests/test_suite_psa_crypto_init.c:230:1",
      "Title": "Declare global variables as function parameters",
      "RelatedCodeList": {
        "Subtitle": "Usages",
        "Code": [
          "    if (custom_entropy_sources_mask & ENTROPY_SOURCE_PLATFORM) {",
          "    if (custom_entropy_sources_mask & ENTROPY_SOURCE_FAKE) {",
          "                                   fake_entropy_source, &fake_entropy_state,",
          "                                   fake_entropy_state.threshold,"
        ]
      },
      "Suggestion": "Consider passing 'custom_entropy_sources_mask' and 'fake_entropy_state' explicitly as arguments to the function 'custom_entropy_init' and use those arguments instead; use the 'restrict' keyword for 'custom_entropy_sources_mask' and 'fake_entropy_state' to hint the compiler that they are free of aliasing",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR001"
    },
    {
      "Check": "PWR001",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/build/tests/test_suite_psa_crypto_init.c:387:1",
      "Title": "Declare global variables as function parameters",
      "RelatedCodeList": {
        "Subtitle": "Usages",
        "Code": [
          "    custom_entropy_sources_mask = sources_arg;"
        ]
      },
      "Suggestion": "Consider passing 'custom_entropy_sources_mask' explicitly as argument to the function 'test_custom_entropy_sources' and use that argument instead; use the 'restrict' keyword for 'custom_entropy_sources_mask' to hint the compiler that it is free of aliasing",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR001"
    },
    {
      "Check": "PWR001",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/build/tests/test_suite_psa_crypto_init.c:415:1",
      "Title": "Declare global variables as function parameters",
      "RelatedCodeList": {
        "Subtitle": "Usages",
        "Code": [
          "    fake_entropy_state.threshold = threshold;",
          "    fake_entropy_state.step = 0;",
          "    fake_entropy_state.max_steps = 0;",
          "        lengths[fake_entropy_state.max_steps++] = amount1;",
          "        lengths[fake_entropy_state.max_steps++] = amount2;",
          "        lengths[fake_entropy_state.max_steps++] = amount3;",
          "        lengths[fake_entropy_state.max_steps++] = amount4;",
          "    fake_entropy_state.length_sequence = lengths;",
          "    custom_entropy_sources_mask = ENTROPY_SOURCE_FAKE;"
        ]
      },
      "Suggestion": "Consider passing 'fake_entropy_state' and 'custom_entropy_sources_mask' explicitly as arguments to the function 'test_fake_entropy_source' and use those arguments instead; use the 'restrict' keyword for 'fake_entropy_state' and 'custom_entropy_sources_mask' to hint the compiler that they are free of aliasing",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR001"
    },
    {
      "Check": "PWR001",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/build/tests/test_suite_psa_crypto_init.c:735:1",
      "Title": "Declare global variables as function parameters",
      "RelatedCodeList": {
        "Subtitle": "Usages",
        "Code": [
          "    if (func_idx < (int) (sizeof(test_funcs) / sizeof(TestWrapper_t))) {",
          "        fp = test_funcs[func_idx];"
        ]
      },
      "Suggestion": "Consider passing 'test_funcs' explicitly as argument to the function 'dispatch_test' and use that argument instead; use the 'restrict' keyword for 'test_funcs' to hint the compiler that it is free of aliasing",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR001"
    },
    {
      "Check": "PWR001",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/build/tests/test_suite_psa_crypto_init.c:773:1",
      "Title": "Declare global variables as function parameters",
      "RelatedCodeList": {
        "Subtitle": "Usages",
        "Code": [
          "    if (func_idx < (int) (sizeof(test_funcs)/sizeof(TestWrapper_t))) {",
          "        fp = test_funcs[func_idx];"
        ]
      },
      "Suggestion": "Consider passing 'test_funcs' explicitly as argument to the function 'check_test' and use that argument instead; use the 'restrict' keyword for 'test_funcs' to hint the compiler that it is free of aliasing",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR001"
    },
    {
      "Check": "PWR001",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/build/tests/test_suite_psa_crypto_init.c:1115:1",
      "Title": "Declare global variables as function parameters",
      "RelatedCodeList": {
        "Subtitle": "Usages",
        "Code": [
          "    if (platform == NULL) {",
          "        platform = getenv(\"MBEDTLS_TEST_PLATFORM\");",
          "        if (platform == NULL) {",
          "            platform = \"unknown\";",
          "    if (configuration == NULL) {",
          "        configuration = getenv(\"MBEDTLS_TEST_CONFIGURATION\");",
          "        if (configuration == NULL) {",
          "            configuration = \"unknown\";",
          "    if (test_suite == NULL) {",
          "        test_suite = strrchr(argv0, '/');",
          "        if (test_suite != NULL) {",
          "            test_suite += 1; // skip the '/'",
          "            test_suite = argv0;",
          "                    platform, configuration, test_suite, test_case);"
        ]
      },
      "Suggestion": "Consider passing 'platform', 'configuration' and 'test_suite' explicitly as arguments to the function 'write_outcome_entry' and use those arguments instead; use the 'restrict' keyword for 'platform', 'configuration' and 'test_suite' to hint the compiler that they are free of aliasing if you can guarantee it",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR001"
    },
    {
      "Check": "PWR001",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/build/tests/test_suite_psa_crypto_low_hash.generated.c:607:1",
      "Title": "Declare global variables as function parameters",
      "RelatedCodeList": {
        "Subtitle": "Usages",
        "Code": [
          "    if (func_idx < (int) (sizeof(test_funcs) / sizeof(TestWrapper_t))) {",
          "        fp = test_funcs[func_idx];"
        ]
      },
      "Suggestion": "Consider passing 'test_funcs' explicitly as argument to the function 'dispatch_test' and use that argument instead; use the 'restrict' keyword for 'test_funcs' to hint the compiler that it is free of aliasing",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR001"
    },
    {
      "Check": "PWR001",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/build/tests/test_suite_psa_crypto_low_hash.generated.c:645:1",
      "Title": "Declare global variables as function parameters",
      "RelatedCodeList": {
        "Subtitle": "Usages",
        "Code": [
          "    if (func_idx < (int) (sizeof(test_funcs)/sizeof(TestWrapper_t))) {",
          "        fp = test_funcs[func_idx];"
        ]
      },
      "Suggestion": "Consider passing 'test_funcs' explicitly as argument to the function 'check_test' and use that argument instead; use the 'restrict' keyword for 'test_funcs' to hint the compiler that it is free of aliasing",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR001"
    },
    {
      "Check": "PWR001",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/build/tests/test_suite_psa_crypto_low_hash.generated.c:987:1",
      "Title": "Declare global variables as function parameters",
      "RelatedCodeList": {
        "Subtitle": "Usages",
        "Code": [
          "    if (platform == NULL) {",
          "        platform = getenv(\"MBEDTLS_TEST_PLATFORM\");",
          "        if (platform == NULL) {",
          "            platform = \"unknown\";",
          "    if (configuration == NULL) {",
          "        configuration = getenv(\"MBEDTLS_TEST_CONFIGURATION\");",
          "        if (configuration == NULL) {",
          "            configuration = \"unknown\";",
          "    if (test_suite == NULL) {",
          "        test_suite = strrchr(argv0, '/');",
          "        if (test_suite != NULL) {",
          "            test_suite += 1; // skip the '/'",
          "            test_suite = argv0;",
          "                    platform, configuration, test_suite, test_case);"
        ]
      },
      "Suggestion": "Consider passing 'platform', 'configuration' and 'test_suite' explicitly as arguments to the function 'write_outcome_entry' and use those arguments instead; use the 'restrict' keyword for 'platform', 'configuration' and 'test_suite' to hint the compiler that they are free of aliasing if you can guarantee it",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR001"
    },
    {
      "Check": "PWR001",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/build/tests/test_suite_psa_crypto_metadata.c:2394:1",
      "Title": "Declare global variables as function parameters",
      "RelatedCodeList": {
        "Subtitle": "Usages",
        "Code": [
          "    if (func_idx < (int) (sizeof(test_funcs) / sizeof(TestWrapper_t))) {",
          "        fp = test_funcs[func_idx];"
        ]
      },
      "Suggestion": "Consider passing 'test_funcs' explicitly as argument to the function 'dispatch_test' and use that argument instead; use the 'restrict' keyword for 'test_funcs' to hint the compiler that it is free of aliasing",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR001"
    },
    {
      "Check": "PWR001",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/build/tests/test_suite_psa_crypto_metadata.c:2432:1",
      "Title": "Declare global variables as function parameters",
      "RelatedCodeList": {
        "Subtitle": "Usages",
        "Code": [
          "    if (func_idx < (int) (sizeof(test_funcs)/sizeof(TestWrapper_t))) {",
          "        fp = test_funcs[func_idx];"
        ]
      },
      "Suggestion": "Consider passing 'test_funcs' explicitly as argument to the function 'check_test' and use that argument instead; use the 'restrict' keyword for 'test_funcs' to hint the compiler that it is free of aliasing",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR001"
    },
    {
      "Check": "PWR001",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/build/tests/test_suite_psa_crypto_metadata.c:2774:1",
      "Title": "Declare global variables as function parameters",
      "RelatedCodeList": {
        "Subtitle": "Usages",
        "Code": [
          "    if (platform == NULL) {",
          "        platform = getenv(\"MBEDTLS_TEST_PLATFORM\");",
          "        if (platform == NULL) {",
          "            platform = \"unknown\";",
          "    if (configuration == NULL) {",
          "        configuration = getenv(\"MBEDTLS_TEST_CONFIGURATION\");",
          "        if (configuration == NULL) {",
          "            configuration = \"unknown\";",
          "    if (test_suite == NULL) {",
          "        test_suite = strrchr(argv0, '/');",
          "        if (test_suite != NULL) {",
          "            test_suite += 1; // skip the '/'",
          "            test_suite = argv0;",
          "                    platform, configuration, test_suite, test_case);"
        ]
      },
      "Suggestion": "Consider passing 'platform', 'configuration' and 'test_suite' explicitly as arguments to the function 'write_outcome_entry' and use those arguments instead; use the 'restrict' keyword for 'platform', 'configuration' and 'test_suite' to hint the compiler that they are free of aliasing if you can guarantee it",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR001"
    },
    {
      "Check": "PWR001",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/build/tests/test_suite_psa_crypto_not_supported.generated.c:1425:1",
      "Title": "Declare global variables as function parameters",
      "RelatedCodeList": {
        "Subtitle": "Usages",
        "Code": [
          "    if (func_idx < (int) (sizeof(test_funcs) / sizeof(TestWrapper_t))) {",
          "        fp = test_funcs[func_idx];"
        ]
      },
      "Suggestion": "Consider passing 'test_funcs' explicitly as argument to the function 'dispatch_test' and use that argument instead; use the 'restrict' keyword for 'test_funcs' to hint the compiler that it is free of aliasing",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR001"
    },
    {
      "Check": "PWR001",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/build/tests/test_suite_psa_crypto_not_supported.generated.c:1463:1",
      "Title": "Declare global variables as function parameters",
      "RelatedCodeList": {
        "Subtitle": "Usages",
        "Code": [
          "    if (func_idx < (int) (sizeof(test_funcs)/sizeof(TestWrapper_t))) {",
          "        fp = test_funcs[func_idx];"
        ]
      },
      "Suggestion": "Consider passing 'test_funcs' explicitly as argument to the function 'check_test' and use that argument instead; use the 'restrict' keyword for 'test_funcs' to hint the compiler that it is free of aliasing",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR001"
    },
    {
      "Check": "PWR001",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/build/tests/test_suite_psa_crypto_not_supported.generated.c:1805:1",
      "Title": "Declare global variables as function parameters",
      "RelatedCodeList": {
        "Subtitle": "Usages",
        "Code": [
          "    if (platform == NULL) {",
          "        platform = getenv(\"MBEDTLS_TEST_PLATFORM\");",
          "        if (platform == NULL) {",
          "            platform = \"unknown\";",
          "    if (configuration == NULL) {",
          "        configuration = getenv(\"MBEDTLS_TEST_CONFIGURATION\");",
          "        if (configuration == NULL) {",
          "            configuration = \"unknown\";",
          "    if (test_suite == NULL) {",
          "        test_suite = strrchr(argv0, '/');",
          "        if (test_suite != NULL) {",
          "            test_suite += 1; // skip the '/'",
          "            test_suite = argv0;",
          "                    platform, configuration, test_suite, test_case);"
        ]
      },
      "Suggestion": "Consider passing 'platform', 'configuration' and 'test_suite' explicitly as arguments to the function 'write_outcome_entry' and use those arguments instead; use the 'restrict' keyword for 'platform', 'configuration' and 'test_suite' to hint the compiler that they are free of aliasing if you can guarantee it",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR001"
    },
    {
      "Check": "PWR001",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/build/tests/test_suite_psa_crypto_not_supported.misc.c:359:1",
      "Title": "Declare global variables as function parameters",
      "RelatedCodeList": {
        "Subtitle": "Usages",
        "Code": [
          "    if (func_idx < (int) (sizeof(test_funcs) / sizeof(TestWrapper_t))) {",
          "        fp = test_funcs[func_idx];"
        ]
      },
      "Suggestion": "Consider passing 'test_funcs' explicitly as argument to the function 'dispatch_test' and use that argument instead; use the 'restrict' keyword for 'test_funcs' to hint the compiler that it is free of aliasing",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR001"
    },
    {
      "Check": "PWR001",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/build/tests/test_suite_psa_crypto_not_supported.misc.c:397:1",
      "Title": "Declare global variables as function parameters",
      "RelatedCodeList": {
        "Subtitle": "Usages",
        "Code": [
          "    if (func_idx < (int) (sizeof(test_funcs)/sizeof(TestWrapper_t))) {",
          "        fp = test_funcs[func_idx];"
        ]
      },
      "Suggestion": "Consider passing 'test_funcs' explicitly as argument to the function 'check_test' and use that argument instead; use the 'restrict' keyword for 'test_funcs' to hint the compiler that it is free of aliasing",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR001"
    },
    {
      "Check": "PWR001",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/build/tests/test_suite_psa_crypto_not_supported.misc.c:739:1",
      "Title": "Declare global variables as function parameters",
      "RelatedCodeList": {
        "Subtitle": "Usages",
        "Code": [
          "    if (platform == NULL) {",
          "        platform = getenv(\"MBEDTLS_TEST_PLATFORM\");",
          "        if (platform == NULL) {",
          "            platform = \"unknown\";",
          "    if (configuration == NULL) {",
          "        configuration = getenv(\"MBEDTLS_TEST_CONFIGURATION\");",
          "        if (configuration == NULL) {",
          "            configuration = \"unknown\";",
          "    if (test_suite == NULL) {",
          "        test_suite = strrchr(argv0, '/');",
          "        if (test_suite != NULL) {",
          "            test_suite += 1; // skip the '/'",
          "            test_suite = argv0;",
          "                    platform, configuration, test_suite, test_case);"
        ]
      },
      "Suggestion": "Consider passing 'platform', 'configuration' and 'test_suite' explicitly as arguments to the function 'write_outcome_entry' and use those arguments instead; use the 'restrict' keyword for 'platform', 'configuration' and 'test_suite' to hint the compiler that they are free of aliasing if you can guarantee it",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR001"
    },
    {
      "Check": "PWR001",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/build/tests/test_suite_psa_crypto_op_fail.generated.c:3528:1",
      "Title": "Declare global variables as function parameters",
      "RelatedCodeList": {
        "Subtitle": "Usages",
        "Code": [
          "    if (func_idx < (int) (sizeof(test_funcs) / sizeof(TestWrapper_t))) {",
          "        fp = test_funcs[func_idx];"
        ]
      },
      "Suggestion": "Consider passing 'test_funcs' explicitly as argument to the function 'dispatch_test' and use that argument instead; use the 'restrict' keyword for 'test_funcs' to hint the compiler that it is free of aliasing",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR001"
    },
    {
      "Check": "PWR001",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/build/tests/test_suite_psa_crypto_op_fail.generated.c:3566:1",
      "Title": "Declare global variables as function parameters",
      "RelatedCodeList": {
        "Subtitle": "Usages",
        "Code": [
          "    if (func_idx < (int) (sizeof(test_funcs)/sizeof(TestWrapper_t))) {",
          "        fp = test_funcs[func_idx];"
        ]
      },
      "Suggestion": "Consider passing 'test_funcs' explicitly as argument to the function 'check_test' and use that argument instead; use the 'restrict' keyword for 'test_funcs' to hint the compiler that it is free of aliasing",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR001"
    },
    {
      "Check": "PWR001",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/build/tests/test_suite_psa_crypto_op_fail.generated.c:3908:1",
      "Title": "Declare global variables as function parameters",
      "RelatedCodeList": {
        "Subtitle": "Usages",
        "Code": [
          "    if (platform == NULL) {",
          "        platform = getenv(\"MBEDTLS_TEST_PLATFORM\");",
          "        if (platform == NULL) {",
          "            platform = \"unknown\";",
          "    if (configuration == NULL) {",
          "        configuration = getenv(\"MBEDTLS_TEST_CONFIGURATION\");",
          "        if (configuration == NULL) {",
          "            configuration = \"unknown\";",
          "    if (test_suite == NULL) {",
          "        test_suite = strrchr(argv0, '/');",
          "        if (test_suite != NULL) {",
          "            test_suite += 1; // skip the '/'",
          "            test_suite = argv0;",
          "                    platform, configuration, test_suite, test_case);"
        ]
      },
      "Suggestion": "Consider passing 'platform', 'configuration' and 'test_suite' explicitly as arguments to the function 'write_outcome_entry' and use those arguments instead; use the 'restrict' keyword for 'platform', 'configuration' and 'test_suite' to hint the compiler that they are free of aliasing if you can guarantee it",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR001"
    },
    {
      "Check": "PWR001",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/build/tests/test_suite_psa_crypto_op_fail.misc.c:860:1",
      "Title": "Declare global variables as function parameters",
      "RelatedCodeList": {
        "Subtitle": "Usages",
        "Code": [
          "    if (func_idx < (int) (sizeof(test_funcs) / sizeof(TestWrapper_t))) {",
          "        fp = test_funcs[func_idx];"
        ]
      },
      "Suggestion": "Consider passing 'test_funcs' explicitly as argument to the function 'dispatch_test' and use that argument instead; use the 'restrict' keyword for 'test_funcs' to hint the compiler that it is free of aliasing",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR001"
    },
    {
      "Check": "PWR001",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/build/tests/test_suite_psa_crypto_op_fail.misc.c:898:1",
      "Title": "Declare global variables as function parameters",
      "RelatedCodeList": {
        "Subtitle": "Usages",
        "Code": [
          "    if (func_idx < (int) (sizeof(test_funcs)/sizeof(TestWrapper_t))) {",
          "        fp = test_funcs[func_idx];"
        ]
      },
      "Suggestion": "Consider passing 'test_funcs' explicitly as argument to the function 'check_test' and use that argument instead; use the 'restrict' keyword for 'test_funcs' to hint the compiler that it is free of aliasing",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR001"
    },
    {
      "Check": "PWR001",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/build/tests/test_suite_psa_crypto_op_fail.misc.c:1240:1",
      "Title": "Declare global variables as function parameters",
      "RelatedCodeList": {
        "Subtitle": "Usages",
        "Code": [
          "    if (platform == NULL) {",
          "        platform = getenv(\"MBEDTLS_TEST_PLATFORM\");",
          "        if (platform == NULL) {",
          "            platform = \"unknown\";",
          "    if (configuration == NULL) {",
          "        configuration = getenv(\"MBEDTLS_TEST_CONFIGURATION\");",
          "        if (configuration == NULL) {",
          "            configuration = \"unknown\";",
          "    if (test_suite == NULL) {",
          "        test_suite = strrchr(argv0, '/');",
          "        if (test_suite != NULL) {",
          "            test_suite += 1; // skip the '/'",
          "            test_suite = argv0;",
          "                    platform, configuration, test_suite, test_case);"
        ]
      },
      "Suggestion": "Consider passing 'platform', 'configuration' and 'test_suite' explicitly as arguments to the function 'write_outcome_entry' and use those arguments instead; use the 'restrict' keyword for 'platform', 'configuration' and 'test_suite' to hint the compiler that they are free of aliasing if you can guarantee it",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR001"
    },
    {
      "Check": "PWR001",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/build/tests/test_suite_psa_crypto_pake.c:937:1",
      "Title": "Declare global variables as function parameters",
      "RelatedCodeList": {
        "Subtitle": "Usages",
        "Code": [
          "    PSA_ASSERT(psa_pake_set_user(&server, jpake_server_id, sizeof(jpake_server_id)));",
          "    PSA_ASSERT(psa_pake_set_peer(&server, jpake_client_id, sizeof(jpake_client_id)));",
          "    PSA_ASSERT(psa_pake_set_user(&client, jpake_client_id, sizeof(jpake_client_id)));",
          "    PSA_ASSERT(psa_pake_set_peer(&client, jpake_server_id, sizeof(jpake_server_id)));"
        ]
      },
      "Suggestion": "Consider passing 'jpake_server_id' and 'jpake_client_id' explicitly as arguments to the function 'test_ecjpake_rounds_inject' and use those arguments instead; use the 'restrict' keyword for 'jpake_server_id' and 'jpake_client_id' to hint the compiler that they are free of aliasing",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR001"
    },
    {
      "Check": "PWR001",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/build/tests/test_suite_psa_crypto_pake.c:1006:1",
      "Title": "Declare global variables as function parameters",
      "RelatedCodeList": {
        "Subtitle": "Usages",
        "Code": [
          "    PSA_ASSERT(psa_pake_set_user(&server, jpake_server_id, sizeof(jpake_server_id)));",
          "    PSA_ASSERT(psa_pake_set_peer(&server, jpake_client_id, sizeof(jpake_client_id)));",
          "    PSA_ASSERT(psa_pake_set_user(&client, jpake_client_id, sizeof(jpake_client_id)));",
          "    PSA_ASSERT(psa_pake_set_peer(&client, jpake_server_id, sizeof(jpake_server_id)));"
        ]
      },
      "Suggestion": "Consider passing 'jpake_server_id' and 'jpake_client_id' explicitly as arguments to the function 'test_ecjpake_rounds' and use those arguments instead; use the 'restrict' keyword for 'jpake_server_id' and 'jpake_client_id' to hint the compiler that they are free of aliasing",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR001"
    },
    {
      "Check": "PWR001",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/build/tests/test_suite_psa_crypto_pake.c:1941:1",
      "Title": "Declare global variables as function parameters",
      "RelatedCodeList": {
        "Subtitle": "Usages",
        "Code": [
          "    if (func_idx < (int) (sizeof(test_funcs) / sizeof(TestWrapper_t))) {",
          "        fp = test_funcs[func_idx];"
        ]
      },
      "Suggestion": "Consider passing 'test_funcs' explicitly as argument to the function 'dispatch_test' and use that argument instead; use the 'restrict' keyword for 'test_funcs' to hint the compiler that it is free of aliasing",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR001"
    },
    {
      "Check": "PWR001",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/build/tests/test_suite_psa_crypto_pake.c:1979:1",
      "Title": "Declare global variables as function parameters",
      "RelatedCodeList": {
        "Subtitle": "Usages",
        "Code": [
          "    if (func_idx < (int) (sizeof(test_funcs)/sizeof(TestWrapper_t))) {",
          "        fp = test_funcs[func_idx];"
        ]
      },
      "Suggestion": "Consider passing 'test_funcs' explicitly as argument to the function 'check_test' and use that argument instead; use the 'restrict' keyword for 'test_funcs' to hint the compiler that it is free of aliasing",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR001"
    },
    {
      "Check": "PWR001",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/build/tests/test_suite_psa_crypto_pake.c:2321:1",
      "Title": "Declare global variables as function parameters",
      "RelatedCodeList": {
        "Subtitle": "Usages",
        "Code": [
          "    if (platform == NULL) {",
          "        platform = getenv(\"MBEDTLS_TEST_PLATFORM\");",
          "        if (platform == NULL) {",
          "            platform = \"unknown\";",
          "    if (configuration == NULL) {",
          "        configuration = getenv(\"MBEDTLS_TEST_CONFIGURATION\");",
          "        if (configuration == NULL) {",
          "            configuration = \"unknown\";",
          "    if (test_suite == NULL) {",
          "        test_suite = strrchr(argv0, '/');",
          "        if (test_suite != NULL) {",
          "            test_suite += 1; // skip the '/'",
          "            test_suite = argv0;",
          "                    platform, configuration, test_suite, test_case);"
        ]
      },
      "Suggestion": "Consider passing 'platform', 'configuration' and 'test_suite' explicitly as arguments to the function 'write_outcome_entry' and use those arguments instead; use the 'restrict' keyword for 'platform', 'configuration' and 'test_suite' to hint the compiler that they are free of aliasing if you can guarantee it",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR001"
    },
    {
      "Check": "PWR001",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/build/tests/test_suite_psa_crypto_persistent_key.c:860:1",
      "Title": "Declare global variables as function parameters",
      "RelatedCodeList": {
        "Subtitle": "Usages",
        "Code": [
          "    if (func_idx < (int) (sizeof(test_funcs) / sizeof(TestWrapper_t))) {",
          "        fp = test_funcs[func_idx];"
        ]
      },
      "Suggestion": "Consider passing 'test_funcs' explicitly as argument to the function 'dispatch_test' and use that argument instead; use the 'restrict' keyword for 'test_funcs' to hint the compiler that it is free of aliasing",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR001"
    },
    {
      "Check": "PWR001",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/build/tests/test_suite_psa_crypto_persistent_key.c:898:1",
      "Title": "Declare global variables as function parameters",
      "RelatedCodeList": {
        "Subtitle": "Usages",
        "Code": [
          "    if (func_idx < (int) (sizeof(test_funcs)/sizeof(TestWrapper_t))) {",
          "        fp = test_funcs[func_idx];"
        ]
      },
      "Suggestion": "Consider passing 'test_funcs' explicitly as argument to the function 'check_test' and use that argument instead; use the 'restrict' keyword for 'test_funcs' to hint the compiler that it is free of aliasing",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR001"
    },
    {
      "Check": "PWR001",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/build/tests/test_suite_psa_crypto_persistent_key.c:1240:1",
      "Title": "Declare global variables as function parameters",
      "RelatedCodeList": {
        "Subtitle": "Usages",
        "Code": [
          "    if (platform == NULL) {",
          "        platform = getenv(\"MBEDTLS_TEST_PLATFORM\");",
          "        if (platform == NULL) {",
          "            platform = \"unknown\";",
          "    if (configuration == NULL) {",
          "        configuration = getenv(\"MBEDTLS_TEST_CONFIGURATION\");",
          "        if (configuration == NULL) {",
          "            configuration = \"unknown\";",
          "    if (test_suite == NULL) {",
          "        test_suite = strrchr(argv0, '/');",
          "        if (test_suite != NULL) {",
          "            test_suite += 1; // skip the '/'",
          "            test_suite = argv0;",
          "                    platform, configuration, test_suite, test_case);"
        ]
      },
      "Suggestion": "Consider passing 'platform', 'configuration' and 'test_suite' explicitly as arguments to the function 'write_outcome_entry' and use those arguments instead; use the 'restrict' keyword for 'platform', 'configuration' and 'test_suite' to hint the compiler that they are free of aliasing if you can guarantee it",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR001"
    },
    {
      "Check": "PWR001",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/build/tests/test_suite_psa_crypto_se_driver_hal.c:2162:1",
      "Title": "Declare global variables as function parameters",
      "RelatedCodeList": {
        "Subtitle": "Usages",
        "Code": [
          "    if (func_idx < (int) (sizeof(test_funcs) / sizeof(TestWrapper_t))) {",
          "        fp = test_funcs[func_idx];"
        ]
      },
      "Suggestion": "Consider passing 'test_funcs' explicitly as argument to the function 'dispatch_test' and use that argument instead; use the 'restrict' keyword for 'test_funcs' to hint the compiler that it is free of aliasing",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR001"
    },
    {
      "Check": "PWR001",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/build/tests/test_suite_psa_crypto_se_driver_hal.c:2200:1",
      "Title": "Declare global variables as function parameters",
      "RelatedCodeList": {
        "Subtitle": "Usages",
        "Code": [
          "    if (func_idx < (int) (sizeof(test_funcs)/sizeof(TestWrapper_t))) {",
          "        fp = test_funcs[func_idx];"
        ]
      },
      "Suggestion": "Consider passing 'test_funcs' explicitly as argument to the function 'check_test' and use that argument instead; use the 'restrict' keyword for 'test_funcs' to hint the compiler that it is free of aliasing",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR001"
    },
    {
      "Check": "PWR001",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/build/tests/test_suite_psa_crypto_se_driver_hal.c:2542:1",
      "Title": "Declare global variables as function parameters",
      "RelatedCodeList": {
        "Subtitle": "Usages",
        "Code": [
          "    if (platform == NULL) {",
          "        platform = getenv(\"MBEDTLS_TEST_PLATFORM\");",
          "        if (platform == NULL) {",
          "            platform = \"unknown\";",
          "    if (configuration == NULL) {",
          "        configuration = getenv(\"MBEDTLS_TEST_CONFIGURATION\");",
          "        if (configuration == NULL) {",
          "            configuration = \"unknown\";",
          "    if (test_suite == NULL) {",
          "        test_suite = strrchr(argv0, '/');",
          "        if (test_suite != NULL) {",
          "            test_suite += 1; // skip the '/'",
          "            test_suite = argv0;",
          "                    platform, configuration, test_suite, test_case);"
        ]
      },
      "Suggestion": "Consider passing 'platform', 'configuration' and 'test_suite' explicitly as arguments to the function 'write_outcome_entry' and use those arguments instead; use the 'restrict' keyword for 'platform', 'configuration' and 'test_suite' to hint the compiler that they are free of aliasing if you can guarantee it",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR001"
    },
    {
      "Check": "PWR001",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/build/tests/test_suite_psa_crypto_se_driver_hal_mocks.c:1062:1",
      "Title": "Declare global variables as function parameters",
      "RelatedCodeList": {
        "Subtitle": "Usages",
        "Code": [
          "    if (func_idx < (int) (sizeof(test_funcs) / sizeof(TestWrapper_t))) {",
          "        fp = test_funcs[func_idx];"
        ]
      },
      "Suggestion": "Consider passing 'test_funcs' explicitly as argument to the function 'dispatch_test' and use that argument instead; use the 'restrict' keyword for 'test_funcs' to hint the compiler that it is free of aliasing",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR001"
    },
    {
      "Check": "PWR001",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/build/tests/test_suite_psa_crypto_se_driver_hal_mocks.c:1100:1",
      "Title": "Declare global variables as function parameters",
      "RelatedCodeList": {
        "Subtitle": "Usages",
        "Code": [
          "    if (func_idx < (int) (sizeof(test_funcs)/sizeof(TestWrapper_t))) {",
          "        fp = test_funcs[func_idx];"
        ]
      },
      "Suggestion": "Consider passing 'test_funcs' explicitly as argument to the function 'check_test' and use that argument instead; use the 'restrict' keyword for 'test_funcs' to hint the compiler that it is free of aliasing",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR001"
    },
    {
      "Check": "PWR001",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/build/tests/test_suite_psa_crypto_se_driver_hal_mocks.c:1442:1",
      "Title": "Declare global variables as function parameters",
      "RelatedCodeList": {
        "Subtitle": "Usages",
        "Code": [
          "    if (platform == NULL) {",
          "        platform = getenv(\"MBEDTLS_TEST_PLATFORM\");",
          "        if (platform == NULL) {",
          "            platform = \"unknown\";",
          "    if (configuration == NULL) {",
          "        configuration = getenv(\"MBEDTLS_TEST_CONFIGURATION\");",
          "        if (configuration == NULL) {",
          "            configuration = \"unknown\";",
          "    if (test_suite == NULL) {",
          "        test_suite = strrchr(argv0, '/');",
          "        if (test_suite != NULL) {",
          "            test_suite += 1; // skip the '/'",
          "            test_suite = argv0;",
          "                    platform, configuration, test_suite, test_case);"
        ]
      },
      "Suggestion": "Consider passing 'platform', 'configuration' and 'test_suite' explicitly as arguments to the function 'write_outcome_entry' and use those arguments instead; use the 'restrict' keyword for 'platform', 'configuration' and 'test_suite' to hint the compiler that they are free of aliasing if you can guarantee it",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR001"
    },
    {
      "Check": "PWR001",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/build/tests/test_suite_psa_crypto_slot_management.c:1785:1",
      "Title": "Declare global variables as function parameters",
      "RelatedCodeList": {
        "Subtitle": "Usages",
        "Code": [
          "    if (func_idx < (int) (sizeof(test_funcs) / sizeof(TestWrapper_t))) {",
          "        fp = test_funcs[func_idx];"
        ]
      },
      "Suggestion": "Consider passing 'test_funcs' explicitly as argument to the function 'dispatch_test' and use that argument instead; use the 'restrict' keyword for 'test_funcs' to hint the compiler that it is free of aliasing",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR001"
    },
    {
      "Check": "PWR001",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/build/tests/test_suite_psa_crypto_slot_management.c:1823:1",
      "Title": "Declare global variables as function parameters",
      "RelatedCodeList": {
        "Subtitle": "Usages",
        "Code": [
          "    if (func_idx < (int) (sizeof(test_funcs)/sizeof(TestWrapper_t))) {",
          "        fp = test_funcs[func_idx];"
        ]
      },
      "Suggestion": "Consider passing 'test_funcs' explicitly as argument to the function 'check_test' and use that argument instead; use the 'restrict' keyword for 'test_funcs' to hint the compiler that it is free of aliasing",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR001"
    },
    {
      "Check": "PWR001",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/build/tests/test_suite_psa_crypto_slot_management.c:2165:1",
      "Title": "Declare global variables as function parameters",
      "RelatedCodeList": {
        "Subtitle": "Usages",
        "Code": [
          "    if (platform == NULL) {",
          "        platform = getenv(\"MBEDTLS_TEST_PLATFORM\");",
          "        if (platform == NULL) {",
          "            platform = \"unknown\";",
          "    if (configuration == NULL) {",
          "        configuration = getenv(\"MBEDTLS_TEST_CONFIGURATION\");",
          "        if (configuration == NULL) {",
          "            configuration = \"unknown\";",
          "    if (test_suite == NULL) {",
          "        test_suite = strrchr(argv0, '/');",
          "        if (test_suite != NULL) {",
          "            test_suite += 1; // skip the '/'",
          "            test_suite = argv0;",
          "                    platform, configuration, test_suite, test_case);"
        ]
      },
      "Suggestion": "Consider passing 'platform', 'configuration' and 'test_suite' explicitly as arguments to the function 'write_outcome_entry' and use those arguments instead; use the 'restrict' keyword for 'platform', 'configuration' and 'test_suite' to hint the compiler that they are free of aliasing if you can guarantee it",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR001"
    },
    {
      "Check": "PWR001",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/build/tests/test_suite_psa_crypto_storage_format.current.c:3383:1",
      "Title": "Declare global variables as function parameters",
      "RelatedCodeList": {
        "Subtitle": "Usages",
        "Code": [
          "    if (func_idx < (int) (sizeof(test_funcs) / sizeof(TestWrapper_t))) {",
          "        fp = test_funcs[func_idx];"
        ]
      },
      "Suggestion": "Consider passing 'test_funcs' explicitly as argument to the function 'dispatch_test' and use that argument instead; use the 'restrict' keyword for 'test_funcs' to hint the compiler that it is free of aliasing",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR001"
    },
    {
      "Check": "PWR001",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/build/tests/test_suite_psa_crypto_storage_format.current.c:3421:1",
      "Title": "Declare global variables as function parameters",
      "RelatedCodeList": {
        "Subtitle": "Usages",
        "Code": [
          "    if (func_idx < (int) (sizeof(test_funcs)/sizeof(TestWrapper_t))) {",
          "        fp = test_funcs[func_idx];"
        ]
      },
      "Suggestion": "Consider passing 'test_funcs' explicitly as argument to the function 'check_test' and use that argument instead; use the 'restrict' keyword for 'test_funcs' to hint the compiler that it is free of aliasing",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR001"
    },
    {
      "Check": "PWR001",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/build/tests/test_suite_psa_crypto_storage_format.current.c:3763:1",
      "Title": "Declare global variables as function parameters",
      "RelatedCodeList": {
        "Subtitle": "Usages",
        "Code": [
          "    if (platform == NULL) {",
          "        platform = getenv(\"MBEDTLS_TEST_PLATFORM\");",
          "        if (platform == NULL) {",
          "            platform = \"unknown\";",
          "    if (configuration == NULL) {",
          "        configuration = getenv(\"MBEDTLS_TEST_CONFIGURATION\");",
          "        if (configuration == NULL) {",
          "            configuration = \"unknown\";",
          "    if (test_suite == NULL) {",
          "        test_suite = strrchr(argv0, '/');",
          "        if (test_suite != NULL) {",
          "            test_suite += 1; // skip the '/'",
          "            test_suite = argv0;",
          "                    platform, configuration, test_suite, test_case);"
        ]
      },
      "Suggestion": "Consider passing 'platform', 'configuration' and 'test_suite' explicitly as arguments to the function 'write_outcome_entry' and use those arguments instead; use the 'restrict' keyword for 'platform', 'configuration' and 'test_suite' to hint the compiler that they are free of aliasing if you can guarantee it",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR001"
    },
    {
      "Check": "PWR001",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/build/tests/test_suite_psa_crypto_storage_format.misc.c:660:1",
      "Title": "Declare global variables as function parameters",
      "RelatedCodeList": {
        "Subtitle": "Usages",
        "Code": [
          "    if (func_idx < (int) (sizeof(test_funcs) / sizeof(TestWrapper_t))) {",
          "        fp = test_funcs[func_idx];"
        ]
      },
      "Suggestion": "Consider passing 'test_funcs' explicitly as argument to the function 'dispatch_test' and use that argument instead; use the 'restrict' keyword for 'test_funcs' to hint the compiler that it is free of aliasing",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR001"
    },
    {
      "Check": "PWR001",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/build/tests/test_suite_psa_crypto_storage_format.misc.c:698:1",
      "Title": "Declare global variables as function parameters",
      "RelatedCodeList": {
        "Subtitle": "Usages",
        "Code": [
          "    if (func_idx < (int) (sizeof(test_funcs)/sizeof(TestWrapper_t))) {",
          "        fp = test_funcs[func_idx];"
        ]
      },
      "Suggestion": "Consider passing 'test_funcs' explicitly as argument to the function 'check_test' and use that argument instead; use the 'restrict' keyword for 'test_funcs' to hint the compiler that it is free of aliasing",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR001"
    },
    {
      "Check": "PWR001",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/build/tests/test_suite_psa_crypto_storage_format.misc.c:1040:1",
      "Title": "Declare global variables as function parameters",
      "RelatedCodeList": {
        "Subtitle": "Usages",
        "Code": [
          "    if (platform == NULL) {",
          "        platform = getenv(\"MBEDTLS_TEST_PLATFORM\");",
          "        if (platform == NULL) {",
          "            platform = \"unknown\";",
          "    if (configuration == NULL) {",
          "        configuration = getenv(\"MBEDTLS_TEST_CONFIGURATION\");",
          "        if (configuration == NULL) {",
          "            configuration = \"unknown\";",
          "    if (test_suite == NULL) {",
          "        test_suite = strrchr(argv0, '/');",
          "        if (test_suite != NULL) {",
          "            test_suite += 1; // skip the '/'",
          "            test_suite = argv0;",
          "                    platform, configuration, test_suite, test_case);"
        ]
      },
      "Suggestion": "Consider passing 'platform', 'configuration' and 'test_suite' explicitly as arguments to the function 'write_outcome_entry' and use those arguments instead; use the 'restrict' keyword for 'platform', 'configuration' and 'test_suite' to hint the compiler that they are free of aliasing if you can guarantee it",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR001"
    },
    {
      "Check": "PWR001",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/build/tests/test_suite_psa_crypto_storage_format.v0.c:3403:1",
      "Title": "Declare global variables as function parameters",
      "RelatedCodeList": {
        "Subtitle": "Usages",
        "Code": [
          "    if (func_idx < (int) (sizeof(test_funcs) / sizeof(TestWrapper_t))) {",
          "        fp = test_funcs[func_idx];"
        ]
      },
      "Suggestion": "Consider passing 'test_funcs' explicitly as argument to the function 'dispatch_test' and use that argument instead; use the 'restrict' keyword for 'test_funcs' to hint the compiler that it is free of aliasing",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR001"
    },
    {
      "Check": "PWR001",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/build/tests/test_suite_psa_crypto_storage_format.v0.c:3441:1",
      "Title": "Declare global variables as function parameters",
      "RelatedCodeList": {
        "Subtitle": "Usages",
        "Code": [
          "    if (func_idx < (int) (sizeof(test_funcs)/sizeof(TestWrapper_t))) {",
          "        fp = test_funcs[func_idx];"
        ]
      },
      "Suggestion": "Consider passing 'test_funcs' explicitly as argument to the function 'check_test' and use that argument instead; use the 'restrict' keyword for 'test_funcs' to hint the compiler that it is free of aliasing",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR001"
    },
    {
      "Check": "PWR001",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/build/tests/test_suite_psa_crypto_storage_format.v0.c:3783:1",
      "Title": "Declare global variables as function parameters",
      "RelatedCodeList": {
        "Subtitle": "Usages",
        "Code": [
          "    if (platform == NULL) {",
          "        platform = getenv(\"MBEDTLS_TEST_PLATFORM\");",
          "        if (platform == NULL) {",
          "            platform = \"unknown\";",
          "    if (configuration == NULL) {",
          "        configuration = getenv(\"MBEDTLS_TEST_CONFIGURATION\");",
          "        if (configuration == NULL) {",
          "            configuration = \"unknown\";",
          "    if (test_suite == NULL) {",
          "        test_suite = strrchr(argv0, '/');",
          "        if (test_suite != NULL) {",
          "            test_suite += 1; // skip the '/'",
          "            test_suite = argv0;",
          "                    platform, configuration, test_suite, test_case);"
        ]
      },
      "Suggestion": "Consider passing 'platform', 'configuration' and 'test_suite' explicitly as arguments to the function 'write_outcome_entry' and use those arguments instead; use the 'restrict' keyword for 'platform', 'configuration' and 'test_suite' to hint the compiler that they are free of aliasing if you can guarantee it",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR001"
    },
    {
      "Check": "PWR001",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/build/tests/test_suite_psa_crypto_util.c:462:1",
      "Title": "Declare global variables as function parameters",
      "RelatedCodeList": {
        "Subtitle": "Usages",
        "Code": [
          "    if (func_idx < (int) (sizeof(test_funcs) / sizeof(TestWrapper_t))) {",
          "        fp = test_funcs[func_idx];"
        ]
      },
      "Suggestion": "Consider passing 'test_funcs' explicitly as argument to the function 'dispatch_test' and use that argument instead; use the 'restrict' keyword for 'test_funcs' to hint the compiler that it is free of aliasing",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR001"
    },
    {
      "Check": "PWR001",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/build/tests/test_suite_psa_crypto_util.c:500:1",
      "Title": "Declare global variables as function parameters",
      "RelatedCodeList": {
        "Subtitle": "Usages",
        "Code": [
          "    if (func_idx < (int) (sizeof(test_funcs)/sizeof(TestWrapper_t))) {",
          "        fp = test_funcs[func_idx];"
        ]
      },
      "Suggestion": "Consider passing 'test_funcs' explicitly as argument to the function 'check_test' and use that argument instead; use the 'restrict' keyword for 'test_funcs' to hint the compiler that it is free of aliasing",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR001"
    },
    {
      "Check": "PWR001",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/build/tests/test_suite_psa_crypto_util.c:842:1",
      "Title": "Declare global variables as function parameters",
      "RelatedCodeList": {
        "Subtitle": "Usages",
        "Code": [
          "    if (platform == NULL) {",
          "        platform = getenv(\"MBEDTLS_TEST_PLATFORM\");",
          "        if (platform == NULL) {",
          "            platform = \"unknown\";",
          "    if (configuration == NULL) {",
          "        configuration = getenv(\"MBEDTLS_TEST_CONFIGURATION\");",
          "        if (configuration == NULL) {",
          "            configuration = \"unknown\";",
          "    if (test_suite == NULL) {",
          "        test_suite = strrchr(argv0, '/');",
          "        if (test_suite != NULL) {",
          "            test_suite += 1; // skip the '/'",
          "            test_suite = argv0;",
          "                    platform, configuration, test_suite, test_case);"
        ]
      },
      "Suggestion": "Consider passing 'platform', 'configuration' and 'test_suite' explicitly as arguments to the function 'write_outcome_entry' and use those arguments instead; use the 'restrict' keyword for 'platform', 'configuration' and 'test_suite' to hint the compiler that they are free of aliasing if you can guarantee it",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR001"
    },
    {
      "Check": "PWR001",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/build/tests/test_suite_psa_its.c:210:1",
      "Title": "Declare global variables as function parameters",
      "RelatedCodeList": {
        "Subtitle": "Usages",
        "Code": [
          "    for (uid = 0; uid < uid_max; uid++) {",
          "    uid_max = 0;"
        ]
      },
      "Suggestion": "Consider passing 'uid_max' explicitly as argument to the function 'cleanup' and use that argument instead; use the 'restrict' keyword for 'uid_max' to hint the compiler that it is free of aliasing",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR001"
    },
    {
      "Check": "PWR001",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/build/tests/test_suite_psa_its.c:231:1",
      "Title": "Declare global variables as function parameters",
      "RelatedCodeList": {
        "Subtitle": "Usages",
        "Code": [
          "    if (uid_max != (psa_storage_uid_t) (-1) && uid_max < uid) {",
          "        uid_max = uid;"
        ]
      },
      "Suggestion": "Consider passing 'uid_max' explicitly as argument to the function 'psa_its_set_wrap' and use that argument instead; use the 'restrict' keyword for 'uid_max' to hint the compiler that it is free of aliasing",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR001"
    },
    {
      "Check": "PWR001",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/build/tests/test_suite_psa_its.c:680:1",
      "Title": "Declare global variables as function parameters",
      "RelatedCodeList": {
        "Subtitle": "Usages",
        "Code": [
          "    if (func_idx < (int) (sizeof(test_funcs) / sizeof(TestWrapper_t))) {",
          "        fp = test_funcs[func_idx];"
        ]
      },
      "Suggestion": "Consider passing 'test_funcs' explicitly as argument to the function 'dispatch_test' and use that argument instead; use the 'restrict' keyword for 'test_funcs' to hint the compiler that it is free of aliasing",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR001"
    },
    {
      "Check": "PWR001",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/build/tests/test_suite_psa_its.c:718:1",
      "Title": "Declare global variables as function parameters",
      "RelatedCodeList": {
        "Subtitle": "Usages",
        "Code": [
          "    if (func_idx < (int) (sizeof(test_funcs)/sizeof(TestWrapper_t))) {",
          "        fp = test_funcs[func_idx];"
        ]
      },
      "Suggestion": "Consider passing 'test_funcs' explicitly as argument to the function 'check_test' and use that argument instead; use the 'restrict' keyword for 'test_funcs' to hint the compiler that it is free of aliasing",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR001"
    },
    {
      "Check": "PWR001",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/build/tests/test_suite_psa_its.c:1060:1",
      "Title": "Declare global variables as function parameters",
      "RelatedCodeList": {
        "Subtitle": "Usages",
        "Code": [
          "    if (platform == NULL) {",
          "        platform = getenv(\"MBEDTLS_TEST_PLATFORM\");",
          "        if (platform == NULL) {",
          "            platform = \"unknown\";",
          "    if (configuration == NULL) {",
          "        configuration = getenv(\"MBEDTLS_TEST_CONFIGURATION\");",
          "        if (configuration == NULL) {",
          "            configuration = \"unknown\";",
          "    if (test_suite == NULL) {",
          "        test_suite = strrchr(argv0, '/');",
          "        if (test_suite != NULL) {",
          "            test_suite += 1; // skip the '/'",
          "            test_suite = argv0;",
          "                    platform, configuration, test_suite, test_case);"
        ]
      },
      "Suggestion": "Consider passing 'platform', 'configuration' and 'test_suite' explicitly as arguments to the function 'write_outcome_entry' and use those arguments instead; use the 'restrict' keyword for 'platform', 'configuration' and 'test_suite' to hint the compiler that they are free of aliasing if you can guarantee it",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR001"
    },
    {
      "Check": "PWR001",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/build/tests/test_suite_random.c:299:1",
      "Title": "Declare global variables as function parameters",
      "RelatedCodeList": {
        "Subtitle": "Usages",
        "Code": [
          "    TEST_EQUAL(0, mbedtls_psa_get_random(MBEDTLS_PSA_RANDOM_STATE,",
          "    TEST_EQUAL(0, mbedtls_psa_get_random(MBEDTLS_PSA_RANDOM_STATE,"
        ]
      },
      "Suggestion": "Consider passing 'mbedtls_psa_get_random' and 'mbedtls_psa_random_state' explicitly as arguments to the function 'test_random_twice_with_psa_from_classic' and use those arguments instead; use the 'restrict' keyword for 'mbedtls_psa_get_random' and 'mbedtls_psa_random_state' to hint the compiler that they are free of aliasing if you can guarantee it",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR001"
    },
    {
      "Check": "PWR001",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/build/tests/test_suite_random.c:366:1",
      "Title": "Declare global variables as function parameters",
      "RelatedCodeList": {
        "Subtitle": "Usages",
        "Code": [
          "    TEST_ASSERT(mbedtls_psa_get_random(MBEDTLS_PSA_RANDOM_STATE,"
        ]
      },
      "Suggestion": "Consider passing 'mbedtls_psa_get_random' and 'mbedtls_psa_random_state' explicitly as arguments to the function 'test_mbedtls_psa_get_random_no_init' and use those arguments instead; use the 'restrict' keyword for 'mbedtls_psa_get_random' and 'mbedtls_psa_random_state' to hint the compiler that they are free of aliasing if you can guarantee it",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR001"
    },
    {
      "Check": "PWR001",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/build/tests/test_suite_random.c:385:1",
      "Title": "Declare global variables as function parameters",
      "RelatedCodeList": {
        "Subtitle": "Usages",
        "Code": [
          "    TEST_EQUAL(0, mbedtls_psa_get_random(MBEDTLS_PSA_RANDOM_STATE,"
        ]
      },
      "Suggestion": "Consider passing 'mbedtls_psa_get_random' and 'mbedtls_psa_random_state' explicitly as arguments to the function 'test_mbedtls_psa_get_random_length' and use those arguments instead; use the 'restrict' keyword for 'mbedtls_psa_get_random' and 'mbedtls_psa_random_state' to hint the compiler that they are free of aliasing if you can guarantee it",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR001"
    },
    {
      "Check": "PWR001",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/build/tests/test_suite_random.c:408:1",
      "Title": "Declare global variables as function parameters",
      "RelatedCodeList": {
        "Subtitle": "Usages",
        "Code": [
          "                                     mbedtls_psa_get_random,",
          "                                     MBEDTLS_PSA_RANDOM_STATE));"
        ]
      },
      "Suggestion": "Consider passing 'mbedtls_psa_get_random' and 'mbedtls_psa_random_state' explicitly as arguments to the function 'test_mbedtls_psa_get_random_ecdsa_sign' and use those arguments instead; use the 'restrict' keyword for 'mbedtls_psa_get_random' and 'mbedtls_psa_random_state' to hint the compiler that they are free of aliasing if you can guarantee it",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR001"
    },
    {
      "Check": "PWR001",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/build/tests/test_suite_random.c:708:1",
      "Title": "Declare global variables as function parameters",
      "RelatedCodeList": {
        "Subtitle": "Usages",
        "Code": [
          "    if (func_idx < (int) (sizeof(test_funcs) / sizeof(TestWrapper_t))) {",
          "        fp = test_funcs[func_idx];"
        ]
      },
      "Suggestion": "Consider passing 'test_funcs' explicitly as argument to the function 'dispatch_test' and use that argument instead; use the 'restrict' keyword for 'test_funcs' to hint the compiler that it is free of aliasing",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR001"
    },
    {
      "Check": "PWR001",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/build/tests/test_suite_random.c:746:1",
      "Title": "Declare global variables as function parameters",
      "RelatedCodeList": {
        "Subtitle": "Usages",
        "Code": [
          "    if (func_idx < (int) (sizeof(test_funcs)/sizeof(TestWrapper_t))) {",
          "        fp = test_funcs[func_idx];"
        ]
      },
      "Suggestion": "Consider passing 'test_funcs' explicitly as argument to the function 'check_test' and use that argument instead; use the 'restrict' keyword for 'test_funcs' to hint the compiler that it is free of aliasing",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR001"
    },
    {
      "Check": "PWR001",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/build/tests/test_suite_random.c:1088:1",
      "Title": "Declare global variables as function parameters",
      "RelatedCodeList": {
        "Subtitle": "Usages",
        "Code": [
          "    if (platform == NULL) {",
          "        platform = getenv(\"MBEDTLS_TEST_PLATFORM\");",
          "        if (platform == NULL) {",
          "            platform = \"unknown\";",
          "    if (configuration == NULL) {",
          "        configuration = getenv(\"MBEDTLS_TEST_CONFIGURATION\");",
          "        if (configuration == NULL) {",
          "            configuration = \"unknown\";",
          "    if (test_suite == NULL) {",
          "        test_suite = strrchr(argv0, '/');",
          "        if (test_suite != NULL) {",
          "            test_suite += 1; // skip the '/'",
          "            test_suite = argv0;",
          "                    platform, configuration, test_suite, test_case);"
        ]
      },
      "Suggestion": "Consider passing 'platform', 'configuration' and 'test_suite' explicitly as arguments to the function 'write_outcome_entry' and use those arguments instead; use the 'restrict' keyword for 'platform', 'configuration' and 'test_suite' to hint the compiler that they are free of aliasing if you can guarantee it",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR001"
    },
    {
      "Check": "PWR001",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/build/tests/test_suite_rsa.c:2358:1",
      "Title": "Declare global variables as function parameters",
      "RelatedCodeList": {
        "Subtitle": "Usages",
        "Code": [
          "    if (func_idx < (int) (sizeof(test_funcs) / sizeof(TestWrapper_t))) {",
          "        fp = test_funcs[func_idx];"
        ]
      },
      "Suggestion": "Consider passing 'test_funcs' explicitly as argument to the function 'dispatch_test' and use that argument instead; use the 'restrict' keyword for 'test_funcs' to hint the compiler that it is free of aliasing",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR001"
    },
    {
      "Check": "PWR001",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/build/tests/test_suite_rsa.c:2396:1",
      "Title": "Declare global variables as function parameters",
      "RelatedCodeList": {
        "Subtitle": "Usages",
        "Code": [
          "    if (func_idx < (int) (sizeof(test_funcs)/sizeof(TestWrapper_t))) {",
          "        fp = test_funcs[func_idx];"
        ]
      },
      "Suggestion": "Consider passing 'test_funcs' explicitly as argument to the function 'check_test' and use that argument instead; use the 'restrict' keyword for 'test_funcs' to hint the compiler that it is free of aliasing",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR001"
    },
    {
      "Check": "PWR001",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/build/tests/test_suite_rsa.c:2738:1",
      "Title": "Declare global variables as function parameters",
      "RelatedCodeList": {
        "Subtitle": "Usages",
        "Code": [
          "    if (platform == NULL) {",
          "        platform = getenv(\"MBEDTLS_TEST_PLATFORM\");",
          "        if (platform == NULL) {",
          "            platform = \"unknown\";",
          "    if (configuration == NULL) {",
          "        configuration = getenv(\"MBEDTLS_TEST_CONFIGURATION\");",
          "        if (configuration == NULL) {",
          "            configuration = \"unknown\";",
          "    if (test_suite == NULL) {",
          "        test_suite = strrchr(argv0, '/');",
          "        if (test_suite != NULL) {",
          "            test_suite += 1; // skip the '/'",
          "            test_suite = argv0;",
          "                    platform, configuration, test_suite, test_case);"
        ]
      },
      "Suggestion": "Consider passing 'platform', 'configuration' and 'test_suite' explicitly as arguments to the function 'write_outcome_entry' and use those arguments instead; use the 'restrict' keyword for 'platform', 'configuration' and 'test_suite' to hint the compiler that they are free of aliasing if you can guarantee it",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR001"
    },
    {
      "Check": "PWR001",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/build/tests/test_suite_shax.c:961:1",
      "Title": "Declare global variables as function parameters",
      "RelatedCodeList": {
        "Subtitle": "Usages",
        "Code": [
          "    if (func_idx < (int) (sizeof(test_funcs) / sizeof(TestWrapper_t))) {",
          "        fp = test_funcs[func_idx];"
        ]
      },
      "Suggestion": "Consider passing 'test_funcs' explicitly as argument to the function 'dispatch_test' and use that argument instead; use the 'restrict' keyword for 'test_funcs' to hint the compiler that it is free of aliasing",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR001"
    },
    {
      "Check": "PWR001",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/build/tests/test_suite_shax.c:999:1",
      "Title": "Declare global variables as function parameters",
      "RelatedCodeList": {
        "Subtitle": "Usages",
        "Code": [
          "    if (func_idx < (int) (sizeof(test_funcs)/sizeof(TestWrapper_t))) {",
          "        fp = test_funcs[func_idx];"
        ]
      },
      "Suggestion": "Consider passing 'test_funcs' explicitly as argument to the function 'check_test' and use that argument instead; use the 'restrict' keyword for 'test_funcs' to hint the compiler that it is free of aliasing",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR001"
    },
    {
      "Check": "PWR001",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/build/tests/test_suite_shax.c:1341:1",
      "Title": "Declare global variables as function parameters",
      "RelatedCodeList": {
        "Subtitle": "Usages",
        "Code": [
          "    if (platform == NULL) {",
          "        platform = getenv(\"MBEDTLS_TEST_PLATFORM\");",
          "        if (platform == NULL) {",
          "            platform = \"unknown\";",
          "    if (configuration == NULL) {",
          "        configuration = getenv(\"MBEDTLS_TEST_CONFIGURATION\");",
          "        if (configuration == NULL) {",
          "            configuration = \"unknown\";",
          "    if (test_suite == NULL) {",
          "        test_suite = strrchr(argv0, '/');",
          "        if (test_suite != NULL) {",
          "            test_suite += 1; // skip the '/'",
          "            test_suite = argv0;",
          "                    platform, configuration, test_suite, test_case);"
        ]
      },
      "Suggestion": "Consider passing 'platform', 'configuration' and 'test_suite' explicitly as arguments to the function 'write_outcome_entry' and use those arguments instead; use the 'restrict' keyword for 'platform', 'configuration' and 'test_suite' to hint the compiler that they are free of aliasing if you can guarantee it",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR001"
    },
    {
      "Check": "PWR001",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/build/tests/test_suite_ssl.c:6678:1",
      "Title": "Declare global variables as function parameters",
      "RelatedCodeList": {
        "Subtitle": "Usages",
        "Code": [
          "    if (func_idx < (int) (sizeof(test_funcs) / sizeof(TestWrapper_t))) {",
          "        fp = test_funcs[func_idx];"
        ]
      },
      "Suggestion": "Consider passing 'test_funcs' explicitly as argument to the function 'dispatch_test' and use that argument instead; use the 'restrict' keyword for 'test_funcs' to hint the compiler that it is free of aliasing",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR001"
    },
    {
      "Check": "PWR001",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/build/tests/test_suite_ssl.c:6716:1",
      "Title": "Declare global variables as function parameters",
      "RelatedCodeList": {
        "Subtitle": "Usages",
        "Code": [
          "    if (func_idx < (int) (sizeof(test_funcs)/sizeof(TestWrapper_t))) {",
          "        fp = test_funcs[func_idx];"
        ]
      },
      "Suggestion": "Consider passing 'test_funcs' explicitly as argument to the function 'check_test' and use that argument instead; use the 'restrict' keyword for 'test_funcs' to hint the compiler that it is free of aliasing",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR001"
    },
    {
      "Check": "PWR001",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/build/tests/test_suite_ssl.c:7058:1",
      "Title": "Declare global variables as function parameters",
      "RelatedCodeList": {
        "Subtitle": "Usages",
        "Code": [
          "    if (platform == NULL) {",
          "        platform = getenv(\"MBEDTLS_TEST_PLATFORM\");",
          "        if (platform == NULL) {",
          "            platform = \"unknown\";",
          "    if (configuration == NULL) {",
          "        configuration = getenv(\"MBEDTLS_TEST_CONFIGURATION\");",
          "        if (configuration == NULL) {",
          "            configuration = \"unknown\";",
          "    if (test_suite == NULL) {",
          "        test_suite = strrchr(argv0, '/');",
          "        if (test_suite != NULL) {",
          "            test_suite += 1; // skip the '/'",
          "            test_suite = argv0;",
          "                    platform, configuration, test_suite, test_case);"
        ]
      },
      "Suggestion": "Consider passing 'platform', 'configuration' and 'test_suite' explicitly as arguments to the function 'write_outcome_entry' and use those arguments instead; use the 'restrict' keyword for 'platform', 'configuration' and 'test_suite' to hint the compiler that they are free of aliasing if you can guarantee it",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR001"
    },
    {
      "Check": "PWR001",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/build/tests/test_suite_ssl_decrypt.misc.c:725:1",
      "Title": "Declare global variables as function parameters",
      "RelatedCodeList": {
        "Subtitle": "Usages",
        "Code": [
          "    if (func_idx < (int) (sizeof(test_funcs) / sizeof(TestWrapper_t))) {",
          "        fp = test_funcs[func_idx];"
        ]
      },
      "Suggestion": "Consider passing 'test_funcs' explicitly as argument to the function 'dispatch_test' and use that argument instead; use the 'restrict' keyword for 'test_funcs' to hint the compiler that it is free of aliasing",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR001"
    },
    {
      "Check": "PWR001",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/build/tests/test_suite_ssl_decrypt.misc.c:763:1",
      "Title": "Declare global variables as function parameters",
      "RelatedCodeList": {
        "Subtitle": "Usages",
        "Code": [
          "    if (func_idx < (int) (sizeof(test_funcs)/sizeof(TestWrapper_t))) {",
          "        fp = test_funcs[func_idx];"
        ]
      },
      "Suggestion": "Consider passing 'test_funcs' explicitly as argument to the function 'check_test' and use that argument instead; use the 'restrict' keyword for 'test_funcs' to hint the compiler that it is free of aliasing",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR001"
    },
    {
      "Check": "PWR001",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/build/tests/test_suite_ssl_decrypt.misc.c:1105:1",
      "Title": "Declare global variables as function parameters",
      "RelatedCodeList": {
        "Subtitle": "Usages",
        "Code": [
          "    if (platform == NULL) {",
          "        platform = getenv(\"MBEDTLS_TEST_PLATFORM\");",
          "        if (platform == NULL) {",
          "            platform = \"unknown\";",
          "    if (configuration == NULL) {",
          "        configuration = getenv(\"MBEDTLS_TEST_CONFIGURATION\");",
          "        if (configuration == NULL) {",
          "            configuration = \"unknown\";",
          "    if (test_suite == NULL) {",
          "        test_suite = strrchr(argv0, '/');",
          "        if (test_suite != NULL) {",
          "            test_suite += 1; // skip the '/'",
          "            test_suite = argv0;",
          "                    platform, configuration, test_suite, test_case);"
        ]
      },
      "Suggestion": "Consider passing 'platform', 'configuration' and 'test_suite' explicitly as arguments to the function 'write_outcome_entry' and use those arguments instead; use the 'restrict' keyword for 'platform', 'configuration' and 'test_suite' to hint the compiler that they are free of aliasing if you can guarantee it",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR001"
    },
    {
      "Check": "PWR001",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/build/tests/test_suite_timing.c:358:1",
      "Title": "Declare global variables as function parameters",
      "RelatedCodeList": {
        "Subtitle": "Usages",
        "Code": [
          "    if (func_idx < (int) (sizeof(test_funcs) / sizeof(TestWrapper_t))) {",
          "        fp = test_funcs[func_idx];"
        ]
      },
      "Suggestion": "Consider passing 'test_funcs' explicitly as argument to the function 'dispatch_test' and use that argument instead; use the 'restrict' keyword for 'test_funcs' to hint the compiler that it is free of aliasing",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR001"
    },
    {
      "Check": "PWR001",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/build/tests/test_suite_timing.c:396:1",
      "Title": "Declare global variables as function parameters",
      "RelatedCodeList": {
        "Subtitle": "Usages",
        "Code": [
          "    if (func_idx < (int) (sizeof(test_funcs)/sizeof(TestWrapper_t))) {",
          "        fp = test_funcs[func_idx];"
        ]
      },
      "Suggestion": "Consider passing 'test_funcs' explicitly as argument to the function 'check_test' and use that argument instead; use the 'restrict' keyword for 'test_funcs' to hint the compiler that it is free of aliasing",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR001"
    },
    {
      "Check": "PWR001",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/build/tests/test_suite_timing.c:738:1",
      "Title": "Declare global variables as function parameters",
      "RelatedCodeList": {
        "Subtitle": "Usages",
        "Code": [
          "    if (platform == NULL) {",
          "        platform = getenv(\"MBEDTLS_TEST_PLATFORM\");",
          "        if (platform == NULL) {",
          "            platform = \"unknown\";",
          "    if (configuration == NULL) {",
          "        configuration = getenv(\"MBEDTLS_TEST_CONFIGURATION\");",
          "        if (configuration == NULL) {",
          "            configuration = \"unknown\";",
          "    if (test_suite == NULL) {",
          "        test_suite = strrchr(argv0, '/');",
          "        if (test_suite != NULL) {",
          "            test_suite += 1; // skip the '/'",
          "            test_suite = argv0;",
          "                    platform, configuration, test_suite, test_case);"
        ]
      },
      "Suggestion": "Consider passing 'platform', 'configuration' and 'test_suite' explicitly as arguments to the function 'write_outcome_entry' and use those arguments instead; use the 'restrict' keyword for 'platform', 'configuration' and 'test_suite' to hint the compiler that they are free of aliasing if you can guarantee it",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR001"
    },
    {
      "Check": "PWR001",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/build/tests/test_suite_version.c:397:1",
      "Title": "Declare global variables as function parameters",
      "RelatedCodeList": {
        "Subtitle": "Usages",
        "Code": [
          "    if (func_idx < (int) (sizeof(test_funcs) / sizeof(TestWrapper_t))) {",
          "        fp = test_funcs[func_idx];"
        ]
      },
      "Suggestion": "Consider passing 'test_funcs' explicitly as argument to the function 'dispatch_test' and use that argument instead; use the 'restrict' keyword for 'test_funcs' to hint the compiler that it is free of aliasing",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR001"
    },
    {
      "Check": "PWR001",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/build/tests/test_suite_version.c:435:1",
      "Title": "Declare global variables as function parameters",
      "RelatedCodeList": {
        "Subtitle": "Usages",
        "Code": [
          "    if (func_idx < (int) (sizeof(test_funcs)/sizeof(TestWrapper_t))) {",
          "        fp = test_funcs[func_idx];"
        ]
      },
      "Suggestion": "Consider passing 'test_funcs' explicitly as argument to the function 'check_test' and use that argument instead; use the 'restrict' keyword for 'test_funcs' to hint the compiler that it is free of aliasing",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR001"
    },
    {
      "Check": "PWR001",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/build/tests/test_suite_version.c:777:1",
      "Title": "Declare global variables as function parameters",
      "RelatedCodeList": {
        "Subtitle": "Usages",
        "Code": [
          "    if (platform == NULL) {",
          "        platform = getenv(\"MBEDTLS_TEST_PLATFORM\");",
          "        if (platform == NULL) {",
          "            platform = \"unknown\";",
          "    if (configuration == NULL) {",
          "        configuration = getenv(\"MBEDTLS_TEST_CONFIGURATION\");",
          "        if (configuration == NULL) {",
          "            configuration = \"unknown\";",
          "    if (test_suite == NULL) {",
          "        test_suite = strrchr(argv0, '/');",
          "        if (test_suite != NULL) {",
          "            test_suite += 1; // skip the '/'",
          "            test_suite = argv0;",
          "                    platform, configuration, test_suite, test_case);"
        ]
      },
      "Suggestion": "Consider passing 'platform', 'configuration' and 'test_suite' explicitly as arguments to the function 'write_outcome_entry' and use those arguments instead; use the 'restrict' keyword for 'platform', 'configuration' and 'test_suite' to hint the compiler that they are free of aliasing if you can guarantee it",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR001"
    },
    {
      "Check": "PWR001",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/build/tests/test_suite_x509parse.c:945:1",
      "Title": "Declare global variables as function parameters",
      "RelatedCodeList": {
        "Subtitle": "Usages",
        "Code": [
          "        profile = &mbedtls_x509_crt_profile_default;",
          "        profile = &mbedtls_x509_crt_profile_next;",
          "        profile = &mbedtls_x509_crt_profile_suiteb;",
          "        profile = &compat_profile;",
          "        profile = &profile_all;"
        ]
      },
      "Suggestion": "Consider passing 'mbedtls_x509_crt_profile_default', 'mbedtls_x509_crt_profile_next', 'mbedtls_x509_crt_profile_suiteb', 'compat_profile' and 'profile_all' explicitly as arguments to the function 'test_x509_verify' and use those arguments instead; use the 'restrict' keyword for 'mbedtls_x509_crt_profile_default', 'mbedtls_x509_crt_profile_next', 'mbedtls_x509_crt_profile_suiteb', 'compat_profile' and 'profile_all' to hint the compiler that they are free of aliasing",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR001"
    },
    {
      "Check": "PWR001",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/build/tests/test_suite_x509parse.c:1090:1",
      "Title": "Declare global variables as function parameters",
      "RelatedCodeList": {
        "Subtitle": "Usages",
        "Code": [
          "                                               &compat_profile,"
        ]
      },
      "Suggestion": "Consider passing 'compat_profile' explicitly as argument to the function 'test_x509_verify_callback' and use that argument instead; use the 'restrict' keyword for 'compat_profile' to hint the compiler that it is free of aliasing",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR001"
    },
    {
      "Check": "PWR001",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/build/tests/test_suite_x509parse.c:1845:1",
      "Title": "Declare global variables as function parameters",
      "RelatedCodeList": {
        "Subtitle": "Usages",
        "Code": [
          "        profile = &mbedtls_x509_crt_profile_default;",
          "        profile = &mbedtls_x509_crt_profile_next;",
          "        profile = &mbedtls_x509_crt_profile_suiteb;",
          "        profile = &profile_rsa3072;",
          "        profile = &profile_sha512;"
        ]
      },
      "Suggestion": "Consider passing 'mbedtls_x509_crt_profile_default', 'mbedtls_x509_crt_profile_next', 'mbedtls_x509_crt_profile_suiteb', 'profile_rsa3072' and 'profile_sha512' explicitly as arguments to the function 'test_mbedtls_x509_crt_verify_chain' and use those arguments instead; use the 'restrict' keyword for 'mbedtls_x509_crt_profile_default', 'mbedtls_x509_crt_profile_next', 'mbedtls_x509_crt_profile_suiteb', 'profile_rsa3072' and 'profile_sha512' to hint the compiler that they are free of aliasing",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR001"
    },
    {
      "Check": "PWR001",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/build/tests/test_suite_x509parse.c:3382:1",
      "Title": "Declare global variables as function parameters",
      "RelatedCodeList": {
        "Subtitle": "Usages",
        "Code": [
          "    if (func_idx < (int) (sizeof(test_funcs) / sizeof(TestWrapper_t))) {",
          "        fp = test_funcs[func_idx];"
        ]
      },
      "Suggestion": "Consider passing 'test_funcs' explicitly as argument to the function 'dispatch_test' and use that argument instead; use the 'restrict' keyword for 'test_funcs' to hint the compiler that it is free of aliasing",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR001"
    },
    {
      "Check": "PWR001",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/build/tests/test_suite_x509parse.c:3420:1",
      "Title": "Declare global variables as function parameters",
      "RelatedCodeList": {
        "Subtitle": "Usages",
        "Code": [
          "    if (func_idx < (int) (sizeof(test_funcs)/sizeof(TestWrapper_t))) {",
          "        fp = test_funcs[func_idx];"
        ]
      },
      "Suggestion": "Consider passing 'test_funcs' explicitly as argument to the function 'check_test' and use that argument instead; use the 'restrict' keyword for 'test_funcs' to hint the compiler that it is free of aliasing",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR001"
    },
    {
      "Check": "PWR001",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/build/tests/test_suite_x509parse.c:3762:1",
      "Title": "Declare global variables as function parameters",
      "RelatedCodeList": {
        "Subtitle": "Usages",
        "Code": [
          "    if (platform == NULL) {",
          "        platform = getenv(\"MBEDTLS_TEST_PLATFORM\");",
          "        if (platform == NULL) {",
          "            platform = \"unknown\";",
          "    if (configuration == NULL) {",
          "        configuration = getenv(\"MBEDTLS_TEST_CONFIGURATION\");",
          "        if (configuration == NULL) {",
          "            configuration = \"unknown\";",
          "    if (test_suite == NULL) {",
          "        test_suite = strrchr(argv0, '/');",
          "        if (test_suite != NULL) {",
          "            test_suite += 1; // skip the '/'",
          "            test_suite = argv0;",
          "                    platform, configuration, test_suite, test_case);"
        ]
      },
      "Suggestion": "Consider passing 'platform', 'configuration' and 'test_suite' explicitly as arguments to the function 'write_outcome_entry' and use those arguments instead; use the 'restrict' keyword for 'platform', 'configuration' and 'test_suite' to hint the compiler that they are free of aliasing if you can guarantee it",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR001"
    },
    {
      "Check": "PWR001",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/build/tests/test_suite_x509write.c:1331:1",
      "Title": "Declare global variables as function parameters",
      "RelatedCodeList": {
        "Subtitle": "Usages",
        "Code": [
          "    if (func_idx < (int) (sizeof(test_funcs) / sizeof(TestWrapper_t))) {",
          "        fp = test_funcs[func_idx];"
        ]
      },
      "Suggestion": "Consider passing 'test_funcs' explicitly as argument to the function 'dispatch_test' and use that argument instead; use the 'restrict' keyword for 'test_funcs' to hint the compiler that it is free of aliasing",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR001"
    },
    {
      "Check": "PWR001",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/build/tests/test_suite_x509write.c:1369:1",
      "Title": "Declare global variables as function parameters",
      "RelatedCodeList": {
        "Subtitle": "Usages",
        "Code": [
          "    if (func_idx < (int) (sizeof(test_funcs)/sizeof(TestWrapper_t))) {",
          "        fp = test_funcs[func_idx];"
        ]
      },
      "Suggestion": "Consider passing 'test_funcs' explicitly as argument to the function 'check_test' and use that argument instead; use the 'restrict' keyword for 'test_funcs' to hint the compiler that it is free of aliasing",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR001"
    },
    {
      "Check": "PWR001",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/build/tests/test_suite_x509write.c:1711:1",
      "Title": "Declare global variables as function parameters",
      "RelatedCodeList": {
        "Subtitle": "Usages",
        "Code": [
          "    if (platform == NULL) {",
          "        platform = getenv(\"MBEDTLS_TEST_PLATFORM\");",
          "        if (platform == NULL) {",
          "            platform = \"unknown\";",
          "    if (configuration == NULL) {",
          "        configuration = getenv(\"MBEDTLS_TEST_CONFIGURATION\");",
          "        if (configuration == NULL) {",
          "            configuration = \"unknown\";",
          "    if (test_suite == NULL) {",
          "        test_suite = strrchr(argv0, '/');",
          "        if (test_suite != NULL) {",
          "            test_suite += 1; // skip the '/'",
          "            test_suite = argv0;",
          "                    platform, configuration, test_suite, test_case);"
        ]
      },
      "Suggestion": "Consider passing 'platform', 'configuration' and 'test_suite' explicitly as arguments to the function 'write_outcome_entry' and use those arguments instead; use the 'restrict' keyword for 'platform', 'configuration' and 'test_suite' to hint the compiler that they are free of aliasing if you can guarantee it",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR001"
    },
    {
      "Check": "PWR002",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/tests/src/helpers.c:555:22",
      "Title": "Declare scalar variables in the smallest possible scope",
      "RelatedCodeList": null,
      "Suggestion": "Move the declaration of 'h' to the beginning of the loop",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR002"
    },
    {
      "Check": "PWR002",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/tests/src/helpers.c:555:19",
      "Title": "Declare scalar variables in the smallest possible scope",
      "RelatedCodeList": null,
      "Suggestion": "Move the declaration of 'l' to the beginning of the loop",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR002"
    },
    {
      "Check": "PWR002",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/library/aes.c:378:13",
      "Title": "Declare scalar variables in the smallest possible scope",
      "RelatedCodeList": null,
      "Suggestion": "Add a new declaration of 'x' at the beginning of the loop. This new declared variable shadows the previous one; alternatively, you may use a different name within the loop to be more explicit",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR002"
    },
    {
      "Check": "PWR002",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/library/aes.c:378:16",
      "Title": "Declare scalar variables in the smallest possible scope",
      "RelatedCodeList": null,
      "Suggestion": "Add a new declaration of 'y' at the beginning of the loop. This new declared variable shadows the previous one; alternatively, you may use a different name within the loop to be more explicit",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR002"
    },
    {
      "Check": "PWR002",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/library/aes.c:378:19",
      "Title": "Declare scalar variables in the smallest possible scope",
      "RelatedCodeList": null,
      "Suggestion": "Move the declaration of 'z' to the beginning of the loop",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR002"
    },
    {
      "Check": "PWR002",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/library/aes.c:378:16",
      "Title": "Declare scalar variables in the smallest possible scope",
      "RelatedCodeList": null,
      "Suggestion": "Add a new declaration of 'y' at the beginning of the loop. This new declared variable shadows the previous one; alternatively, you may use a different name within the loop to be more explicit",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR002"
    },
    {
      "Check": "PWR002",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/library/aes.c:378:13",
      "Title": "Declare scalar variables in the smallest possible scope",
      "RelatedCodeList": null,
      "Suggestion": "Add a new declaration of 'x' at the beginning of the loop. This new declared variable shadows the previous one; alternatively, you may use a different name within the loop to be more explicit",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR002"
    },
    {
      "Check": "PWR002",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/library/aria.c:326:17",
      "Title": "Declare scalar variables in the smallest possible scope",
      "RelatedCodeList": null,
      "Suggestion": "Move the declaration of 'u' to the beginning of the loop",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR002"
    },
    {
      "Check": "PWR002",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/library/bignum.c:1550:28",
      "Title": "Declare scalar variables in the smallest possible scope",
      "RelatedCodeList": null,
      "Suggestion": "Move the declaration of 'z' to the beginning of the loop",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR002"
    },
    {
      "Check": "PWR002",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/library/bignum.c:1550:22",
      "Title": "Declare scalar variables in the smallest possible scope",
      "RelatedCodeList": null,
      "Suggestion": "Move the declaration of 'x' to the beginning of the loop",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR002"
    },
    {
      "Check": "PWR002",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/library/bignum_core.c:334:30",
      "Title": "Declare scalar variables in the smallest possible scope",
      "RelatedCodeList": null,
      "Suggestion": "Move the declaration of 'r1' to the beginning of the loop",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR002"
    },
    {
      "Check": "PWR002",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/library/bignum_core.c:374:30",
      "Title": "Declare scalar variables in the smallest possible scope",
      "RelatedCodeList": null,
      "Suggestion": "Move the declaration of 'r1' to the beginning of the loop",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR002"
    },
    {
      "Check": "PWR002",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/library/ecp.c:1788:26",
      "Title": "Declare scalar variables in the smallest possible scope",
      "RelatedCodeList": null,
      "Suggestion": "Move the declaration of 'adjust' to the beginning of the loop",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR002"
    },
    {
      "Check": "PWR002",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/library/ecp.c:1788:22",
      "Title": "Declare scalar variables in the smallest possible scope",
      "RelatedCodeList": null,
      "Suggestion": "Move the declaration of 'cc' to the beginning of the loop",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR002"
    },
    {
      "Check": "PWR002",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/library/pkcs12.c:332:18",
      "Title": "Declare scalar variables in the smallest possible scope",
      "RelatedCodeList": null,
      "Suggestion": "Add a new declaration of 'j' at the beginning of the loop. This new declared variable shadows the previous one; alternatively, you may use a different name within the loop to be more explicit",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR002"
    },
    {
      "Check": "PWR002",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/library/pkcs12.c:332:18",
      "Title": "Declare scalar variables in the smallest possible scope",
      "RelatedCodeList": null,
      "Suggestion": "Add a new declaration of 'j' at the beginning of the loop. This new declared variable shadows the previous one; alternatively, you may use a different name within the loop to be more explicit",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR002"
    },
    {
      "Check": "PWR012",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/library/bignum.c:382:1",
      "Title": "Pass only required fields from derived type as parameters",
      "RelatedCodeList": null,
      "Suggestion": "'X->s' field (from the argument 'X') is not used in function 'mbedtls_mpi_get_bit'. Instead of passing entire structs as parameters, pass the required fields only",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR012"
    },
    {
      "Check": "PWR012",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/library/cipher.c:58:1",
      "Title": "Pass only required fields from derived type as parameters",
      "RelatedCodeList": null,
      "Suggestion": "'info->block_size', 'info->flags', 'info->iv_size', 'info->key_bitlen', 'info->mode', 'info->name' and 'info->type' fields (from the argument 'info') are not used in function 'mbedtls_cipher_get_base'. Instead of passing entire structs as parameters, pass the required fields only",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR012"
    },
    {
      "Check": "PWR012",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/library/cipher.c:511:1",
      "Title": "Pass only required fields from derived type as parameters",
      "RelatedCodeList": null,
      "Suggestion": "'ctx->add_padding', 'ctx->cipher_ctx', 'ctx->cmac_ctx', 'ctx->get_padding', 'ctx->iv', 'ctx->iv_size', 'ctx->key_bitlen', 'ctx->operation' and 'ctx->unprocessed_data' fields (from the argument 'ctx') are not used in function 'mbedtls_cipher_reset'. Instead of passing entire structs as parameters, pass the required fields only",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR012"
    },
    {
      "Check": "PWR012",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/library/ctr_drbg.c:115:1",
      "Title": "Pass only required fields from derived type as parameters",
      "RelatedCodeList": null,
      "Suggestion": "'ctx->aes_ctx', 'ctx->counter', 'ctx->entropy_len', 'ctx->f_entropy', 'ctx->p_entropy', 'ctx->reseed_counter' and 'ctx->reseed_interval' fields (from the argument 'ctx') are not used in function 'mbedtls_ctr_drbg_set_prediction_resistance'. Instead of passing entire structs as parameters, pass the required fields only",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR012"
    },
    {
      "Check": "PWR012",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/library/ctr_drbg.c:121:1",
      "Title": "Pass only required fields from derived type as parameters",
      "RelatedCodeList": null,
      "Suggestion": "'ctx->aes_ctx', 'ctx->counter', 'ctx->f_entropy', 'ctx->p_entropy', 'ctx->prediction_resistance', 'ctx->reseed_counter' and 'ctx->reseed_interval' fields (from the argument 'ctx') are not used in function 'mbedtls_ctr_drbg_set_entropy_len'. Instead of passing entire structs as parameters, pass the required fields only",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR012"
    },
    {
      "Check": "PWR012",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/library/ctr_drbg.c:127:1",
      "Title": "Pass only required fields from derived type as parameters",
      "RelatedCodeList": null,
      "Suggestion": "'ctx->aes_ctx', 'ctx->counter', 'ctx->entropy_len', 'ctx->p_entropy', 'ctx->prediction_resistance' and 'ctx->reseed_interval' fields (from the argument 'ctx') are not used in function 'mbedtls_ctr_drbg_set_nonce_len'. Instead of passing entire structs as parameters, pass the required fields only",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR012"
    },
    {
      "Check": "PWR012",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/library/ctr_drbg.c:155:1",
      "Title": "Pass only required fields from derived type as parameters",
      "RelatedCodeList": null,
      "Suggestion": "'ctx->aes_ctx', 'ctx->counter', 'ctx->entropy_len', 'ctx->f_entropy', 'ctx->p_entropy', 'ctx->prediction_resistance' and 'ctx->reseed_counter' fields (from the argument 'ctx') are not used in function 'mbedtls_ctr_drbg_set_reseed_interval'. Instead of passing entire structs as parameters, pass the required fields only",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR012"
    },
    {
      "Check": "PWR012",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/library/ecdh.c:29:1",
      "Title": "Pass only required fields from derived type as parameters",
      "RelatedCodeList": null,
      "Suggestion": "'ctx->ctx', 'ctx->point_format' and 'ctx->var' fields (from the argument 'ctx') are not used in function 'mbedtls_ecdh_grp_id'. Instead of passing entire structs as parameters, pass the required fields only",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR012"
    },
    {
      "Check": "PWR012",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/library/ecjpake.c:142:1",
      "Title": "Pass only required fields from derived type as parameters",
      "RelatedCodeList": null,
      "Suggestion": "'ctx->Xm1', 'ctx->Xm2', 'ctx->Xp', 'ctx->Xp1', 'ctx->Xp2', 'ctx->point_format', 'ctx->role', 'ctx->xm1' and 'ctx->xm2' fields (from the argument 'ctx') are not used in function 'mbedtls_ecjpake_check'. Instead of passing entire structs as parameters, pass the required fields only",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR012"
    },
    {
      "Check": "PWR012",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/library/ecp.c:486:1",
      "Title": "Pass only required fields from derived type as parameters",
      "RelatedCodeList": null,
      "Suggestion": "'grp->A', 'grp->B', 'grp->N', 'grp->P', 'grp->T', 'grp->T_size', 'grp->h', 'grp->id', 'grp->modp', 'grp->nbits', 'grp->pbits', 'grp->t_data', 'grp->t_post' and 'grp->t_pre' fields (from the argument 'grp') are not used in function 'mbedtls_ecp_get_type'. Instead of passing entire structs as parameters, pass the required fields only",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR012"
    },
    {
      "Check": "PWR012",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/library/ecp.c:558:1",
      "Title": "Pass only required fields from derived type as parameters",
      "RelatedCodeList": null,
      "Suggestion": "'grp->A', 'grp->B', 'grp->G', 'grp->N', 'grp->P', 'grp->h', 'grp->id', 'grp->modp', 'grp->nbits', 'grp->pbits', 'grp->t_data', 'grp->t_post' and 'grp->t_pre' fields (from the argument 'grp') are not used in function 'ecp_group_is_static_comb_table'. Instead of passing entire structs as parameters, pass the required fields only",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR012"
    },
    {
      "Check": "PWR012",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/library/ecp.c:3399:1",
      "Title": "Pass only required fields from derived type as parameters",
      "RelatedCodeList": null,
      "Suggestion": "'key->Q' and 'key->d' fields (from the argument 'key') are not used in function 'mbedtls_ecp_keypair_get_group_id'. Instead of passing entire structs as parameters, pass the required fields only",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR012"
    },
    {
      "Check": "PWR012",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/library/ecp_curves.c:4981:1",
      "Title": "Pass only required fields from derived type as parameters",
      "RelatedCodeList": null,
      "Suggestion": "'N->n' field (from the argument 'N') is not used in function 'mbedtls_ecp_fix_negative'. Instead of passing entire structs as parameters, pass the required fields only",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR012"
    },
    {
      "Check": "PWR012",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/library/entropy.c:82:1",
      "Title": "Pass only required fields from derived type as parameters",
      "RelatedCodeList": null,
      "Suggestion": "'ctx->accumulator' and 'ctx->accumulator_started' fields (from the argument 'ctx') are not used in function 'mbedtls_entropy_add_source'. Instead of passing entire structs as parameters, pass the required fields only",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR012"
    },
    {
      "Check": "PWR012",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/library/hmac_drbg.c:280:1",
      "Title": "Pass only required fields from derived type as parameters",
      "RelatedCodeList": null,
      "Suggestion": "'ctx->V', 'ctx->entropy_len', 'ctx->f_entropy', 'ctx->md_ctx', 'ctx->p_entropy', 'ctx->reseed_counter' and 'ctx->reseed_interval' fields (from the argument 'ctx') are not used in function 'mbedtls_hmac_drbg_set_prediction_resistance'. Instead of passing entire structs as parameters, pass the required fields only",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR012"
    },
    {
      "Check": "PWR012",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/library/hmac_drbg.c:289:1",
      "Title": "Pass only required fields from derived type as parameters",
      "RelatedCodeList": null,
      "Suggestion": "'ctx->V', 'ctx->f_entropy', 'ctx->md_ctx', 'ctx->p_entropy', 'ctx->prediction_resistance', 'ctx->reseed_counter' and 'ctx->reseed_interval' fields (from the argument 'ctx') are not used in function 'mbedtls_hmac_drbg_set_entropy_len'. Instead of passing entire structs as parameters, pass the required fields only",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR012"
    },
    {
      "Check": "PWR012",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/library/hmac_drbg.c:297:1",
      "Title": "Pass only required fields from derived type as parameters",
      "RelatedCodeList": null,
      "Suggestion": "'ctx->V', 'ctx->entropy_len', 'ctx->f_entropy', 'ctx->md_ctx', 'ctx->p_entropy', 'ctx->prediction_resistance' and 'ctx->reseed_counter' fields (from the argument 'ctx') are not used in function 'mbedtls_hmac_drbg_set_reseed_interval'. Instead of passing entire structs as parameters, pass the required fields only",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR012"
    },
    {
      "Check": "PWR012",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/library/lmots.c:83:1",
      "Title": "Pass only required fields from derived type as parameters",
      "RelatedCodeList": null,
      "Suggestion": "'params->I_key_identifier' and 'params->q_leaf_identifier' fields (from the argument 'params') are not used in function 'lmots_checksum_calculate'. Instead of passing entire structs as parameters, pass the required fields only",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR012"
    },
    {
      "Check": "PWR012",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/library/md5.c:50:1",
      "Title": "Pass only required fields from derived type as parameters",
      "RelatedCodeList": null,
      "Suggestion": "'ctx->buffer' field (from the argument 'ctx') is not used in function 'mbedtls_md5_starts'. Instead of passing entire structs as parameters, pass the required fields only",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR012"
    },
    {
      "Check": "PWR012",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/library/pk_wrap.c:460:1",
      "Title": "Pass only required fields from derived type as parameters",
      "RelatedCodeList": null,
      "Suggestion": "'pk->pk_info' field (from the argument 'pk') is not used in function 'rsa_debug'. Instead of passing entire structs as parameters, pass the required fields only",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR012"
    },
    {
      "Check": "PWR012",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/library/pk_wrap.c:514:1",
      "Title": "Pass only required fields from derived type as parameters",
      "RelatedCodeList": null,
      "Suggestion": "'pk->pk_info' field (from the argument 'pk') is not used in function 'eckey_get_bitlen'. Instead of passing entire structs as parameters, pass the required fields only",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR012"
    },
    {
      "Check": "PWR012",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/library/pk_wrap.c:1088:1",
      "Title": "Pass only required fields from derived type as parameters",
      "RelatedCodeList": null,
      "Suggestion": "'pk->pk_info' field (from the argument 'pk') is not used in function 'eckey_debug'. Instead of passing entire structs as parameters, pass the required fields only",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR012"
    },
    {
      "Check": "PWR012",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/library/psa_crypto.c:838:1",
      "Title": "Pass only required fields from derived type as parameters",
      "RelatedCodeList": null,
      "Suggestion": "'policy->usage' field (from the argument 'policy') is not used in function 'psa_key_policy_permits'. Instead of passing entire structs as parameters, pass the required fields only",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR012"
    },
    {
      "Check": "PWR012",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/library/psa_crypto.c:1553:1",
      "Title": "Pass only required fields from derived type as parameters",
      "RelatedCodeList": null,
      "Suggestion": "'policy->alg' and 'policy->alg2' fields (from the argument 'policy') are not used in function 'psa_validate_key_policy'. Instead of passing entire structs as parameters, pass the required fields only",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR012"
    },
    {
      "Check": "PWR012",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/library/psa_crypto.c:3243:1",
      "Title": "Pass only required fields from derived type as parameters",
      "RelatedCodeList": null,
      "Suggestion": "'operation->ctx', 'operation->error_occurred' and 'operation->id' fields (from the argument 'operation') are not used in function 'psa_sign_hash_get_num_ops'. Instead of passing entire structs as parameters, pass the required fields only",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR012"
    },
    {
      "Check": "PWR012",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/library/psa_crypto.c:3249:1",
      "Title": "Pass only required fields from derived type as parameters",
      "RelatedCodeList": null,
      "Suggestion": "'operation->ctx', 'operation->error_occurred' and 'operation->id' fields (from the argument 'operation') are not used in function 'psa_verify_hash_get_num_ops'. Instead of passing entire structs as parameters, pass the required fields only",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR012"
    },
    {
      "Check": "PWR012",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/library/psa_crypto.c:3591:1",
      "Title": "Pass only required fields from derived type as parameters",
      "RelatedCodeList": null,
      "Suggestion": "'attributes->domain_parameters' and 'attributes->domain_parameters_size' fields (from the argument 'attributes') are not used in function 'mbedtls_psa_sign_hash_start'. Instead of passing entire structs as parameters, pass the required fields only",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR012"
    },
    {
      "Check": "PWR012",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/library/psa_crypto.c:3804:1",
      "Title": "Pass only required fields from derived type as parameters",
      "RelatedCodeList": null,
      "Suggestion": "'attributes->domain_parameters' and 'attributes->domain_parameters_size' fields (from the argument 'attributes') are not used in function 'mbedtls_psa_verify_hash_start'. Instead of passing entire structs as parameters, pass the required fields only",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR012"
    },
    {
      "Check": "PWR012",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/library/psa_crypto.c:4939:1",
      "Title": "Pass only required fields from derived type as parameters",
      "RelatedCodeList": null,
      "Suggestion": "'operation->ad_started', 'operation->alg', 'operation->body_started', 'operation->ctx', 'operation->is_encrypt' and 'operation->key_type' fields (from the argument 'operation') are not used in function 'psa_aead_final_checks'. Instead of passing entire structs as parameters, pass the required fields only",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR012"
    },
    {
      "Check": "PWR012",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/library/psa_crypto.c:5095:1",
      "Title": "Pass only required fields from derived type as parameters",
      "RelatedCodeList": null,
      "Suggestion": "'operation->can_output_key', 'operation->capacity' and 'operation->ctx' fields (from the argument 'operation') are not used in function 'psa_key_derivation_get_kdf_alg'. Instead of passing entire structs as parameters, pass the required fields only",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR012"
    },
    {
      "Check": "PWR012",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/library/psa_crypto.c:5175:1",
      "Title": "Pass only required fields from derived type as parameters",
      "RelatedCodeList": null,
      "Suggestion": "'operation->can_output_key' and 'operation->ctx' fields (from the argument 'operation') are not used in function 'psa_key_derivation_get_capacity'. Instead of passing entire structs as parameters, pass the required fields only",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR012"
    },
    {
      "Check": "PWR012",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/library/psa_crypto.c:5187:1",
      "Title": "Pass only required fields from derived type as parameters",
      "RelatedCodeList": null,
      "Suggestion": "'operation->can_output_key' and 'operation->ctx' fields (from the argument 'operation') are not used in function 'psa_key_derivation_set_capacity'. Instead of passing entire structs as parameters, pass the required fields only",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR012"
    },
    {
      "Check": "PWR012",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/library/psa_crypto.c:7714:1",
      "Title": "Pass only required fields from derived type as parameters",
      "RelatedCodeList": null,
      "Suggestion": "'inputs->attributes', 'inputs->cipher_suite', 'inputs->password', 'inputs->peer', 'inputs->peer_len', 'inputs->user' and 'inputs->user_len' fields (from the argument 'inputs') are not used in function 'psa_crypto_driver_pake_get_password_len'. Instead of passing entire structs as parameters, pass the required fields only",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR012"
    },
    {
      "Check": "PWR012",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/library/psa_crypto.c:7745:1",
      "Title": "Pass only required fields from derived type as parameters",
      "RelatedCodeList": null,
      "Suggestion": "'inputs->attributes', 'inputs->cipher_suite', 'inputs->password', 'inputs->password_len', 'inputs->peer', 'inputs->peer_len' and 'inputs->user' fields (from the argument 'inputs') are not used in function 'psa_crypto_driver_pake_get_user_len'. Instead of passing entire structs as parameters, pass the required fields only",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR012"
    },
    {
      "Check": "PWR012",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/library/psa_crypto.c:7776:1",
      "Title": "Pass only required fields from derived type as parameters",
      "RelatedCodeList": null,
      "Suggestion": "'inputs->attributes', 'inputs->cipher_suite', 'inputs->password', 'inputs->password_len', 'inputs->peer', 'inputs->user' and 'inputs->user_len' fields (from the argument 'inputs') are not used in function 'psa_crypto_driver_pake_get_peer_len'. Instead of passing entire structs as parameters, pass the required fields only",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR012"
    },
    {
      "Check": "PWR012",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/library/psa_crypto.c:8094:1",
      "Title": "Pass only required fields from derived type as parameters",
      "RelatedCodeList": null,
      "Suggestion": "'operation->alg', 'operation->data', 'operation->id', 'operation->primitive' and 'operation->stage' fields (from the argument 'operation') are not used in function 'psa_jpake_prologue'. Instead of passing entire structs as parameters, pass the required fields only",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR012"
    },
    {
      "Check": "PWR012",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/library/ripemd160.c:51:1",
      "Title": "Pass only required fields from derived type as parameters",
      "RelatedCodeList": null,
      "Suggestion": "'ctx->buffer' field (from the argument 'ctx') is not used in function 'mbedtls_ripemd160_starts'. Instead of passing entire structs as parameters, pass the required fields only",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR012"
    },
    {
      "Check": "PWR012",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/library/rsa.c:1004:1",
      "Title": "Pass only required fields from derived type as parameters",
      "RelatedCodeList": null,
      "Suggestion": "'ctx->D', 'ctx->DP', 'ctx->DQ', 'ctx->E', 'ctx->N', 'ctx->P', 'ctx->Q', 'ctx->QP', 'ctx->RN', 'ctx->RP', 'ctx->RQ', 'ctx->Vf', 'ctx->Vi', 'ctx->hash_id', 'ctx->len' and 'ctx->ver' fields (from the argument 'ctx') are not used in function 'mbedtls_rsa_get_padding_mode'. Instead of passing entire structs as parameters, pass the required fields only",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR012"
    },
    {
      "Check": "PWR012",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/library/rsa.c:1012:1",
      "Title": "Pass only required fields from derived type as parameters",
      "RelatedCodeList": null,
      "Suggestion": "'ctx->D', 'ctx->DP', 'ctx->DQ', 'ctx->E', 'ctx->N', 'ctx->P', 'ctx->Q', 'ctx->QP', 'ctx->RN', 'ctx->RP', 'ctx->RQ', 'ctx->Vf', 'ctx->Vi', 'ctx->len', 'ctx->padding' and 'ctx->ver' fields (from the argument 'ctx') are not used in function 'mbedtls_rsa_get_md_alg'. Instead of passing entire structs as parameters, pass the required fields only",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR012"
    },
    {
      "Check": "PWR012",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/library/rsa.c:1028:1",
      "Title": "Pass only required fields from derived type as parameters",
      "RelatedCodeList": null,
      "Suggestion": "'ctx->D', 'ctx->DP', 'ctx->DQ', 'ctx->E', 'ctx->N', 'ctx->P', 'ctx->Q', 'ctx->QP', 'ctx->RN', 'ctx->RP', 'ctx->RQ', 'ctx->Vf', 'ctx->Vi', 'ctx->hash_id', 'ctx->padding' and 'ctx->ver' fields (from the argument 'ctx') are not used in function 'mbedtls_rsa_get_len'. Instead of passing entire structs as parameters, pass the required fields only",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR012"
    },
    {
      "Check": "PWR012",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/library/sha1.c:50:1",
      "Title": "Pass only required fields from derived type as parameters",
      "RelatedCodeList": null,
      "Suggestion": "'ctx->buffer' field (from the argument 'ctx') is not used in function 'mbedtls_sha1_starts'. Instead of passing entire structs as parameters, pass the required fields only",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR012"
    },
    {
      "Check": "PWR012",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/library/sha256.c:244:1",
      "Title": "Pass only required fields from derived type as parameters",
      "RelatedCodeList": null,
      "Suggestion": "'ctx->buffer' field (from the argument 'ctx') is not used in function 'mbedtls_sha256_starts'. Instead of passing entire structs as parameters, pass the required fields only",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR012"
    },
    {
      "Check": "PWR012",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/library/sha512.c:244:1",
      "Title": "Pass only required fields from derived type as parameters",
      "RelatedCodeList": null,
      "Suggestion": "'ctx->buffer' field (from the argument 'ctx') is not used in function 'mbedtls_sha512_starts'. Instead of passing entire structs as parameters, pass the required fields only",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR012"
    },
    {
      "Check": "PWR012",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/library/timing.c:148:1",
      "Title": "Pass only required fields from derived type as parameters",
      "RelatedCodeList": null,
      "Suggestion": "'data->int_ms' and 'data->timer' fields (from the argument 'data') are not used in function 'mbedtls_timing_get_final_delay'. Instead of passing entire structs as parameters, pass the required fields only",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR012"
    },
    {
      "Check": "PWR012",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/library/x509_crt.c:171:1",
      "Title": "Pass only required fields from derived type as parameters",
      "RelatedCodeList": null,
      "Suggestion": "'profile->allowed_curves', 'profile->allowed_pks' and 'profile->rsa_min_bitlen' fields (from the argument 'profile') are not used in function 'x509_profile_check_md_alg'. Instead of passing entire structs as parameters, pass the required fields only",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR012"
    },
    {
      "Check": "PWR012",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/library/x509_crt.c:189:1",
      "Title": "Pass only required fields from derived type as parameters",
      "RelatedCodeList": null,
      "Suggestion": "'profile->allowed_curves', 'profile->allowed_mds' and 'profile->rsa_min_bitlen' fields (from the argument 'profile') are not used in function 'x509_profile_check_pk_alg'. Instead of passing entire structs as parameters, pass the required fields only",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR012"
    },
    {
      "Check": "PWR012",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/library/x509_crt.c:1928:1",
      "Title": "Pass only required fields from derived type as parameters",
      "RelatedCodeList": null,
      "Suggestion": "'crt->authority_key_id', 'crt->ca_istrue', 'crt->certificate_policies', 'crt->ext_key_usage', 'crt->issuer', 'crt->issuer_id', 'crt->issuer_raw', 'crt->max_pathlen', 'crt->next', 'crt->ns_cert_type', 'crt->own_buffer', 'crt->pk', 'crt->pk_raw', 'crt->raw', 'crt->serial', 'crt->sig', 'crt->sig_md', 'crt->sig_oid', 'crt->sig_opts', 'crt->sig_pk', 'crt->subject', 'crt->subject_alt_names', 'crt->subject_id', 'crt->subject_key_id', 'crt->subject_raw', 'crt->tbs', 'crt->v3_ext', 'crt->valid_from', 'crt->valid_to' and 'crt->version' fields (from the argument 'crt') are not used in function 'mbedtls_x509_crt_check_key_usage'. Instead of passing entire structs as parameters, pass the required fields only",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR012"
    },
    {
      "Check": "PWR012",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/library/x509write_crt.c:56:1",
      "Title": "Pass only required fields from derived type as parameters",
      "RelatedCodeList": null,
      "Suggestion": "'ctx->extensions', 'ctx->issuer', 'ctx->issuer_key', 'ctx->md_alg', 'ctx->not_after', 'ctx->not_before', 'ctx->serial', 'ctx->serial_len', 'ctx->subject' and 'ctx->subject_key' fields (from the argument 'ctx') are not used in function 'mbedtls_x509write_crt_set_version'. Instead of passing entire structs as parameters, pass the required fields only",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR012"
    },
    {
      "Check": "PWR012",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/library/x509write_crt.c:62:1",
      "Title": "Pass only required fields from derived type as parameters",
      "RelatedCodeList": null,
      "Suggestion": "'ctx->extensions', 'ctx->issuer', 'ctx->issuer_key', 'ctx->not_after', 'ctx->not_before', 'ctx->serial', 'ctx->serial_len', 'ctx->subject', 'ctx->subject_key' and 'ctx->version' fields (from the argument 'ctx') are not used in function 'mbedtls_x509write_crt_set_md_alg'. Instead of passing entire structs as parameters, pass the required fields only",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR012"
    },
    {
      "Check": "PWR012",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/library/x509write_crt.c:68:1",
      "Title": "Pass only required fields from derived type as parameters",
      "RelatedCodeList": null,
      "Suggestion": "'ctx->extensions', 'ctx->issuer', 'ctx->issuer_key', 'ctx->md_alg', 'ctx->not_after', 'ctx->not_before', 'ctx->serial', 'ctx->serial_len', 'ctx->subject' and 'ctx->version' fields (from the argument 'ctx') are not used in function 'mbedtls_x509write_crt_set_subject_key'. Instead of passing entire structs as parameters, pass the required fields only",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR012"
    },
    {
      "Check": "PWR012",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/library/x509write_crt.c:74:1",
      "Title": "Pass only required fields from derived type as parameters",
      "RelatedCodeList": null,
      "Suggestion": "'ctx->extensions', 'ctx->issuer', 'ctx->md_alg', 'ctx->not_after', 'ctx->not_before', 'ctx->serial', 'ctx->serial_len', 'ctx->subject', 'ctx->subject_key' and 'ctx->version' fields (from the argument 'ctx') are not used in function 'mbedtls_x509write_crt_set_issuer_key'. Instead of passing entire structs as parameters, pass the required fields only",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR012"
    },
    {
      "Check": "PWR012",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/library/x509write_csr.c:52:1",
      "Title": "Pass only required fields from derived type as parameters",
      "RelatedCodeList": null,
      "Suggestion": "'ctx->extensions', 'ctx->key' and 'ctx->subject' fields (from the argument 'ctx') are not used in function 'mbedtls_x509write_csr_set_md_alg'. Instead of passing entire structs as parameters, pass the required fields only",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR012"
    },
    {
      "Check": "PWR012",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/library/x509write_csr.c:57:1",
      "Title": "Pass only required fields from derived type as parameters",
      "RelatedCodeList": null,
      "Suggestion": "'ctx->extensions', 'ctx->md_alg' and 'ctx->subject' fields (from the argument 'ctx') are not used in function 'mbedtls_x509write_csr_set_key'. Instead of passing entire structs as parameters, pass the required fields only",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR012"
    },
    {
      "Check": "PWR012",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/library/ssl_cache.c:371:1",
      "Title": "Pass only required fields from derived type as parameters",
      "RelatedCodeList": null,
      "Suggestion": "'cache->chain' and 'cache->max_entries' fields (from the argument 'cache') are not used in function 'mbedtls_ssl_cache_set_timeout'. Instead of passing entire structs as parameters, pass the required fields only",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR012"
    },
    {
      "Check": "PWR012",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/library/ssl_cache.c:381:1",
      "Title": "Pass only required fields from derived type as parameters",
      "RelatedCodeList": null,
      "Suggestion": "'cache->chain' and 'cache->timeout' fields (from the argument 'cache') are not used in function 'mbedtls_ssl_cache_set_max_entries'. Instead of passing entire structs as parameters, pass the required fields only",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR012"
    },
    {
      "Check": "PWR012",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/library/ssl_cookie.c:80:1",
      "Title": "Pass only required fields from derived type as parameters",
      "RelatedCodeList": null,
      "Suggestion": "'ctx->hmac_ctx' field (from the argument 'ctx') is not used in function 'mbedtls_ssl_cookie_set_timeout'. Instead of passing entire structs as parameters, pass the required fields only",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR012"
    },
    {
      "Check": "PWR012",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/library/ssl_msg.c:855:1",
      "Title": "Pass only required fields from derived type as parameters",
      "RelatedCodeList": null,
      "Suggestion": "'transform->cipher_ctx_dec', 'transform->cipher_ctx_enc', 'transform->encrypt_then_mac', 'transform->in_cid', 'transform->in_cid_len', 'transform->iv_dec', 'transform->iv_enc', 'transform->maclen', 'transform->md_ctx_dec', 'transform->md_ctx_enc', 'transform->minlen', 'transform->out_cid', 'transform->out_cid_len', 'transform->randbytes', 'transform->taglen' and 'transform->tls_version' fields (from the argument 'transform') are not used in function 'ssl_transform_aead_dynamic_iv_is_explicit'. Instead of passing entire structs as parameters, pass the required fields only",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR012"
    },
    {
      "Check": "PWR012",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/library/ssl_msg.c:2734:1",
      "Title": "Pass only required fields from derived type as parameters",
      "RelatedCodeList": null,
      "Suggestion": "'ssl->alert_reason', 'ssl->alert_type', 'ssl->alpn_chosen', 'ssl->badmac_seen', 'ssl->cli_id', 'ssl->cli_id_len', 'ssl->conf', 'ssl->cur_out_ctr', 'ssl->disable_datagram_packing', 'ssl->f_export_keys', 'ssl->f_get_timer', 'ssl->f_recv', 'ssl->f_recv_timeout', 'ssl->f_send', 'ssl->f_set_timer', 'ssl->f_vrfy', 'ssl->handshake', 'ssl->hostname', 'ssl->in_buf', 'ssl->in_cid', 'ssl->in_ctr', 'ssl->in_epoch', 'ssl->in_hdr', 'ssl->in_hslen', 'ssl->in_iv', 'ssl->in_left', 'ssl->in_len', 'ssl->in_msg', 'ssl->in_msglen', 'ssl->in_msgtype', 'ssl->in_offt', 'ssl->in_window', 'ssl->in_window_top', 'ssl->keep_current_message', 'ssl->mtu', 'ssl->nb_zero', 'ssl->negotiate_cid', 'ssl->next_record_offset', 'ssl->out_buf', 'ssl->out_cid', 'ssl->out_ctr', 'ssl->out_hdr', 'ssl->out_iv', 'ssl->out_left', 'ssl->out_len', 'ssl->out_msglen', 'ssl->own_cid', 'ssl->own_cid_len', 'ssl->own_verify_data', 'ssl->p_bio', 'ssl->p_export_keys', 'ssl->p_timer', 'ssl->p_vrfy', 'ssl->peer_verify_data', 'ssl->renego_records_seen', 'ssl->renego_status', 'ssl->secure_renegotiation', 'ssl->send_alert', 'ssl->session', 'ssl->session_in', 'ssl->session_negotiate', 'ssl->session_out', 'ssl->state', 'ssl->tls_version', 'ssl->transform', 'ssl->transform_in', 'ssl->transform_negotiate', 'ssl->transform_out', 'ssl->user_data' and 'ssl->verify_data_len' fields (from the argument 'ssl') are not used in function 'mbedtls_ssl_start_handshake_msg'. Instead of passing entire structs as parameters, pass the required fields only",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR012"
    },
    {
      "Check": "PWR012",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/library/ssl_msg.c:3098:1",
      "Title": "Pass only required fields from derived type as parameters",
      "RelatedCodeList": null,
      "Suggestion": "'ssl->alert_reason', 'ssl->alert_type', 'ssl->alpn_chosen', 'ssl->badmac_seen', 'ssl->cli_id', 'ssl->cli_id_len', 'ssl->conf', 'ssl->cur_out_ctr', 'ssl->disable_datagram_packing', 'ssl->f_export_keys', 'ssl->f_get_timer', 'ssl->f_recv', 'ssl->f_recv_timeout', 'ssl->f_send', 'ssl->f_set_timer', 'ssl->f_vrfy', 'ssl->handshake', 'ssl->hostname', 'ssl->in_buf', 'ssl->in_cid', 'ssl->in_ctr', 'ssl->in_epoch', 'ssl->in_hdr', 'ssl->in_hslen', 'ssl->in_iv', 'ssl->in_left', 'ssl->in_len', 'ssl->in_msglen', 'ssl->in_msgtype', 'ssl->in_offt', 'ssl->in_window', 'ssl->in_window_top', 'ssl->keep_current_message', 'ssl->mtu', 'ssl->nb_zero', 'ssl->negotiate_cid', 'ssl->next_record_offset', 'ssl->out_buf', 'ssl->out_cid', 'ssl->out_ctr', 'ssl->out_hdr', 'ssl->out_iv', 'ssl->out_left', 'ssl->out_len', 'ssl->out_msg', 'ssl->out_msglen', 'ssl->out_msgtype', 'ssl->own_cid', 'ssl->own_cid_len', 'ssl->own_verify_data', 'ssl->p_bio', 'ssl->p_export_keys', 'ssl->p_timer', 'ssl->p_vrfy', 'ssl->peer_verify_data', 'ssl->renego_records_seen', 'ssl->renego_status', 'ssl->secure_renegotiation', 'ssl->send_alert', 'ssl->session', 'ssl->session_in', 'ssl->session_negotiate', 'ssl->session_out', 'ssl->state', 'ssl->tls_version', 'ssl->transform', 'ssl->transform_in', 'ssl->transform_negotiate', 'ssl->transform_out', 'ssl->user_data' and 'ssl->verify_data_len' fields (from the argument 'ssl') are not used in function 'ssl_get_hs_frag_len'. Instead of passing entire structs as parameters, pass the required fields only",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR012"
    },
    {
      "Check": "PWR012",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/library/ssl_msg.c:3103:1",
      "Title": "Pass only required fields from derived type as parameters",
      "RelatedCodeList": null,
      "Suggestion": "'ssl->alert_reason', 'ssl->alert_type', 'ssl->alpn_chosen', 'ssl->badmac_seen', 'ssl->cli_id', 'ssl->cli_id_len', 'ssl->conf', 'ssl->cur_out_ctr', 'ssl->disable_datagram_packing', 'ssl->f_export_keys', 'ssl->f_get_timer', 'ssl->f_recv', 'ssl->f_recv_timeout', 'ssl->f_send', 'ssl->f_set_timer', 'ssl->f_vrfy', 'ssl->handshake', 'ssl->hostname', 'ssl->in_buf', 'ssl->in_cid', 'ssl->in_ctr', 'ssl->in_epoch', 'ssl->in_hdr', 'ssl->in_hslen', 'ssl->in_iv', 'ssl->in_left', 'ssl->in_len', 'ssl->in_msglen', 'ssl->in_msgtype', 'ssl->in_offt', 'ssl->in_window', 'ssl->in_window_top', 'ssl->keep_current_message', 'ssl->mtu', 'ssl->nb_zero', 'ssl->negotiate_cid', 'ssl->next_record_offset', 'ssl->out_buf', 'ssl->out_cid', 'ssl->out_ctr', 'ssl->out_hdr', 'ssl->out_iv', 'ssl->out_left', 'ssl->out_len', 'ssl->out_msg', 'ssl->out_msglen', 'ssl->out_msgtype', 'ssl->own_cid', 'ssl->own_cid_len', 'ssl->own_verify_data', 'ssl->p_bio', 'ssl->p_export_keys', 'ssl->p_timer', 'ssl->p_vrfy', 'ssl->peer_verify_data', 'ssl->renego_records_seen', 'ssl->renego_status', 'ssl->secure_renegotiation', 'ssl->send_alert', 'ssl->session', 'ssl->session_in', 'ssl->session_negotiate', 'ssl->session_out', 'ssl->state', 'ssl->tls_version', 'ssl->transform', 'ssl->transform_in', 'ssl->transform_negotiate', 'ssl->transform_out', 'ssl->user_data' and 'ssl->verify_data_len' fields (from the argument 'ssl') are not used in function 'ssl_get_hs_frag_off'. Instead of passing entire structs as parameters, pass the required fields only",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR012"
    },
    {
      "Check": "PWR012",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/library/ssl_msg.c:3216:1",
      "Title": "Pass only required fields from derived type as parameters",
      "RelatedCodeList": null,
      "Suggestion": "'ssl->alert_reason', 'ssl->alert_type', 'ssl->alpn_chosen', 'ssl->badmac_seen', 'ssl->cli_id', 'ssl->cli_id_len', 'ssl->conf', 'ssl->cur_out_ctr', 'ssl->disable_datagram_packing', 'ssl->f_export_keys', 'ssl->f_get_timer', 'ssl->f_recv', 'ssl->f_recv_timeout', 'ssl->f_send', 'ssl->f_set_timer', 'ssl->f_vrfy', 'ssl->handshake', 'ssl->hostname', 'ssl->in_buf', 'ssl->in_cid', 'ssl->in_ctr', 'ssl->in_epoch', 'ssl->in_hdr', 'ssl->in_hslen', 'ssl->in_iv', 'ssl->in_left', 'ssl->in_len', 'ssl->in_msglen', 'ssl->in_msgtype', 'ssl->in_offt', 'ssl->in_window', 'ssl->in_window_top', 'ssl->keep_current_message', 'ssl->mtu', 'ssl->nb_zero', 'ssl->negotiate_cid', 'ssl->next_record_offset', 'ssl->out_buf', 'ssl->out_cid', 'ssl->out_ctr', 'ssl->out_hdr', 'ssl->out_iv', 'ssl->out_left', 'ssl->out_len', 'ssl->out_msg', 'ssl->out_msglen', 'ssl->out_msgtype', 'ssl->own_cid', 'ssl->own_cid_len', 'ssl->own_verify_data', 'ssl->p_bio', 'ssl->p_export_keys', 'ssl->p_timer', 'ssl->p_vrfy', 'ssl->peer_verify_data', 'ssl->renego_records_seen', 'ssl->renego_status', 'ssl->secure_renegotiation', 'ssl->send_alert', 'ssl->session', 'ssl->session_in', 'ssl->session_negotiate', 'ssl->session_out', 'ssl->state', 'ssl->tls_version', 'ssl->transform', 'ssl->transform_in', 'ssl->transform_negotiate', 'ssl->transform_out', 'ssl->user_data' and 'ssl->verify_data_len' fields (from the argument 'ssl') are not used in function 'ssl_get_hs_total_len'. Instead of passing entire structs as parameters, pass the required fields only",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR012"
    },
    {
      "Check": "PWR012",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/library/ssl_msg.c:3359:1",
      "Title": "Pass only required fields from derived type as parameters",
      "RelatedCodeList": null,
      "Suggestion": "'ssl->alert_reason', 'ssl->alert_type', 'ssl->alpn_chosen', 'ssl->badmac_seen', 'ssl->cli_id', 'ssl->cli_id_len', 'ssl->conf', 'ssl->cur_out_ctr', 'ssl->disable_datagram_packing', 'ssl->f_export_keys', 'ssl->f_get_timer', 'ssl->f_recv', 'ssl->f_recv_timeout', 'ssl->f_send', 'ssl->f_set_timer', 'ssl->f_vrfy', 'ssl->handshake', 'ssl->hostname', 'ssl->in_buf', 'ssl->in_cid', 'ssl->in_ctr', 'ssl->in_epoch', 'ssl->in_hdr', 'ssl->in_hslen', 'ssl->in_iv', 'ssl->in_left', 'ssl->in_len', 'ssl->in_msg', 'ssl->in_msglen', 'ssl->in_msgtype', 'ssl->in_offt', 'ssl->keep_current_message', 'ssl->mtu', 'ssl->nb_zero', 'ssl->negotiate_cid', 'ssl->next_record_offset', 'ssl->out_buf', 'ssl->out_cid', 'ssl->out_ctr', 'ssl->out_hdr', 'ssl->out_iv', 'ssl->out_left', 'ssl->out_len', 'ssl->out_msg', 'ssl->out_msglen', 'ssl->out_msgtype', 'ssl->own_cid', 'ssl->own_cid_len', 'ssl->own_verify_data', 'ssl->p_bio', 'ssl->p_export_keys', 'ssl->p_timer', 'ssl->p_vrfy', 'ssl->peer_verify_data', 'ssl->renego_records_seen', 'ssl->renego_status', 'ssl->secure_renegotiation', 'ssl->send_alert', 'ssl->session', 'ssl->session_in', 'ssl->session_negotiate', 'ssl->session_out', 'ssl->state', 'ssl->tls_version', 'ssl->transform', 'ssl->transform_in', 'ssl->transform_negotiate', 'ssl->transform_out', 'ssl->user_data' and 'ssl->verify_data_len' fields (from the argument 'ssl') are not used in function 'mbedtls_ssl_dtls_replay_reset'. Instead of passing entire structs as parameters, pass the required fields only",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR012"
    },
    {
      "Check": "PWR012",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/library/ssl_msg.c:3398:1",
      "Title": "Pass only required fields from derived type as parameters",
      "RelatedCodeList": null,
      "Suggestion": "'ssl->alert_reason', 'ssl->alert_type', 'ssl->alpn_chosen', 'ssl->badmac_seen', 'ssl->cli_id', 'ssl->cli_id_len', 'ssl->cur_out_ctr', 'ssl->disable_datagram_packing', 'ssl->f_export_keys', 'ssl->f_get_timer', 'ssl->f_recv', 'ssl->f_recv_timeout', 'ssl->f_send', 'ssl->f_set_timer', 'ssl->f_vrfy', 'ssl->handshake', 'ssl->hostname', 'ssl->in_buf', 'ssl->in_cid', 'ssl->in_epoch', 'ssl->in_hdr', 'ssl->in_hslen', 'ssl->in_iv', 'ssl->in_left', 'ssl->in_len', 'ssl->in_msg', 'ssl->in_msglen', 'ssl->in_msgtype', 'ssl->in_offt', 'ssl->keep_current_message', 'ssl->mtu', 'ssl->nb_zero', 'ssl->negotiate_cid', 'ssl->next_record_offset', 'ssl->out_buf', 'ssl->out_cid', 'ssl->out_ctr', 'ssl->out_hdr', 'ssl->out_iv', 'ssl->out_left', 'ssl->out_len', 'ssl->out_msg', 'ssl->out_msglen', 'ssl->out_msgtype', 'ssl->own_cid', 'ssl->own_cid_len', 'ssl->own_verify_data', 'ssl->p_bio', 'ssl->p_export_keys', 'ssl->p_timer', 'ssl->p_vrfy', 'ssl->peer_verify_data', 'ssl->renego_records_seen', 'ssl->renego_status', 'ssl->secure_renegotiation', 'ssl->send_alert', 'ssl->session', 'ssl->session_in', 'ssl->session_negotiate', 'ssl->session_out', 'ssl->state', 'ssl->tls_version', 'ssl->transform', 'ssl->transform_in', 'ssl->transform_negotiate', 'ssl->transform_out', 'ssl->user_data' and 'ssl->verify_data_len' fields (from the argument 'ssl') are not used in function 'mbedtls_ssl_dtls_replay_check'. Instead of passing entire structs as parameters, pass the required fields only",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR012"
    },
    {
      "Check": "PWR012",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/library/ssl_msg.c:4257:1",
      "Title": "Pass only required fields from derived type as parameters",
      "RelatedCodeList": null,
      "Suggestion": "'ssl->alert_reason', 'ssl->alert_type', 'ssl->alpn_chosen', 'ssl->badmac_seen', 'ssl->cli_id', 'ssl->cli_id_len', 'ssl->conf', 'ssl->cur_out_ctr', 'ssl->disable_datagram_packing', 'ssl->f_export_keys', 'ssl->f_get_timer', 'ssl->f_recv', 'ssl->f_recv_timeout', 'ssl->f_send', 'ssl->f_set_timer', 'ssl->f_vrfy', 'ssl->handshake', 'ssl->hostname', 'ssl->in_buf', 'ssl->in_cid', 'ssl->in_ctr', 'ssl->in_epoch', 'ssl->in_hdr', 'ssl->in_hslen', 'ssl->in_iv', 'ssl->in_len', 'ssl->in_msg', 'ssl->in_msglen', 'ssl->in_msgtype', 'ssl->in_offt', 'ssl->in_window', 'ssl->in_window_top', 'ssl->keep_current_message', 'ssl->mtu', 'ssl->nb_zero', 'ssl->negotiate_cid', 'ssl->out_buf', 'ssl->out_cid', 'ssl->out_ctr', 'ssl->out_hdr', 'ssl->out_iv', 'ssl->out_left', 'ssl->out_len', 'ssl->out_msg', 'ssl->out_msglen', 'ssl->out_msgtype', 'ssl->own_cid', 'ssl->own_cid_len', 'ssl->own_verify_data', 'ssl->p_bio', 'ssl->p_export_keys', 'ssl->p_timer', 'ssl->p_vrfy', 'ssl->peer_verify_data', 'ssl->renego_records_seen', 'ssl->renego_status', 'ssl->secure_renegotiation', 'ssl->send_alert', 'ssl->session', 'ssl->session_in', 'ssl->session_negotiate', 'ssl->session_out', 'ssl->state', 'ssl->tls_version', 'ssl->transform', 'ssl->transform_in', 'ssl->transform_negotiate', 'ssl->transform_out', 'ssl->user_data' and 'ssl->verify_data_len' fields (from the argument 'ssl') are not used in function 'ssl_next_record_is_in_datagram'. Instead of passing entire structs as parameters, pass the required fields only",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR012"
    },
    {
      "Check": "PWR012",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/library/ssl_msg.c:4679:1",
      "Title": "Pass only required fields from derived type as parameters",
      "RelatedCodeList": null,
      "Suggestion": "'ssl->alert_reason', 'ssl->alert_type', 'ssl->alpn_chosen', 'ssl->badmac_seen', 'ssl->cli_id', 'ssl->cli_id_len', 'ssl->conf', 'ssl->cur_out_ctr', 'ssl->disable_datagram_packing', 'ssl->f_export_keys', 'ssl->f_get_timer', 'ssl->f_recv', 'ssl->f_recv_timeout', 'ssl->f_send', 'ssl->f_set_timer', 'ssl->f_vrfy', 'ssl->handshake', 'ssl->hostname', 'ssl->in_buf', 'ssl->in_cid', 'ssl->in_ctr', 'ssl->in_epoch', 'ssl->in_hdr', 'ssl->in_hslen', 'ssl->in_iv', 'ssl->in_left', 'ssl->in_len', 'ssl->in_msg', 'ssl->in_msgtype', 'ssl->in_offt', 'ssl->in_window', 'ssl->in_window_top', 'ssl->keep_current_message', 'ssl->mtu', 'ssl->nb_zero', 'ssl->negotiate_cid', 'ssl->next_record_offset', 'ssl->out_buf', 'ssl->out_cid', 'ssl->out_ctr', 'ssl->out_hdr', 'ssl->out_iv', 'ssl->out_left', 'ssl->out_len', 'ssl->out_msg', 'ssl->out_msglen', 'ssl->out_msgtype', 'ssl->own_cid', 'ssl->own_cid_len', 'ssl->own_verify_data', 'ssl->p_bio', 'ssl->p_export_keys', 'ssl->p_timer', 'ssl->p_vrfy', 'ssl->peer_verify_data', 'ssl->renego_records_seen', 'ssl->renego_status', 'ssl->secure_renegotiation', 'ssl->send_alert', 'ssl->session', 'ssl->session_in', 'ssl->session_negotiate', 'ssl->session_out', 'ssl->state', 'ssl->tls_version', 'ssl->transform', 'ssl->transform_in', 'ssl->transform_negotiate', 'ssl->transform_out', 'ssl->user_data' and 'ssl->verify_data_len' fields (from the argument 'ssl') are not used in function 'ssl_record_is_in_progress'. Instead of passing entire structs as parameters, pass the required fields only",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR012"
    },
    {
      "Check": "PWR012",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/library/ssl_msg.c:5262:1",
      "Title": "Pass only required fields from derived type as parameters",
      "RelatedCodeList": null,
      "Suggestion": "'transform->cipher_ctx_dec', 'transform->cipher_ctx_enc', 'transform->encrypt_then_mac', 'transform->in_cid', 'transform->in_cid_len', 'transform->iv_dec', 'transform->iv_enc', 'transform->maclen', 'transform->md_ctx_dec', 'transform->md_ctx_enc', 'transform->minlen', 'transform->out_cid', 'transform->out_cid_len', 'transform->randbytes', 'transform->taglen' and 'transform->tls_version' fields (from the argument 'transform') are not used in function 'ssl_transform_get_explicit_iv_len'. Instead of passing entire structs as parameters, pass the required fields only",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR012"
    },
    {
      "Check": "PWR012",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/library/ssl_msg.c:5268:1",
      "Title": "Pass only required fields from derived type as parameters",
      "RelatedCodeList": null,
      "Suggestion": "'ssl->alert_reason', 'ssl->alert_type', 'ssl->alpn_chosen', 'ssl->badmac_seen', 'ssl->cli_id', 'ssl->cli_id_len', 'ssl->cur_out_ctr', 'ssl->disable_datagram_packing', 'ssl->f_export_keys', 'ssl->f_get_timer', 'ssl->f_recv', 'ssl->f_recv_timeout', 'ssl->f_send', 'ssl->f_set_timer', 'ssl->f_vrfy', 'ssl->handshake', 'ssl->hostname', 'ssl->in_buf', 'ssl->in_cid', 'ssl->in_ctr', 'ssl->in_epoch', 'ssl->in_hdr', 'ssl->in_hslen', 'ssl->in_iv', 'ssl->in_left', 'ssl->in_len', 'ssl->in_msg', 'ssl->in_msglen', 'ssl->in_msgtype', 'ssl->in_offt', 'ssl->in_window', 'ssl->in_window_top', 'ssl->keep_current_message', 'ssl->mtu', 'ssl->nb_zero', 'ssl->negotiate_cid', 'ssl->next_record_offset', 'ssl->out_buf', 'ssl->out_left', 'ssl->out_msglen', 'ssl->out_msgtype', 'ssl->own_cid', 'ssl->own_cid_len', 'ssl->own_verify_data', 'ssl->p_bio', 'ssl->p_export_keys', 'ssl->p_timer', 'ssl->p_vrfy', 'ssl->peer_verify_data', 'ssl->renego_records_seen', 'ssl->renego_status', 'ssl->secure_renegotiation', 'ssl->send_alert', 'ssl->session', 'ssl->session_in', 'ssl->session_negotiate', 'ssl->session_out', 'ssl->state', 'ssl->tls_version', 'ssl->transform', 'ssl->transform_in', 'ssl->transform_negotiate', 'ssl->transform_out', 'ssl->user_data' and 'ssl->verify_data_len' fields (from the argument 'ssl') are not used in function 'mbedtls_ssl_update_out_pointers'. Instead of passing entire structs as parameters, pass the required fields only",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR012"
    },
    {
      "Check": "PWR012",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/library/ssl_msg.c:5309:1",
      "Title": "Pass only required fields from derived type as parameters",
      "RelatedCodeList": null,
      "Suggestion": "'ssl->alert_reason', 'ssl->alert_type', 'ssl->alpn_chosen', 'ssl->badmac_seen', 'ssl->cli_id', 'ssl->cli_id_len', 'ssl->cur_out_ctr', 'ssl->disable_datagram_packing', 'ssl->f_export_keys', 'ssl->f_get_timer', 'ssl->f_recv', 'ssl->f_recv_timeout', 'ssl->f_send', 'ssl->f_set_timer', 'ssl->f_vrfy', 'ssl->handshake', 'ssl->hostname', 'ssl->in_buf', 'ssl->in_epoch', 'ssl->in_hslen', 'ssl->in_left', 'ssl->in_msglen', 'ssl->in_msgtype', 'ssl->in_offt', 'ssl->in_window', 'ssl->in_window_top', 'ssl->keep_current_message', 'ssl->mtu', 'ssl->nb_zero', 'ssl->negotiate_cid', 'ssl->next_record_offset', 'ssl->out_buf', 'ssl->out_cid', 'ssl->out_ctr', 'ssl->out_hdr', 'ssl->out_iv', 'ssl->out_left', 'ssl->out_len', 'ssl->out_msg', 'ssl->out_msglen', 'ssl->out_msgtype', 'ssl->own_cid', 'ssl->own_cid_len', 'ssl->own_verify_data', 'ssl->p_bio', 'ssl->p_export_keys', 'ssl->p_timer', 'ssl->p_vrfy', 'ssl->peer_verify_data', 'ssl->renego_records_seen', 'ssl->renego_status', 'ssl->secure_renegotiation', 'ssl->send_alert', 'ssl->session', 'ssl->session_in', 'ssl->session_negotiate', 'ssl->session_out', 'ssl->state', 'ssl->tls_version', 'ssl->transform', 'ssl->transform_in', 'ssl->transform_negotiate', 'ssl->transform_out', 'ssl->user_data' and 'ssl->verify_data_len' fields (from the argument 'ssl') are not used in function 'mbedtls_ssl_update_in_pointers'. Instead of passing entire structs as parameters, pass the required fields only",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR012"
    },
    {
      "Check": "PWR012",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/library/ssl_msg.c:5377:1",
      "Title": "Pass only required fields from derived type as parameters",
      "RelatedCodeList": null,
      "Suggestion": "'ssl->alert_reason', 'ssl->alert_type', 'ssl->alpn_chosen', 'ssl->badmac_seen', 'ssl->cli_id', 'ssl->cli_id_len', 'ssl->conf', 'ssl->cur_out_ctr', 'ssl->disable_datagram_packing', 'ssl->f_export_keys', 'ssl->f_get_timer', 'ssl->f_recv', 'ssl->f_recv_timeout', 'ssl->f_send', 'ssl->f_set_timer', 'ssl->f_vrfy', 'ssl->handshake', 'ssl->hostname', 'ssl->in_buf', 'ssl->in_cid', 'ssl->in_ctr', 'ssl->in_epoch', 'ssl->in_hdr', 'ssl->in_hslen', 'ssl->in_iv', 'ssl->in_left', 'ssl->in_len', 'ssl->in_msg', 'ssl->in_msgtype', 'ssl->in_window', 'ssl->in_window_top', 'ssl->keep_current_message', 'ssl->mtu', 'ssl->nb_zero', 'ssl->negotiate_cid', 'ssl->next_record_offset', 'ssl->out_buf', 'ssl->out_cid', 'ssl->out_ctr', 'ssl->out_hdr', 'ssl->out_iv', 'ssl->out_left', 'ssl->out_len', 'ssl->out_msg', 'ssl->out_msglen', 'ssl->out_msgtype', 'ssl->own_cid', 'ssl->own_cid_len', 'ssl->own_verify_data', 'ssl->p_bio', 'ssl->p_export_keys', 'ssl->p_timer', 'ssl->p_vrfy', 'ssl->peer_verify_data', 'ssl->renego_records_seen', 'ssl->renego_status', 'ssl->secure_renegotiation', 'ssl->send_alert', 'ssl->session', 'ssl->session_in', 'ssl->session_negotiate', 'ssl->session_out', 'ssl->state', 'ssl->tls_version', 'ssl->transform', 'ssl->transform_in', 'ssl->transform_negotiate', 'ssl->transform_out', 'ssl->user_data' and 'ssl->verify_data_len' fields (from the argument 'ssl') are not used in function 'mbedtls_ssl_get_bytes_avail'. Instead of passing entire structs as parameters, pass the required fields only",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR012"
    },
    {
      "Check": "PWR012",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/library/ssl_msg.c:6244:1",
      "Title": "Pass only required fields from derived type as parameters",
      "RelatedCodeList": null,
      "Suggestion": "'ssl->alpn_chosen', 'ssl->badmac_seen', 'ssl->cli_id', 'ssl->cli_id_len', 'ssl->conf', 'ssl->cur_out_ctr', 'ssl->disable_datagram_packing', 'ssl->f_export_keys', 'ssl->f_get_timer', 'ssl->f_recv', 'ssl->f_recv_timeout', 'ssl->f_send', 'ssl->f_set_timer', 'ssl->f_vrfy', 'ssl->handshake', 'ssl->hostname', 'ssl->in_buf', 'ssl->in_cid', 'ssl->in_ctr', 'ssl->in_epoch', 'ssl->in_hdr', 'ssl->in_hslen', 'ssl->in_iv', 'ssl->in_left', 'ssl->in_len', 'ssl->in_msg', 'ssl->in_msglen', 'ssl->in_msgtype', 'ssl->in_offt', 'ssl->in_window', 'ssl->in_window_top', 'ssl->keep_current_message', 'ssl->mtu', 'ssl->nb_zero', 'ssl->negotiate_cid', 'ssl->next_record_offset', 'ssl->out_buf', 'ssl->out_cid', 'ssl->out_ctr', 'ssl->out_hdr', 'ssl->out_iv', 'ssl->out_left', 'ssl->out_len', 'ssl->out_msg', 'ssl->out_msglen', 'ssl->out_msgtype', 'ssl->own_cid', 'ssl->own_cid_len', 'ssl->own_verify_data', 'ssl->p_bio', 'ssl->p_export_keys', 'ssl->p_timer', 'ssl->p_vrfy', 'ssl->peer_verify_data', 'ssl->renego_records_seen', 'ssl->renego_status', 'ssl->secure_renegotiation', 'ssl->session', 'ssl->session_in', 'ssl->session_negotiate', 'ssl->session_out', 'ssl->state', 'ssl->tls_version', 'ssl->transform', 'ssl->transform_in', 'ssl->transform_negotiate', 'ssl->transform_out', 'ssl->user_data' and 'ssl->verify_data_len' fields (from the argument 'ssl') are not used in function 'mbedtls_ssl_pend_fatal_alert'. Instead of passing entire structs as parameters, pass the required fields only",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR012"
    },
    {
      "Check": "PWR012",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/library/ssl_tls.c:83:1",
      "Title": "Pass only required fields from derived type as parameters",
      "RelatedCodeList": null,
      "Suggestion": "'conf->allow_legacy_renegotiation', 'conf->alpn_list', 'conf->anti_replay', 'conf->authmode', 'conf->badmac_limit', 'conf->ca_chain', 'conf->ca_crl', 'conf->cert_profile', 'conf->cert_req_ca_list', 'conf->ciphersuite_list', 'conf->curve_list', 'conf->dhm_G', 'conf->dhm_P', 'conf->dhm_min_bitlen', 'conf->disable_renegotiation', 'conf->dn_hints', 'conf->encrypt_then_mac', 'conf->endpoint', 'conf->extended_ms', 'conf->f_cert_cb', 'conf->f_cookie_check', 'conf->f_cookie_write', 'conf->f_dbg', 'conf->f_get_cache', 'conf->f_psk', 'conf->f_rng', 'conf->f_set_cache', 'conf->f_sni', 'conf->f_ticket_parse', 'conf->f_ticket_write', 'conf->f_vrfy', 'conf->group_list', 'conf->hs_timeout_max', 'conf->hs_timeout_min', 'conf->key_cert', 'conf->max_tls_version', 'conf->mfl_code', 'conf->min_tls_version', 'conf->p_cache', 'conf->p_cookie', 'conf->p_dbg', 'conf->p_psk', 'conf->p_rng', 'conf->p_sni', 'conf->p_ticket', 'conf->p_vrfy', 'conf->psk', 'conf->psk_identity', 'conf->psk_identity_len', 'conf->psk_len', 'conf->read_timeout', 'conf->renego_max_records', 'conf->renego_period', 'conf->respect_cli_pref', 'conf->session_tickets', 'conf->sig_algs', 'conf->sig_hashes', 'conf->transport' and 'conf->user_data' fields (from the argument 'conf') are not used in function 'mbedtls_ssl_conf_cid'. Instead of passing entire structs as parameters, pass the required fields only",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR012"
    },
    {
      "Check": "PWR012",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/library/ssl_tls.c:1609:1",
      "Title": "Pass only required fields from derived type as parameters",
      "RelatedCodeList": null,
      "Suggestion": "'conf->allow_legacy_renegotiation', 'conf->alpn_list', 'conf->anti_replay', 'conf->authmode', 'conf->badmac_limit', 'conf->ca_chain', 'conf->ca_crl', 'conf->cert_profile', 'conf->cert_req_ca_list', 'conf->cid_len', 'conf->ciphersuite_list', 'conf->curve_list', 'conf->dhm_G', 'conf->dhm_P', 'conf->dhm_min_bitlen', 'conf->disable_renegotiation', 'conf->dn_hints', 'conf->encrypt_then_mac', 'conf->extended_ms', 'conf->f_cert_cb', 'conf->f_cookie_check', 'conf->f_cookie_write', 'conf->f_dbg', 'conf->f_get_cache', 'conf->f_psk', 'conf->f_rng', 'conf->f_set_cache', 'conf->f_sni', 'conf->f_ticket_parse', 'conf->f_ticket_write', 'conf->f_vrfy', 'conf->group_list', 'conf->hs_timeout_max', 'conf->hs_timeout_min', 'conf->ignore_unexpected_cid', 'conf->key_cert', 'conf->max_tls_version', 'conf->mfl_code', 'conf->min_tls_version', 'conf->p_cache', 'conf->p_cookie', 'conf->p_dbg', 'conf->p_psk', 'conf->p_rng', 'conf->p_sni', 'conf->p_ticket', 'conf->p_vrfy', 'conf->psk', 'conf->psk_identity', 'conf->psk_identity_len', 'conf->psk_len', 'conf->read_timeout', 'conf->renego_max_records', 'conf->renego_period', 'conf->respect_cli_pref', 'conf->session_tickets', 'conf->sig_algs', 'conf->sig_hashes', 'conf->transport' and 'conf->user_data' fields (from the argument 'conf') are not used in function 'mbedtls_ssl_conf_endpoint'. Instead of passing entire structs as parameters, pass the required fields only",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR012"
    },
    {
      "Check": "PWR012",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/library/ssl_tls.c:1614:1",
      "Title": "Pass only required fields from derived type as parameters",
      "RelatedCodeList": null,
      "Suggestion": "'conf->allow_legacy_renegotiation', 'conf->alpn_list', 'conf->anti_replay', 'conf->authmode', 'conf->badmac_limit', 'conf->ca_chain', 'conf->ca_crl', 'conf->cert_profile', 'conf->cert_req_ca_list', 'conf->cid_len', 'conf->ciphersuite_list', 'conf->curve_list', 'conf->dhm_G', 'conf->dhm_P', 'conf->dhm_min_bitlen', 'conf->disable_renegotiation', 'conf->dn_hints', 'conf->encrypt_then_mac', 'conf->endpoint', 'conf->extended_ms', 'conf->f_cert_cb', 'conf->f_cookie_check', 'conf->f_cookie_write', 'conf->f_dbg', 'conf->f_get_cache', 'conf->f_psk', 'conf->f_rng', 'conf->f_set_cache', 'conf->f_sni', 'conf->f_ticket_parse', 'conf->f_ticket_write', 'conf->f_vrfy', 'conf->group_list', 'conf->hs_timeout_max', 'conf->hs_timeout_min', 'conf->ignore_unexpected_cid', 'conf->key_cert', 'conf->max_tls_version', 'conf->mfl_code', 'conf->min_tls_version', 'conf->p_cache', 'conf->p_cookie', 'conf->p_dbg', 'conf->p_psk', 'conf->p_rng', 'conf->p_sni', 'conf->p_ticket', 'conf->p_vrfy', 'conf->psk', 'conf->psk_identity', 'conf->psk_identity_len', 'conf->psk_len', 'conf->read_timeout', 'conf->renego_max_records', 'conf->renego_period', 'conf->respect_cli_pref', 'conf->session_tickets', 'conf->sig_algs', 'conf->sig_hashes' and 'conf->user_data' fields (from the argument 'conf') are not used in function 'mbedtls_ssl_conf_transport'. Instead of passing entire structs as parameters, pass the required fields only",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR012"
    },
    {
      "Check": "PWR012",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/library/ssl_tls.c:1620:1",
      "Title": "Pass only required fields from derived type as parameters",
      "RelatedCodeList": null,
      "Suggestion": "'conf->allow_legacy_renegotiation', 'conf->alpn_list', 'conf->authmode', 'conf->badmac_limit', 'conf->ca_chain', 'conf->ca_crl', 'conf->cert_profile', 'conf->cert_req_ca_list', 'conf->cid_len', 'conf->ciphersuite_list', 'conf->curve_list', 'conf->dhm_G', 'conf->dhm_P', 'conf->dhm_min_bitlen', 'conf->disable_renegotiation', 'conf->dn_hints', 'conf->encrypt_then_mac', 'conf->endpoint', 'conf->extended_ms', 'conf->f_cert_cb', 'conf->f_cookie_check', 'conf->f_cookie_write', 'conf->f_dbg', 'conf->f_get_cache', 'conf->f_psk', 'conf->f_rng', 'conf->f_set_cache', 'conf->f_sni', 'conf->f_ticket_parse', 'conf->f_ticket_write', 'conf->f_vrfy', 'conf->group_list', 'conf->hs_timeout_max', 'conf->hs_timeout_min', 'conf->ignore_unexpected_cid', 'conf->key_cert', 'conf->max_tls_version', 'conf->mfl_code', 'conf->min_tls_version', 'conf->p_cache', 'conf->p_cookie', 'conf->p_dbg', 'conf->p_psk', 'conf->p_rng', 'conf->p_sni', 'conf->p_ticket', 'conf->p_vrfy', 'conf->psk', 'conf->psk_identity', 'conf->psk_identity_len', 'conf->psk_len', 'conf->read_timeout', 'conf->renego_max_records', 'conf->renego_period', 'conf->respect_cli_pref', 'conf->session_tickets', 'conf->sig_algs', 'conf->sig_hashes', 'conf->transport' and 'conf->user_data' fields (from the argument 'conf') are not used in function 'mbedtls_ssl_conf_dtls_anti_replay'. Instead of passing entire structs as parameters, pass the required fields only",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR012"
    },
    {
      "Check": "PWR012",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/library/ssl_tls.c:1626:1",
      "Title": "Pass only required fields from derived type as parameters",
      "RelatedCodeList": null,
      "Suggestion": "'conf->allow_legacy_renegotiation', 'conf->alpn_list', 'conf->anti_replay', 'conf->authmode', 'conf->ca_chain', 'conf->ca_crl', 'conf->cert_profile', 'conf->cert_req_ca_list', 'conf->cid_len', 'conf->ciphersuite_list', 'conf->curve_list', 'conf->dhm_G', 'conf->dhm_P', 'conf->dhm_min_bitlen', 'conf->disable_renegotiation', 'conf->dn_hints', 'conf->encrypt_then_mac', 'conf->endpoint', 'conf->extended_ms', 'conf->f_cert_cb', 'conf->f_cookie_check', 'conf->f_cookie_write', 'conf->f_dbg', 'conf->f_get_cache', 'conf->f_psk', 'conf->f_rng', 'conf->f_set_cache', 'conf->f_sni', 'conf->f_ticket_parse', 'conf->f_ticket_write', 'conf->f_vrfy', 'conf->group_list', 'conf->hs_timeout_max', 'conf->hs_timeout_min', 'conf->ignore_unexpected_cid', 'conf->key_cert', 'conf->max_tls_version', 'conf->mfl_code', 'conf->min_tls_version', 'conf->p_cache', 'conf->p_cookie', 'conf->p_dbg', 'conf->p_psk', 'conf->p_rng', 'conf->p_sni', 'conf->p_ticket', 'conf->p_vrfy', 'conf->psk', 'conf->psk_identity', 'conf->psk_identity_len', 'conf->psk_len', 'conf->read_timeout', 'conf->renego_max_records', 'conf->renego_period', 'conf->respect_cli_pref', 'conf->session_tickets', 'conf->sig_algs', 'conf->sig_hashes', 'conf->transport' and 'conf->user_data' fields (from the argument 'conf') are not used in function 'mbedtls_ssl_conf_dtls_badmac_limit'. Instead of passing entire structs as parameters, pass the required fields only",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR012"
    },
    {
      "Check": "PWR012",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/library/ssl_tls.c:1633:1",
      "Title": "Pass only required fields from derived type as parameters",
      "RelatedCodeList": null,
      "Suggestion": "'ssl->alert_reason', 'ssl->alert_type', 'ssl->alpn_chosen', 'ssl->badmac_seen', 'ssl->cli_id', 'ssl->cli_id_len', 'ssl->conf', 'ssl->cur_out_ctr', 'ssl->f_export_keys', 'ssl->f_get_timer', 'ssl->f_recv', 'ssl->f_recv_timeout', 'ssl->f_send', 'ssl->f_set_timer', 'ssl->f_vrfy', 'ssl->handshake', 'ssl->hostname', 'ssl->in_buf', 'ssl->in_cid', 'ssl->in_ctr', 'ssl->in_epoch', 'ssl->in_hdr', 'ssl->in_hslen', 'ssl->in_iv', 'ssl->in_left', 'ssl->in_len', 'ssl->in_msg', 'ssl->in_msglen', 'ssl->in_msgtype', 'ssl->in_offt', 'ssl->in_window', 'ssl->in_window_top', 'ssl->keep_current_message', 'ssl->mtu', 'ssl->nb_zero', 'ssl->negotiate_cid', 'ssl->next_record_offset', 'ssl->out_buf', 'ssl->out_cid', 'ssl->out_ctr', 'ssl->out_hdr', 'ssl->out_iv', 'ssl->out_left', 'ssl->out_len', 'ssl->out_msg', 'ssl->out_msglen', 'ssl->out_msgtype', 'ssl->own_cid', 'ssl->own_cid_len', 'ssl->own_verify_data', 'ssl->p_bio', 'ssl->p_export_keys', 'ssl->p_timer', 'ssl->p_vrfy', 'ssl->peer_verify_data', 'ssl->renego_records_seen', 'ssl->renego_status', 'ssl->secure_renegotiation', 'ssl->send_alert', 'ssl->session', 'ssl->session_in', 'ssl->session_negotiate', 'ssl->session_out', 'ssl->state', 'ssl->tls_version', 'ssl->transform', 'ssl->transform_in', 'ssl->transform_negotiate', 'ssl->transform_out', 'ssl->user_data' and 'ssl->verify_data_len' fields (from the argument 'ssl') are not used in function 'mbedtls_ssl_set_datagram_packing'. Instead of passing entire structs as parameters, pass the required fields only",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR012"
    },
    {
      "Check": "PWR012",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/library/ssl_tls.c:1639:1",
      "Title": "Pass only required fields from derived type as parameters",
      "RelatedCodeList": null,
      "Suggestion": "'conf->allow_legacy_renegotiation', 'conf->alpn_list', 'conf->anti_replay', 'conf->authmode', 'conf->badmac_limit', 'conf->ca_chain', 'conf->ca_crl', 'conf->cert_profile', 'conf->cert_req_ca_list', 'conf->cid_len', 'conf->ciphersuite_list', 'conf->curve_list', 'conf->dhm_G', 'conf->dhm_P', 'conf->dhm_min_bitlen', 'conf->disable_renegotiation', 'conf->dn_hints', 'conf->encrypt_then_mac', 'conf->endpoint', 'conf->extended_ms', 'conf->f_cert_cb', 'conf->f_cookie_check', 'conf->f_cookie_write', 'conf->f_dbg', 'conf->f_get_cache', 'conf->f_psk', 'conf->f_rng', 'conf->f_set_cache', 'conf->f_sni', 'conf->f_ticket_parse', 'conf->f_ticket_write', 'conf->f_vrfy', 'conf->group_list', 'conf->ignore_unexpected_cid', 'conf->key_cert', 'conf->max_tls_version', 'conf->mfl_code', 'conf->min_tls_version', 'conf->p_cache', 'conf->p_cookie', 'conf->p_dbg', 'conf->p_psk', 'conf->p_rng', 'conf->p_sni', 'conf->p_ticket', 'conf->p_vrfy', 'conf->psk', 'conf->psk_identity', 'conf->psk_identity_len', 'conf->psk_len', 'conf->read_timeout', 'conf->renego_max_records', 'conf->renego_period', 'conf->respect_cli_pref', 'conf->session_tickets', 'conf->sig_algs', 'conf->sig_hashes', 'conf->transport' and 'conf->user_data' fields (from the argument 'conf') are not used in function 'mbedtls_ssl_conf_handshake_timeout'. Instead of passing entire structs as parameters, pass the required fields only",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR012"
    },
    {
      "Check": "PWR012",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/library/ssl_tls.c:1647:1",
      "Title": "Pass only required fields from derived type as parameters",
      "RelatedCodeList": null,
      "Suggestion": "'conf->allow_legacy_renegotiation', 'conf->alpn_list', 'conf->anti_replay', 'conf->badmac_limit', 'conf->ca_chain', 'conf->ca_crl', 'conf->cert_profile', 'conf->cert_req_ca_list', 'conf->cid_len', 'conf->ciphersuite_list', 'conf->curve_list', 'conf->dhm_G', 'conf->dhm_P', 'conf->dhm_min_bitlen', 'conf->disable_renegotiation', 'conf->dn_hints', 'conf->encrypt_then_mac', 'conf->endpoint', 'conf->extended_ms', 'conf->f_cert_cb', 'conf->f_cookie_check', 'conf->f_cookie_write', 'conf->f_dbg', 'conf->f_get_cache', 'conf->f_psk', 'conf->f_rng', 'conf->f_set_cache', 'conf->f_sni', 'conf->f_ticket_parse', 'conf->f_ticket_write', 'conf->f_vrfy', 'conf->group_list', 'conf->hs_timeout_max', 'conf->hs_timeout_min', 'conf->ignore_unexpected_cid', 'conf->key_cert', 'conf->max_tls_version', 'conf->mfl_code', 'conf->min_tls_version', 'conf->p_cache', 'conf->p_cookie', 'conf->p_dbg', 'conf->p_psk', 'conf->p_rng', 'conf->p_sni', 'conf->p_ticket', 'conf->p_vrfy', 'conf->psk', 'conf->psk_identity', 'conf->psk_identity_len', 'conf->psk_len', 'conf->read_timeout', 'conf->renego_max_records', 'conf->renego_period', 'conf->respect_cli_pref', 'conf->session_tickets', 'conf->sig_algs', 'conf->sig_hashes', 'conf->transport' and 'conf->user_data' fields (from the argument 'conf') are not used in function 'mbedtls_ssl_conf_authmode'. Instead of passing entire structs as parameters, pass the required fields only",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR012"
    },
    {
      "Check": "PWR012",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/library/ssl_tls.c:1653:1",
      "Title": "Pass only required fields from derived type as parameters",
      "RelatedCodeList": null,
      "Suggestion": "'conf->allow_legacy_renegotiation', 'conf->alpn_list', 'conf->anti_replay', 'conf->authmode', 'conf->badmac_limit', 'conf->ca_chain', 'conf->ca_crl', 'conf->cert_profile', 'conf->cert_req_ca_list', 'conf->cid_len', 'conf->ciphersuite_list', 'conf->curve_list', 'conf->dhm_G', 'conf->dhm_P', 'conf->dhm_min_bitlen', 'conf->disable_renegotiation', 'conf->dn_hints', 'conf->encrypt_then_mac', 'conf->endpoint', 'conf->extended_ms', 'conf->f_cert_cb', 'conf->f_cookie_check', 'conf->f_cookie_write', 'conf->f_dbg', 'conf->f_get_cache', 'conf->f_psk', 'conf->f_rng', 'conf->f_set_cache', 'conf->f_sni', 'conf->f_ticket_parse', 'conf->f_ticket_write', 'conf->group_list', 'conf->hs_timeout_max', 'conf->hs_timeout_min', 'conf->ignore_unexpected_cid', 'conf->key_cert', 'conf->max_tls_version', 'conf->mfl_code', 'conf->min_tls_version', 'conf->p_cache', 'conf->p_cookie', 'conf->p_dbg', 'conf->p_psk', 'conf->p_rng', 'conf->p_sni', 'conf->p_ticket', 'conf->psk', 'conf->psk_identity', 'conf->psk_identity_len', 'conf->psk_len', 'conf->read_timeout', 'conf->renego_max_records', 'conf->renego_period', 'conf->respect_cli_pref', 'conf->session_tickets', 'conf->sig_algs', 'conf->sig_hashes', 'conf->transport' and 'conf->user_data' fields (from the argument 'conf') are not used in function 'mbedtls_ssl_conf_verify'. Instead of passing entire structs as parameters, pass the required fields only",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR012"
    },
    {
      "Check": "PWR012",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/library/ssl_tls.c:1662:1",
      "Title": "Pass only required fields from derived type as parameters",
      "RelatedCodeList": null,
      "Suggestion": "'conf->allow_legacy_renegotiation', 'conf->alpn_list', 'conf->anti_replay', 'conf->authmode', 'conf->badmac_limit', 'conf->ca_chain', 'conf->ca_crl', 'conf->cert_profile', 'conf->cert_req_ca_list', 'conf->cid_len', 'conf->ciphersuite_list', 'conf->curve_list', 'conf->dhm_G', 'conf->dhm_P', 'conf->dhm_min_bitlen', 'conf->disable_renegotiation', 'conf->dn_hints', 'conf->encrypt_then_mac', 'conf->endpoint', 'conf->extended_ms', 'conf->f_cert_cb', 'conf->f_cookie_check', 'conf->f_cookie_write', 'conf->f_dbg', 'conf->f_get_cache', 'conf->f_psk', 'conf->f_set_cache', 'conf->f_sni', 'conf->f_ticket_parse', 'conf->f_ticket_write', 'conf->f_vrfy', 'conf->group_list', 'conf->hs_timeout_max', 'conf->hs_timeout_min', 'conf->ignore_unexpected_cid', 'conf->key_cert', 'conf->max_tls_version', 'conf->mfl_code', 'conf->min_tls_version', 'conf->p_cache', 'conf->p_cookie', 'conf->p_dbg', 'conf->p_psk', 'conf->p_sni', 'conf->p_ticket', 'conf->p_vrfy', 'conf->psk', 'conf->psk_identity', 'conf->psk_identity_len', 'conf->psk_len', 'conf->read_timeout', 'conf->renego_max_records', 'conf->renego_period', 'conf->respect_cli_pref', 'conf->session_tickets', 'conf->sig_algs', 'conf->sig_hashes', 'conf->transport' and 'conf->user_data' fields (from the argument 'conf') are not used in function 'mbedtls_ssl_conf_rng'. Instead of passing entire structs as parameters, pass the required fields only",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR012"
    },
    {
      "Check": "PWR012",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/library/ssl_tls.c:1670:1",
      "Title": "Pass only required fields from derived type as parameters",
      "RelatedCodeList": null,
      "Suggestion": "'conf->allow_legacy_renegotiation', 'conf->alpn_list', 'conf->anti_replay', 'conf->authmode', 'conf->badmac_limit', 'conf->ca_chain', 'conf->ca_crl', 'conf->cert_profile', 'conf->cert_req_ca_list', 'conf->cid_len', 'conf->ciphersuite_list', 'conf->curve_list', 'conf->dhm_G', 'conf->dhm_P', 'conf->dhm_min_bitlen', 'conf->disable_renegotiation', 'conf->dn_hints', 'conf->encrypt_then_mac', 'conf->endpoint', 'conf->extended_ms', 'conf->f_cert_cb', 'conf->f_cookie_check', 'conf->f_cookie_write', 'conf->f_get_cache', 'conf->f_psk', 'conf->f_rng', 'conf->f_set_cache', 'conf->f_sni', 'conf->f_ticket_parse', 'conf->f_ticket_write', 'conf->f_vrfy', 'conf->group_list', 'conf->hs_timeout_max', 'conf->hs_timeout_min', 'conf->ignore_unexpected_cid', 'conf->key_cert', 'conf->max_tls_version', 'conf->mfl_code', 'conf->min_tls_version', 'conf->p_cache', 'conf->p_cookie', 'conf->p_psk', 'conf->p_rng', 'conf->p_sni', 'conf->p_ticket', 'conf->p_vrfy', 'conf->psk', 'conf->psk_identity', 'conf->psk_identity_len', 'conf->psk_len', 'conf->read_timeout', 'conf->renego_max_records', 'conf->renego_period', 'conf->respect_cli_pref', 'conf->session_tickets', 'conf->sig_algs', 'conf->sig_hashes', 'conf->transport' and 'conf->user_data' fields (from the argument 'conf') are not used in function 'mbedtls_ssl_conf_dbg'. Instead of passing entire structs as parameters, pass the required fields only",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR012"
    },
    {
      "Check": "PWR012",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/library/ssl_tls.c:1678:1",
      "Title": "Pass only required fields from derived type as parameters",
      "RelatedCodeList": null,
      "Suggestion": "'ssl->alert_reason', 'ssl->alert_type', 'ssl->alpn_chosen', 'ssl->badmac_seen', 'ssl->cli_id', 'ssl->cli_id_len', 'ssl->conf', 'ssl->cur_out_ctr', 'ssl->disable_datagram_packing', 'ssl->f_export_keys', 'ssl->f_get_timer', 'ssl->f_set_timer', 'ssl->f_vrfy', 'ssl->handshake', 'ssl->hostname', 'ssl->in_buf', 'ssl->in_cid', 'ssl->in_ctr', 'ssl->in_epoch', 'ssl->in_hdr', 'ssl->in_hslen', 'ssl->in_iv', 'ssl->in_left', 'ssl->in_len', 'ssl->in_msg', 'ssl->in_msglen', 'ssl->in_msgtype', 'ssl->in_offt', 'ssl->in_window', 'ssl->in_window_top', 'ssl->keep_current_message', 'ssl->mtu', 'ssl->nb_zero', 'ssl->negotiate_cid', 'ssl->next_record_offset', 'ssl->out_buf', 'ssl->out_cid', 'ssl->out_ctr', 'ssl->out_hdr', 'ssl->out_iv', 'ssl->out_left', 'ssl->out_len', 'ssl->out_msg', 'ssl->out_msglen', 'ssl->out_msgtype', 'ssl->own_cid', 'ssl->own_cid_len', 'ssl->own_verify_data', 'ssl->p_export_keys', 'ssl->p_timer', 'ssl->p_vrfy', 'ssl->peer_verify_data', 'ssl->renego_records_seen', 'ssl->renego_status', 'ssl->secure_renegotiation', 'ssl->send_alert', 'ssl->session', 'ssl->session_in', 'ssl->session_negotiate', 'ssl->session_out', 'ssl->state', 'ssl->tls_version', 'ssl->transform', 'ssl->transform_in', 'ssl->transform_negotiate', 'ssl->transform_out', 'ssl->user_data' and 'ssl->verify_data_len' fields (from the argument 'ssl') are not used in function 'mbedtls_ssl_set_bio'. Instead of passing entire structs as parameters, pass the required fields only",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR012"
    },
    {
      "Check": "PWR012",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/library/ssl_tls.c:1691:1",
      "Title": "Pass only required fields from derived type as parameters",
      "RelatedCodeList": null,
      "Suggestion": "'ssl->alert_reason', 'ssl->alert_type', 'ssl->alpn_chosen', 'ssl->badmac_seen', 'ssl->cli_id', 'ssl->cli_id_len', 'ssl->conf', 'ssl->cur_out_ctr', 'ssl->disable_datagram_packing', 'ssl->f_export_keys', 'ssl->f_get_timer', 'ssl->f_recv', 'ssl->f_recv_timeout', 'ssl->f_send', 'ssl->f_set_timer', 'ssl->f_vrfy', 'ssl->handshake', 'ssl->hostname', 'ssl->in_buf', 'ssl->in_cid', 'ssl->in_ctr', 'ssl->in_epoch', 'ssl->in_hdr', 'ssl->in_hslen', 'ssl->in_iv', 'ssl->in_left', 'ssl->in_len', 'ssl->in_msg', 'ssl->in_msglen', 'ssl->in_msgtype', 'ssl->in_offt', 'ssl->in_window', 'ssl->in_window_top', 'ssl->keep_current_message', 'ssl->nb_zero', 'ssl->negotiate_cid', 'ssl->next_record_offset', 'ssl->out_buf', 'ssl->out_cid', 'ssl->out_ctr', 'ssl->out_hdr', 'ssl->out_iv', 'ssl->out_left', 'ssl->out_len', 'ssl->out_msg', 'ssl->out_msglen', 'ssl->out_msgtype', 'ssl->own_cid', 'ssl->own_cid_len', 'ssl->own_verify_data', 'ssl->p_bio', 'ssl->p_export_keys', 'ssl->p_timer', 'ssl->p_vrfy', 'ssl->peer_verify_data', 'ssl->renego_records_seen', 'ssl->renego_status', 'ssl->secure_renegotiation', 'ssl->send_alert', 'ssl->session', 'ssl->session_in', 'ssl->session_negotiate', 'ssl->session_out', 'ssl->state', 'ssl->tls_version', 'ssl->transform', 'ssl->transform_in', 'ssl->transform_negotiate', 'ssl->transform_out', 'ssl->user_data' and 'ssl->verify_data_len' fields (from the argument 'ssl') are not used in function 'mbedtls_ssl_set_mtu'. Instead of passing entire structs as parameters, pass the required fields only",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR012"
    },
    {
      "Check": "PWR012",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/library/ssl_tls.c:1697:1",
      "Title": "Pass only required fields from derived type as parameters",
      "RelatedCodeList": null,
      "Suggestion": "'conf->allow_legacy_renegotiation', 'conf->alpn_list', 'conf->anti_replay', 'conf->authmode', 'conf->badmac_limit', 'conf->ca_chain', 'conf->ca_crl', 'conf->cert_profile', 'conf->cert_req_ca_list', 'conf->cid_len', 'conf->ciphersuite_list', 'conf->curve_list', 'conf->dhm_G', 'conf->dhm_P', 'conf->dhm_min_bitlen', 'conf->disable_renegotiation', 'conf->dn_hints', 'conf->encrypt_then_mac', 'conf->endpoint', 'conf->extended_ms', 'conf->f_cert_cb', 'conf->f_cookie_check', 'conf->f_cookie_write', 'conf->f_dbg', 'conf->f_get_cache', 'conf->f_psk', 'conf->f_rng', 'conf->f_set_cache', 'conf->f_sni', 'conf->f_ticket_parse', 'conf->f_ticket_write', 'conf->f_vrfy', 'conf->group_list', 'conf->hs_timeout_max', 'conf->hs_timeout_min', 'conf->ignore_unexpected_cid', 'conf->key_cert', 'conf->max_tls_version', 'conf->mfl_code', 'conf->min_tls_version', 'conf->p_cache', 'conf->p_cookie', 'conf->p_dbg', 'conf->p_psk', 'conf->p_rng', 'conf->p_sni', 'conf->p_ticket', 'conf->p_vrfy', 'conf->psk', 'conf->psk_identity', 'conf->psk_identity_len', 'conf->psk_len', 'conf->renego_max_records', 'conf->renego_period', 'conf->respect_cli_pref', 'conf->session_tickets', 'conf->sig_algs', 'conf->sig_hashes', 'conf->transport' and 'conf->user_data' fields (from the argument 'conf') are not used in function 'mbedtls_ssl_conf_read_timeout'. Instead of passing entire structs as parameters, pass the required fields only",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR012"
    },
    {
      "Check": "PWR012",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/library/ssl_tls.c:1716:1",
      "Title": "Pass only required fields from derived type as parameters",
      "RelatedCodeList": null,
      "Suggestion": "'conf->allow_legacy_renegotiation', 'conf->alpn_list', 'conf->anti_replay', 'conf->authmode', 'conf->badmac_limit', 'conf->ca_chain', 'conf->ca_crl', 'conf->cert_profile', 'conf->cert_req_ca_list', 'conf->cid_len', 'conf->ciphersuite_list', 'conf->curve_list', 'conf->dhm_G', 'conf->dhm_P', 'conf->dhm_min_bitlen', 'conf->disable_renegotiation', 'conf->dn_hints', 'conf->encrypt_then_mac', 'conf->endpoint', 'conf->extended_ms', 'conf->f_cert_cb', 'conf->f_cookie_check', 'conf->f_cookie_write', 'conf->f_dbg', 'conf->f_psk', 'conf->f_rng', 'conf->f_sni', 'conf->f_ticket_parse', 'conf->f_ticket_write', 'conf->f_vrfy', 'conf->group_list', 'conf->hs_timeout_max', 'conf->hs_timeout_min', 'conf->ignore_unexpected_cid', 'conf->key_cert', 'conf->max_tls_version', 'conf->mfl_code', 'conf->min_tls_version', 'conf->p_cookie', 'conf->p_dbg', 'conf->p_psk', 'conf->p_rng', 'conf->p_sni', 'conf->p_ticket', 'conf->p_vrfy', 'conf->psk', 'conf->psk_identity', 'conf->psk_identity_len', 'conf->psk_len', 'conf->read_timeout', 'conf->renego_max_records', 'conf->renego_period', 'conf->respect_cli_pref', 'conf->session_tickets', 'conf->sig_algs', 'conf->sig_hashes', 'conf->transport' and 'conf->user_data' fields (from the argument 'conf') are not used in function 'mbedtls_ssl_conf_session_cache'. Instead of passing entire structs as parameters, pass the required fields only",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR012"
    },
    {
      "Check": "PWR012",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/library/ssl_tls.c:1769:1",
      "Title": "Pass only required fields from derived type as parameters",
      "RelatedCodeList": null,
      "Suggestion": "'conf->allow_legacy_renegotiation', 'conf->alpn_list', 'conf->anti_replay', 'conf->authmode', 'conf->badmac_limit', 'conf->ca_chain', 'conf->ca_crl', 'conf->cert_profile', 'conf->cert_req_ca_list', 'conf->cid_len', 'conf->curve_list', 'conf->dhm_G', 'conf->dhm_P', 'conf->dhm_min_bitlen', 'conf->disable_renegotiation', 'conf->dn_hints', 'conf->encrypt_then_mac', 'conf->endpoint', 'conf->extended_ms', 'conf->f_cert_cb', 'conf->f_cookie_check', 'conf->f_cookie_write', 'conf->f_dbg', 'conf->f_get_cache', 'conf->f_psk', 'conf->f_rng', 'conf->f_set_cache', 'conf->f_sni', 'conf->f_ticket_parse', 'conf->f_ticket_write', 'conf->f_vrfy', 'conf->group_list', 'conf->hs_timeout_max', 'conf->hs_timeout_min', 'conf->ignore_unexpected_cid', 'conf->key_cert', 'conf->max_tls_version', 'conf->mfl_code', 'conf->min_tls_version', 'conf->p_cache', 'conf->p_cookie', 'conf->p_dbg', 'conf->p_psk', 'conf->p_rng', 'conf->p_sni', 'conf->p_ticket', 'conf->p_vrfy', 'conf->psk', 'conf->psk_identity', 'conf->psk_identity_len', 'conf->psk_len', 'conf->read_timeout', 'conf->renego_max_records', 'conf->renego_period', 'conf->respect_cli_pref', 'conf->session_tickets', 'conf->sig_algs', 'conf->sig_hashes', 'conf->transport' and 'conf->user_data' fields (from the argument 'conf') are not used in function 'mbedtls_ssl_conf_ciphersuites'. Instead of passing entire structs as parameters, pass the required fields only",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR012"
    },
    {
      "Check": "PWR012",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/library/ssl_tls.c:1801:1",
      "Title": "Pass only required fields from derived type as parameters",
      "RelatedCodeList": null,
      "Suggestion": "'conf->allow_legacy_renegotiation', 'conf->alpn_list', 'conf->anti_replay', 'conf->authmode', 'conf->badmac_limit', 'conf->ca_chain', 'conf->ca_crl', 'conf->cert_req_ca_list', 'conf->cid_len', 'conf->ciphersuite_list', 'conf->curve_list', 'conf->dhm_G', 'conf->dhm_P', 'conf->dhm_min_bitlen', 'conf->disable_renegotiation', 'conf->dn_hints', 'conf->encrypt_then_mac', 'conf->endpoint', 'conf->extended_ms', 'conf->f_cert_cb', 'conf->f_cookie_check', 'conf->f_cookie_write', 'conf->f_dbg', 'conf->f_get_cache', 'conf->f_psk', 'conf->f_rng', 'conf->f_set_cache', 'conf->f_sni', 'conf->f_ticket_parse', 'conf->f_ticket_write', 'conf->f_vrfy', 'conf->group_list', 'conf->hs_timeout_max', 'conf->hs_timeout_min', 'conf->ignore_unexpected_cid', 'conf->key_cert', 'conf->max_tls_version', 'conf->mfl_code', 'conf->min_tls_version', 'conf->p_cache', 'conf->p_cookie', 'conf->p_dbg', 'conf->p_psk', 'conf->p_rng', 'conf->p_sni', 'conf->p_ticket', 'conf->p_vrfy', 'conf->psk', 'conf->psk_identity', 'conf->psk_identity_len', 'conf->psk_len', 'conf->read_timeout', 'conf->renego_max_records', 'conf->renego_period', 'conf->respect_cli_pref', 'conf->session_tickets', 'conf->sig_algs', 'conf->sig_hashes', 'conf->transport' and 'conf->user_data' fields (from the argument 'conf') are not used in function 'mbedtls_ssl_conf_cert_profile'. Instead of passing entire structs as parameters, pass the required fields only",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR012"
    },
    {
      "Check": "PWR012",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/library/ssl_tls.c:1863:1",
      "Title": "Pass only required fields from derived type as parameters",
      "RelatedCodeList": null,
      "Suggestion": "'conf->allow_legacy_renegotiation', 'conf->alpn_list', 'conf->anti_replay', 'conf->authmode', 'conf->badmac_limit', 'conf->cert_profile', 'conf->cert_req_ca_list', 'conf->cid_len', 'conf->ciphersuite_list', 'conf->curve_list', 'conf->dhm_G', 'conf->dhm_P', 'conf->dhm_min_bitlen', 'conf->disable_renegotiation', 'conf->dn_hints', 'conf->encrypt_then_mac', 'conf->endpoint', 'conf->extended_ms', 'conf->f_cert_cb', 'conf->f_cookie_check', 'conf->f_cookie_write', 'conf->f_dbg', 'conf->f_get_cache', 'conf->f_psk', 'conf->f_rng', 'conf->f_set_cache', 'conf->f_sni', 'conf->f_ticket_parse', 'conf->f_ticket_write', 'conf->f_vrfy', 'conf->group_list', 'conf->hs_timeout_max', 'conf->hs_timeout_min', 'conf->ignore_unexpected_cid', 'conf->key_cert', 'conf->max_tls_version', 'conf->mfl_code', 'conf->min_tls_version', 'conf->p_cache', 'conf->p_cookie', 'conf->p_dbg', 'conf->p_psk', 'conf->p_rng', 'conf->p_sni', 'conf->p_ticket', 'conf->p_vrfy', 'conf->psk', 'conf->psk_identity', 'conf->psk_identity_len', 'conf->psk_len', 'conf->read_timeout', 'conf->renego_max_records', 'conf->renego_period', 'conf->respect_cli_pref', 'conf->session_tickets', 'conf->sig_algs', 'conf->sig_hashes', 'conf->transport' and 'conf->user_data' fields (from the argument 'conf') are not used in function 'mbedtls_ssl_conf_ca_chain'. Instead of passing entire structs as parameters, pass the required fields only",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR012"
    },
    {
      "Check": "PWR012",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/library/ssl_tls.c:1895:1",
      "Title": "Pass only required fields from derived type as parameters",
      "RelatedCodeList": null,
      "Suggestion": "'ssl->alert_reason', 'ssl->alert_type', 'ssl->alpn_chosen', 'ssl->badmac_seen', 'ssl->cli_id', 'ssl->cli_id_len', 'ssl->conf', 'ssl->cur_out_ctr', 'ssl->disable_datagram_packing', 'ssl->f_export_keys', 'ssl->f_get_timer', 'ssl->f_recv', 'ssl->f_recv_timeout', 'ssl->f_send', 'ssl->f_set_timer', 'ssl->f_vrfy', 'ssl->hostname', 'ssl->in_buf', 'ssl->in_cid', 'ssl->in_ctr', 'ssl->in_epoch', 'ssl->in_hdr', 'ssl->in_hslen', 'ssl->in_iv', 'ssl->in_left', 'ssl->in_len', 'ssl->in_msg', 'ssl->in_msglen', 'ssl->in_msgtype', 'ssl->in_offt', 'ssl->in_window', 'ssl->in_window_top', 'ssl->keep_current_message', 'ssl->mtu', 'ssl->nb_zero', 'ssl->negotiate_cid', 'ssl->next_record_offset', 'ssl->out_buf', 'ssl->out_cid', 'ssl->out_ctr', 'ssl->out_hdr', 'ssl->out_iv', 'ssl->out_left', 'ssl->out_len', 'ssl->out_msg', 'ssl->out_msglen', 'ssl->out_msgtype', 'ssl->own_cid', 'ssl->own_cid_len', 'ssl->own_verify_data', 'ssl->p_bio', 'ssl->p_export_keys', 'ssl->p_timer', 'ssl->p_vrfy', 'ssl->peer_verify_data', 'ssl->renego_records_seen', 'ssl->renego_status', 'ssl->secure_renegotiation', 'ssl->send_alert', 'ssl->session', 'ssl->session_in', 'ssl->session_negotiate', 'ssl->session_out', 'ssl->state', 'ssl->tls_version', 'ssl->transform', 'ssl->transform_in', 'ssl->transform_negotiate', 'ssl->transform_out', 'ssl->user_data' and 'ssl->verify_data_len' fields (from the argument 'ssl') are not used in function 'mbedtls_ssl_get_hs_sni'. Instead of passing entire structs as parameters, pass the required fields only",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR012"
    },
    {
      "Check": "PWR012",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/library/ssl_tls.c:1910:1",
      "Title": "Pass only required fields from derived type as parameters",
      "RelatedCodeList": null,
      "Suggestion": "'ssl->alert_reason', 'ssl->alert_type', 'ssl->alpn_chosen', 'ssl->badmac_seen', 'ssl->cli_id', 'ssl->cli_id_len', 'ssl->conf', 'ssl->cur_out_ctr', 'ssl->disable_datagram_packing', 'ssl->f_export_keys', 'ssl->f_get_timer', 'ssl->f_recv', 'ssl->f_recv_timeout', 'ssl->f_send', 'ssl->f_set_timer', 'ssl->f_vrfy', 'ssl->hostname', 'ssl->in_buf', 'ssl->in_cid', 'ssl->in_ctr', 'ssl->in_epoch', 'ssl->in_hdr', 'ssl->in_hslen', 'ssl->in_iv', 'ssl->in_left', 'ssl->in_len', 'ssl->in_msg', 'ssl->in_msglen', 'ssl->in_msgtype', 'ssl->in_offt', 'ssl->in_window', 'ssl->in_window_top', 'ssl->keep_current_message', 'ssl->mtu', 'ssl->nb_zero', 'ssl->negotiate_cid', 'ssl->next_record_offset', 'ssl->out_buf', 'ssl->out_cid', 'ssl->out_ctr', 'ssl->out_hdr', 'ssl->out_iv', 'ssl->out_left', 'ssl->out_len', 'ssl->out_msg', 'ssl->out_msglen', 'ssl->out_msgtype', 'ssl->own_cid', 'ssl->own_cid_len', 'ssl->own_verify_data', 'ssl->p_bio', 'ssl->p_export_keys', 'ssl->p_timer', 'ssl->p_vrfy', 'ssl->peer_verify_data', 'ssl->renego_records_seen', 'ssl->renego_status', 'ssl->secure_renegotiation', 'ssl->send_alert', 'ssl->session', 'ssl->session_in', 'ssl->session_negotiate', 'ssl->session_out', 'ssl->state', 'ssl->tls_version', 'ssl->transform', 'ssl->transform_in', 'ssl->transform_negotiate', 'ssl->transform_out', 'ssl->user_data' and 'ssl->verify_data_len' fields (from the argument 'ssl') are not used in function 'mbedtls_ssl_set_hs_ca_chain'. Instead of passing entire structs as parameters, pass the required fields only",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR012"
    },
    {
      "Check": "PWR012",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/library/ssl_tls.c:1919:1",
      "Title": "Pass only required fields from derived type as parameters",
      "RelatedCodeList": null,
      "Suggestion": "'ssl->alert_reason', 'ssl->alert_type', 'ssl->alpn_chosen', 'ssl->badmac_seen', 'ssl->cli_id', 'ssl->cli_id_len', 'ssl->conf', 'ssl->cur_out_ctr', 'ssl->disable_datagram_packing', 'ssl->f_export_keys', 'ssl->f_get_timer', 'ssl->f_recv', 'ssl->f_recv_timeout', 'ssl->f_send', 'ssl->f_set_timer', 'ssl->f_vrfy', 'ssl->hostname', 'ssl->in_buf', 'ssl->in_cid', 'ssl->in_ctr', 'ssl->in_epoch', 'ssl->in_hdr', 'ssl->in_hslen', 'ssl->in_iv', 'ssl->in_left', 'ssl->in_len', 'ssl->in_msg', 'ssl->in_msglen', 'ssl->in_msgtype', 'ssl->in_offt', 'ssl->in_window', 'ssl->in_window_top', 'ssl->keep_current_message', 'ssl->mtu', 'ssl->nb_zero', 'ssl->negotiate_cid', 'ssl->next_record_offset', 'ssl->out_buf', 'ssl->out_cid', 'ssl->out_ctr', 'ssl->out_hdr', 'ssl->out_iv', 'ssl->out_left', 'ssl->out_len', 'ssl->out_msg', 'ssl->out_msglen', 'ssl->out_msgtype', 'ssl->own_cid', 'ssl->own_cid_len', 'ssl->own_verify_data', 'ssl->p_bio', 'ssl->p_export_keys', 'ssl->p_timer', 'ssl->p_vrfy', 'ssl->peer_verify_data', 'ssl->renego_records_seen', 'ssl->renego_status', 'ssl->secure_renegotiation', 'ssl->send_alert', 'ssl->session', 'ssl->session_in', 'ssl->session_negotiate', 'ssl->session_out', 'ssl->state', 'ssl->tls_version', 'ssl->transform', 'ssl->transform_in', 'ssl->transform_negotiate', 'ssl->transform_out', 'ssl->user_data' and 'ssl->verify_data_len' fields (from the argument 'ssl') are not used in function 'mbedtls_ssl_set_hs_dn_hints'. Instead of passing entire structs as parameters, pass the required fields only",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR012"
    },
    {
      "Check": "PWR012",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/library/ssl_tls.c:1926:1",
      "Title": "Pass only required fields from derived type as parameters",
      "RelatedCodeList": null,
      "Suggestion": "'ssl->alert_reason', 'ssl->alert_type', 'ssl->alpn_chosen', 'ssl->badmac_seen', 'ssl->cli_id', 'ssl->cli_id_len', 'ssl->conf', 'ssl->cur_out_ctr', 'ssl->disable_datagram_packing', 'ssl->f_export_keys', 'ssl->f_get_timer', 'ssl->f_recv', 'ssl->f_recv_timeout', 'ssl->f_send', 'ssl->f_set_timer', 'ssl->f_vrfy', 'ssl->hostname', 'ssl->in_buf', 'ssl->in_cid', 'ssl->in_ctr', 'ssl->in_epoch', 'ssl->in_hdr', 'ssl->in_hslen', 'ssl->in_iv', 'ssl->in_left', 'ssl->in_len', 'ssl->in_msg', 'ssl->in_msglen', 'ssl->in_msgtype', 'ssl->in_offt', 'ssl->in_window', 'ssl->in_window_top', 'ssl->keep_current_message', 'ssl->mtu', 'ssl->nb_zero', 'ssl->negotiate_cid', 'ssl->next_record_offset', 'ssl->out_buf', 'ssl->out_cid', 'ssl->out_ctr', 'ssl->out_hdr', 'ssl->out_iv', 'ssl->out_left', 'ssl->out_len', 'ssl->out_msg', 'ssl->out_msglen', 'ssl->out_msgtype', 'ssl->own_cid', 'ssl->own_cid_len', 'ssl->own_verify_data', 'ssl->p_bio', 'ssl->p_export_keys', 'ssl->p_timer', 'ssl->p_vrfy', 'ssl->peer_verify_data', 'ssl->renego_records_seen', 'ssl->renego_status', 'ssl->secure_renegotiation', 'ssl->send_alert', 'ssl->session', 'ssl->session_in', 'ssl->session_negotiate', 'ssl->session_out', 'ssl->state', 'ssl->tls_version', 'ssl->transform', 'ssl->transform_in', 'ssl->transform_negotiate', 'ssl->transform_out', 'ssl->user_data' and 'ssl->verify_data_len' fields (from the argument 'ssl') are not used in function 'mbedtls_ssl_set_hs_authmode'. Instead of passing entire structs as parameters, pass the required fields only",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR012"
    },
    {
      "Check": "PWR012",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/library/ssl_tls.c:1934:1",
      "Title": "Pass only required fields from derived type as parameters",
      "RelatedCodeList": null,
      "Suggestion": "'ssl->alert_reason', 'ssl->alert_type', 'ssl->alpn_chosen', 'ssl->badmac_seen', 'ssl->cli_id', 'ssl->cli_id_len', 'ssl->conf', 'ssl->cur_out_ctr', 'ssl->disable_datagram_packing', 'ssl->f_export_keys', 'ssl->f_get_timer', 'ssl->f_recv', 'ssl->f_recv_timeout', 'ssl->f_send', 'ssl->f_set_timer', 'ssl->handshake', 'ssl->hostname', 'ssl->in_buf', 'ssl->in_cid', 'ssl->in_ctr', 'ssl->in_epoch', 'ssl->in_hdr', 'ssl->in_hslen', 'ssl->in_iv', 'ssl->in_left', 'ssl->in_len', 'ssl->in_msg', 'ssl->in_msglen', 'ssl->in_msgtype', 'ssl->in_offt', 'ssl->in_window', 'ssl->in_window_top', 'ssl->keep_current_message', 'ssl->mtu', 'ssl->nb_zero', 'ssl->negotiate_cid', 'ssl->next_record_offset', 'ssl->out_buf', 'ssl->out_cid', 'ssl->out_ctr', 'ssl->out_hdr', 'ssl->out_iv', 'ssl->out_left', 'ssl->out_len', 'ssl->out_msg', 'ssl->out_msglen', 'ssl->out_msgtype', 'ssl->own_cid', 'ssl->own_cid_len', 'ssl->own_verify_data', 'ssl->p_bio', 'ssl->p_export_keys', 'ssl->p_timer', 'ssl->peer_verify_data', 'ssl->renego_records_seen', 'ssl->renego_status', 'ssl->secure_renegotiation', 'ssl->send_alert', 'ssl->session', 'ssl->session_in', 'ssl->session_negotiate', 'ssl->session_out', 'ssl->state', 'ssl->tls_version', 'ssl->transform', 'ssl->transform_in', 'ssl->transform_negotiate', 'ssl->transform_out', 'ssl->user_data' and 'ssl->verify_data_len' fields (from the argument 'ssl') are not used in function 'mbedtls_ssl_set_verify'. Instead of passing entire structs as parameters, pass the required fields only",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR012"
    },
    {
      "Check": "PWR012",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/library/ssl_tls.c:2093:1",
      "Title": "Pass only required fields from derived type as parameters",
      "RelatedCodeList": null,
      "Suggestion": "'conf->allow_legacy_renegotiation', 'conf->alpn_list', 'conf->anti_replay', 'conf->authmode', 'conf->badmac_limit', 'conf->ca_chain', 'conf->ca_crl', 'conf->cert_profile', 'conf->cert_req_ca_list', 'conf->cid_len', 'conf->ciphersuite_list', 'conf->curve_list', 'conf->dhm_G', 'conf->dhm_P', 'conf->dhm_min_bitlen', 'conf->disable_renegotiation', 'conf->dn_hints', 'conf->encrypt_then_mac', 'conf->endpoint', 'conf->extended_ms', 'conf->f_cert_cb', 'conf->f_cookie_check', 'conf->f_cookie_write', 'conf->f_dbg', 'conf->f_get_cache', 'conf->f_psk', 'conf->f_rng', 'conf->f_set_cache', 'conf->f_sni', 'conf->f_ticket_parse', 'conf->f_ticket_write', 'conf->f_vrfy', 'conf->group_list', 'conf->hs_timeout_max', 'conf->hs_timeout_min', 'conf->ignore_unexpected_cid', 'conf->key_cert', 'conf->max_tls_version', 'conf->mfl_code', 'conf->min_tls_version', 'conf->p_cache', 'conf->p_cookie', 'conf->p_dbg', 'conf->p_psk', 'conf->p_rng', 'conf->p_sni', 'conf->p_ticket', 'conf->p_vrfy', 'conf->read_timeout', 'conf->renego_max_records', 'conf->renego_period', 'conf->respect_cli_pref', 'conf->session_tickets', 'conf->sig_algs', 'conf->sig_hashes', 'conf->transport' and 'conf->user_data' fields (from the argument 'conf') are not used in function 'mbedtls_ssl_conf_has_static_psk'. Instead of passing entire structs as parameters, pass the required fields only",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR012"
    },
    {
      "Check": "PWR012",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/library/ssl_tls.c:2330:1",
      "Title": "Pass only required fields from derived type as parameters",
      "RelatedCodeList": null,
      "Suggestion": "'conf->allow_legacy_renegotiation', 'conf->alpn_list', 'conf->anti_replay', 'conf->authmode', 'conf->badmac_limit', 'conf->ca_chain', 'conf->ca_crl', 'conf->cert_profile', 'conf->cert_req_ca_list', 'conf->cid_len', 'conf->ciphersuite_list', 'conf->curve_list', 'conf->dhm_G', 'conf->dhm_P', 'conf->dhm_min_bitlen', 'conf->disable_renegotiation', 'conf->dn_hints', 'conf->encrypt_then_mac', 'conf->endpoint', 'conf->extended_ms', 'conf->f_cert_cb', 'conf->f_cookie_check', 'conf->f_cookie_write', 'conf->f_dbg', 'conf->f_get_cache', 'conf->f_rng', 'conf->f_set_cache', 'conf->f_sni', 'conf->f_ticket_parse', 'conf->f_ticket_write', 'conf->f_vrfy', 'conf->group_list', 'conf->hs_timeout_max', 'conf->hs_timeout_min', 'conf->ignore_unexpected_cid', 'conf->key_cert', 'conf->max_tls_version', 'conf->mfl_code', 'conf->min_tls_version', 'conf->p_cache', 'conf->p_cookie', 'conf->p_dbg', 'conf->p_rng', 'conf->p_sni', 'conf->p_ticket', 'conf->p_vrfy', 'conf->psk', 'conf->psk_identity', 'conf->psk_identity_len', 'conf->psk_len', 'conf->read_timeout', 'conf->renego_max_records', 'conf->renego_period', 'conf->respect_cli_pref', 'conf->session_tickets', 'conf->sig_algs', 'conf->sig_hashes', 'conf->transport' and 'conf->user_data' fields (from the argument 'conf') are not used in function 'mbedtls_ssl_conf_psk_cb'. Instead of passing entire structs as parameters, pass the required fields only",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR012"
    },
    {
      "Check": "PWR012",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/library/ssl_tls.c:2977:1",
      "Title": "Pass only required fields from derived type as parameters",
      "RelatedCodeList": null,
      "Suggestion": "'conf->allow_legacy_renegotiation', 'conf->alpn_list', 'conf->anti_replay', 'conf->authmode', 'conf->badmac_limit', 'conf->ca_chain', 'conf->ca_crl', 'conf->cert_profile', 'conf->cert_req_ca_list', 'conf->cid_len', 'conf->ciphersuite_list', 'conf->curve_list', 'conf->dhm_G', 'conf->dhm_P', 'conf->disable_renegotiation', 'conf->dn_hints', 'conf->encrypt_then_mac', 'conf->endpoint', 'conf->extended_ms', 'conf->f_cert_cb', 'conf->f_cookie_check', 'conf->f_cookie_write', 'conf->f_dbg', 'conf->f_get_cache', 'conf->f_psk', 'conf->f_rng', 'conf->f_set_cache', 'conf->f_sni', 'conf->f_ticket_parse', 'conf->f_ticket_write', 'conf->f_vrfy', 'conf->group_list', 'conf->hs_timeout_max', 'conf->hs_timeout_min', 'conf->ignore_unexpected_cid', 'conf->key_cert', 'conf->max_tls_version', 'conf->mfl_code', 'conf->min_tls_version', 'conf->p_cache', 'conf->p_cookie', 'conf->p_dbg', 'conf->p_psk', 'conf->p_rng', 'conf->p_sni', 'conf->p_ticket', 'conf->p_vrfy', 'conf->psk', 'conf->psk_identity', 'conf->psk_identity_len', 'conf->psk_len', 'conf->read_timeout', 'conf->renego_max_records', 'conf->renego_period', 'conf->respect_cli_pref', 'conf->session_tickets', 'conf->sig_algs', 'conf->sig_hashes', 'conf->transport' and 'conf->user_data' fields (from the argument 'conf') are not used in function 'mbedtls_ssl_conf_dhm_min_bitlen'. Instead of passing entire structs as parameters, pass the required fields only",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR012"
    },
    {
      "Check": "PWR012",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/library/ssl_tls.c:2989:1",
      "Title": "Pass only required fields from derived type as parameters",
      "RelatedCodeList": null,
      "Suggestion": "'conf->allow_legacy_renegotiation', 'conf->alpn_list', 'conf->anti_replay', 'conf->authmode', 'conf->badmac_limit', 'conf->ca_chain', 'conf->ca_crl', 'conf->cert_profile', 'conf->cert_req_ca_list', 'conf->cid_len', 'conf->ciphersuite_list', 'conf->curve_list', 'conf->dhm_G', 'conf->dhm_P', 'conf->dhm_min_bitlen', 'conf->disable_renegotiation', 'conf->dn_hints', 'conf->encrypt_then_mac', 'conf->endpoint', 'conf->extended_ms', 'conf->f_cert_cb', 'conf->f_cookie_check', 'conf->f_cookie_write', 'conf->f_dbg', 'conf->f_get_cache', 'conf->f_psk', 'conf->f_rng', 'conf->f_set_cache', 'conf->f_sni', 'conf->f_ticket_parse', 'conf->f_ticket_write', 'conf->f_vrfy', 'conf->group_list', 'conf->hs_timeout_max', 'conf->hs_timeout_min', 'conf->ignore_unexpected_cid', 'conf->key_cert', 'conf->max_tls_version', 'conf->mfl_code', 'conf->min_tls_version', 'conf->p_cache', 'conf->p_cookie', 'conf->p_dbg', 'conf->p_psk', 'conf->p_rng', 'conf->p_sni', 'conf->p_ticket', 'conf->p_vrfy', 'conf->psk', 'conf->psk_identity', 'conf->psk_identity_len', 'conf->psk_len', 'conf->read_timeout', 'conf->renego_max_records', 'conf->renego_period', 'conf->respect_cli_pref', 'conf->session_tickets', 'conf->sig_algs', 'conf->transport' and 'conf->user_data' fields (from the argument 'conf') are not used in function 'mbedtls_ssl_conf_sig_hashes'. Instead of passing entire structs as parameters, pass the required fields only",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR012"
    },
    {
      "Check": "PWR012",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/library/ssl_tls.c:2997:1",
      "Title": "Pass only required fields from derived type as parameters",
      "RelatedCodeList": null,
      "Suggestion": "'conf->allow_legacy_renegotiation', 'conf->alpn_list', 'conf->anti_replay', 'conf->authmode', 'conf->badmac_limit', 'conf->ca_chain', 'conf->ca_crl', 'conf->cert_profile', 'conf->cert_req_ca_list', 'conf->cid_len', 'conf->ciphersuite_list', 'conf->curve_list', 'conf->dhm_G', 'conf->dhm_P', 'conf->dhm_min_bitlen', 'conf->disable_renegotiation', 'conf->dn_hints', 'conf->encrypt_then_mac', 'conf->endpoint', 'conf->extended_ms', 'conf->f_cert_cb', 'conf->f_cookie_check', 'conf->f_cookie_write', 'conf->f_dbg', 'conf->f_get_cache', 'conf->f_psk', 'conf->f_rng', 'conf->f_set_cache', 'conf->f_sni', 'conf->f_ticket_parse', 'conf->f_ticket_write', 'conf->f_vrfy', 'conf->group_list', 'conf->hs_timeout_max', 'conf->hs_timeout_min', 'conf->ignore_unexpected_cid', 'conf->key_cert', 'conf->max_tls_version', 'conf->mfl_code', 'conf->min_tls_version', 'conf->p_cache', 'conf->p_cookie', 'conf->p_dbg', 'conf->p_psk', 'conf->p_rng', 'conf->p_sni', 'conf->p_ticket', 'conf->p_vrfy', 'conf->psk', 'conf->psk_identity', 'conf->psk_identity_len', 'conf->psk_len', 'conf->read_timeout', 'conf->renego_max_records', 'conf->renego_period', 'conf->respect_cli_pref', 'conf->session_tickets', 'conf->transport' and 'conf->user_data' fields (from the argument 'conf') are not used in function 'mbedtls_ssl_conf_sig_algs'. Instead of passing entire structs as parameters, pass the required fields only",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR012"
    },
    {
      "Check": "PWR012",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/library/ssl_tls.c:3017:1",
      "Title": "Pass only required fields from derived type as parameters",
      "RelatedCodeList": null,
      "Suggestion": "'conf->allow_legacy_renegotiation', 'conf->alpn_list', 'conf->anti_replay', 'conf->authmode', 'conf->badmac_limit', 'conf->ca_chain', 'conf->ca_crl', 'conf->cert_profile', 'conf->cert_req_ca_list', 'conf->cid_len', 'conf->ciphersuite_list', 'conf->dhm_G', 'conf->dhm_P', 'conf->dhm_min_bitlen', 'conf->disable_renegotiation', 'conf->dn_hints', 'conf->encrypt_then_mac', 'conf->endpoint', 'conf->extended_ms', 'conf->f_cert_cb', 'conf->f_cookie_check', 'conf->f_cookie_write', 'conf->f_dbg', 'conf->f_get_cache', 'conf->f_psk', 'conf->f_rng', 'conf->f_set_cache', 'conf->f_sni', 'conf->f_ticket_parse', 'conf->f_ticket_write', 'conf->f_vrfy', 'conf->hs_timeout_max', 'conf->hs_timeout_min', 'conf->ignore_unexpected_cid', 'conf->key_cert', 'conf->max_tls_version', 'conf->mfl_code', 'conf->min_tls_version', 'conf->p_cache', 'conf->p_cookie', 'conf->p_dbg', 'conf->p_psk', 'conf->p_rng', 'conf->p_sni', 'conf->p_ticket', 'conf->p_vrfy', 'conf->psk', 'conf->psk_identity', 'conf->psk_identity_len', 'conf->psk_len', 'conf->read_timeout', 'conf->renego_max_records', 'conf->renego_period', 'conf->respect_cli_pref', 'conf->session_tickets', 'conf->sig_algs', 'conf->sig_hashes', 'conf->transport' and 'conf->user_data' fields (from the argument 'conf') are not used in function 'mbedtls_ssl_conf_curves'. Instead of passing entire structs as parameters, pass the required fields only",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR012"
    },
    {
      "Check": "PWR012",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/library/ssl_tls.c:3029:1",
      "Title": "Pass only required fields from derived type as parameters",
      "RelatedCodeList": null,
      "Suggestion": "'conf->allow_legacy_renegotiation', 'conf->alpn_list', 'conf->anti_replay', 'conf->authmode', 'conf->badmac_limit', 'conf->ca_chain', 'conf->ca_crl', 'conf->cert_profile', 'conf->cert_req_ca_list', 'conf->cid_len', 'conf->ciphersuite_list', 'conf->dhm_G', 'conf->dhm_P', 'conf->dhm_min_bitlen', 'conf->disable_renegotiation', 'conf->dn_hints', 'conf->encrypt_then_mac', 'conf->endpoint', 'conf->extended_ms', 'conf->f_cert_cb', 'conf->f_cookie_check', 'conf->f_cookie_write', 'conf->f_dbg', 'conf->f_get_cache', 'conf->f_psk', 'conf->f_rng', 'conf->f_set_cache', 'conf->f_sni', 'conf->f_ticket_parse', 'conf->f_ticket_write', 'conf->f_vrfy', 'conf->hs_timeout_max', 'conf->hs_timeout_min', 'conf->ignore_unexpected_cid', 'conf->key_cert', 'conf->max_tls_version', 'conf->mfl_code', 'conf->min_tls_version', 'conf->p_cache', 'conf->p_cookie', 'conf->p_dbg', 'conf->p_psk', 'conf->p_rng', 'conf->p_sni', 'conf->p_ticket', 'conf->p_vrfy', 'conf->psk', 'conf->psk_identity', 'conf->psk_identity_len', 'conf->psk_len', 'conf->read_timeout', 'conf->renego_max_records', 'conf->renego_period', 'conf->respect_cli_pref', 'conf->session_tickets', 'conf->sig_algs', 'conf->sig_hashes', 'conf->transport' and 'conf->user_data' fields (from the argument 'conf') are not used in function 'mbedtls_ssl_conf_groups'. Instead of passing entire structs as parameters, pass the required fields only",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR012"
    },
    {
      "Check": "PWR012",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/library/ssl_tls.c:3081:1",
      "Title": "Pass only required fields from derived type as parameters",
      "RelatedCodeList": null,
      "Suggestion": "'conf->allow_legacy_renegotiation', 'conf->alpn_list', 'conf->anti_replay', 'conf->authmode', 'conf->badmac_limit', 'conf->ca_chain', 'conf->ca_crl', 'conf->cert_profile', 'conf->cert_req_ca_list', 'conf->cid_len', 'conf->ciphersuite_list', 'conf->curve_list', 'conf->dhm_G', 'conf->dhm_P', 'conf->dhm_min_bitlen', 'conf->disable_renegotiation', 'conf->dn_hints', 'conf->encrypt_then_mac', 'conf->endpoint', 'conf->extended_ms', 'conf->f_cert_cb', 'conf->f_cookie_check', 'conf->f_cookie_write', 'conf->f_dbg', 'conf->f_get_cache', 'conf->f_psk', 'conf->f_rng', 'conf->f_set_cache', 'conf->f_ticket_parse', 'conf->f_ticket_write', 'conf->f_vrfy', 'conf->group_list', 'conf->hs_timeout_max', 'conf->hs_timeout_min', 'conf->ignore_unexpected_cid', 'conf->key_cert', 'conf->max_tls_version', 'conf->mfl_code', 'conf->min_tls_version', 'conf->p_cache', 'conf->p_cookie', 'conf->p_dbg', 'conf->p_psk', 'conf->p_rng', 'conf->p_ticket', 'conf->p_vrfy', 'conf->psk', 'conf->psk_identity', 'conf->psk_identity_len', 'conf->psk_len', 'conf->read_timeout', 'conf->renego_max_records', 'conf->renego_period', 'conf->respect_cli_pref', 'conf->session_tickets', 'conf->sig_algs', 'conf->sig_hashes', 'conf->transport' and 'conf->user_data' fields (from the argument 'conf') are not used in function 'mbedtls_ssl_conf_sni'. Instead of passing entire structs as parameters, pass the required fields only",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR012"
    },
    {
      "Check": "PWR012",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/library/ssl_tls.c:3119:1",
      "Title": "Pass only required fields from derived type as parameters",
      "RelatedCodeList": null,
      "Suggestion": "'ssl->alert_reason', 'ssl->alert_type', 'ssl->badmac_seen', 'ssl->cli_id', 'ssl->cli_id_len', 'ssl->conf', 'ssl->cur_out_ctr', 'ssl->disable_datagram_packing', 'ssl->f_export_keys', 'ssl->f_get_timer', 'ssl->f_recv', 'ssl->f_recv_timeout', 'ssl->f_send', 'ssl->f_set_timer', 'ssl->f_vrfy', 'ssl->handshake', 'ssl->hostname', 'ssl->in_buf', 'ssl->in_cid', 'ssl->in_ctr', 'ssl->in_epoch', 'ssl->in_hdr', 'ssl->in_hslen', 'ssl->in_iv', 'ssl->in_left', 'ssl->in_len', 'ssl->in_msg', 'ssl->in_msglen', 'ssl->in_msgtype', 'ssl->in_offt', 'ssl->in_window', 'ssl->in_window_top', 'ssl->keep_current_message', 'ssl->mtu', 'ssl->nb_zero', 'ssl->negotiate_cid', 'ssl->next_record_offset', 'ssl->out_buf', 'ssl->out_cid', 'ssl->out_ctr', 'ssl->out_hdr', 'ssl->out_iv', 'ssl->out_left', 'ssl->out_len', 'ssl->out_msg', 'ssl->out_msglen', 'ssl->out_msgtype', 'ssl->own_cid', 'ssl->own_cid_len', 'ssl->own_verify_data', 'ssl->p_bio', 'ssl->p_export_keys', 'ssl->p_timer', 'ssl->p_vrfy', 'ssl->peer_verify_data', 'ssl->renego_records_seen', 'ssl->renego_status', 'ssl->secure_renegotiation', 'ssl->send_alert', 'ssl->session', 'ssl->session_in', 'ssl->session_negotiate', 'ssl->session_out', 'ssl->state', 'ssl->tls_version', 'ssl->transform', 'ssl->transform_in', 'ssl->transform_negotiate', 'ssl->transform_out', 'ssl->user_data' and 'ssl->verify_data_len' fields (from the argument 'ssl') are not used in function 'mbedtls_ssl_get_alpn_protocol'. Instead of passing entire structs as parameters, pass the required fields only",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR012"
    },
    {
      "Check": "PWR012",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/library/ssl_tls.c:3196:1",
      "Title": "Pass only required fields from derived type as parameters",
      "RelatedCodeList": null,
      "Suggestion": "'conf->allow_legacy_renegotiation', 'conf->alpn_list', 'conf->anti_replay', 'conf->authmode', 'conf->badmac_limit', 'conf->ca_chain', 'conf->ca_crl', 'conf->cert_profile', 'conf->cert_req_ca_list', 'conf->cid_len', 'conf->ciphersuite_list', 'conf->curve_list', 'conf->dhm_G', 'conf->dhm_P', 'conf->dhm_min_bitlen', 'conf->disable_renegotiation', 'conf->dn_hints', 'conf->encrypt_then_mac', 'conf->endpoint', 'conf->extended_ms', 'conf->f_cert_cb', 'conf->f_cookie_check', 'conf->f_cookie_write', 'conf->f_dbg', 'conf->f_get_cache', 'conf->f_psk', 'conf->f_rng', 'conf->f_set_cache', 'conf->f_sni', 'conf->f_ticket_parse', 'conf->f_ticket_write', 'conf->f_vrfy', 'conf->group_list', 'conf->hs_timeout_max', 'conf->hs_timeout_min', 'conf->ignore_unexpected_cid', 'conf->key_cert', 'conf->mfl_code', 'conf->min_tls_version', 'conf->p_cache', 'conf->p_cookie', 'conf->p_dbg', 'conf->p_psk', 'conf->p_rng', 'conf->p_sni', 'conf->p_ticket', 'conf->p_vrfy', 'conf->psk', 'conf->psk_identity', 'conf->psk_identity_len', 'conf->psk_len', 'conf->read_timeout', 'conf->renego_max_records', 'conf->renego_period', 'conf->respect_cli_pref', 'conf->session_tickets', 'conf->sig_algs', 'conf->sig_hashes', 'conf->transport' and 'conf->user_data' fields (from the argument 'conf') are not used in function 'mbedtls_ssl_conf_max_version'. Instead of passing entire structs as parameters, pass the required fields only",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR012"
    },
    {
      "Check": "PWR012",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/library/ssl_tls.c:3201:1",
      "Title": "Pass only required fields from derived type as parameters",
      "RelatedCodeList": null,
      "Suggestion": "'conf->allow_legacy_renegotiation', 'conf->alpn_list', 'conf->anti_replay', 'conf->authmode', 'conf->badmac_limit', 'conf->ca_chain', 'conf->ca_crl', 'conf->cert_profile', 'conf->cert_req_ca_list', 'conf->cid_len', 'conf->ciphersuite_list', 'conf->curve_list', 'conf->dhm_G', 'conf->dhm_P', 'conf->dhm_min_bitlen', 'conf->disable_renegotiation', 'conf->dn_hints', 'conf->encrypt_then_mac', 'conf->endpoint', 'conf->extended_ms', 'conf->f_cert_cb', 'conf->f_cookie_check', 'conf->f_cookie_write', 'conf->f_dbg', 'conf->f_get_cache', 'conf->f_psk', 'conf->f_rng', 'conf->f_set_cache', 'conf->f_sni', 'conf->f_ticket_parse', 'conf->f_ticket_write', 'conf->f_vrfy', 'conf->group_list', 'conf->hs_timeout_max', 'conf->hs_timeout_min', 'conf->ignore_unexpected_cid', 'conf->key_cert', 'conf->max_tls_version', 'conf->mfl_code', 'conf->p_cache', 'conf->p_cookie', 'conf->p_dbg', 'conf->p_psk', 'conf->p_rng', 'conf->p_sni', 'conf->p_ticket', 'conf->p_vrfy', 'conf->psk', 'conf->psk_identity', 'conf->psk_identity_len', 'conf->psk_len', 'conf->read_timeout', 'conf->renego_max_records', 'conf->renego_period', 'conf->respect_cli_pref', 'conf->session_tickets', 'conf->sig_algs', 'conf->sig_hashes', 'conf->transport' and 'conf->user_data' fields (from the argument 'conf') are not used in function 'mbedtls_ssl_conf_min_version'. Instead of passing entire structs as parameters, pass the required fields only",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR012"
    },
    {
      "Check": "PWR012",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/library/ssl_tls.c:3208:1",
      "Title": "Pass only required fields from derived type as parameters",
      "RelatedCodeList": null,
      "Suggestion": "'conf->allow_legacy_renegotiation', 'conf->alpn_list', 'conf->anti_replay', 'conf->authmode', 'conf->badmac_limit', 'conf->ca_chain', 'conf->ca_crl', 'conf->cert_profile', 'conf->cid_len', 'conf->ciphersuite_list', 'conf->curve_list', 'conf->dhm_G', 'conf->dhm_P', 'conf->dhm_min_bitlen', 'conf->disable_renegotiation', 'conf->dn_hints', 'conf->encrypt_then_mac', 'conf->endpoint', 'conf->extended_ms', 'conf->f_cert_cb', 'conf->f_cookie_check', 'conf->f_cookie_write', 'conf->f_dbg', 'conf->f_get_cache', 'conf->f_psk', 'conf->f_rng', 'conf->f_set_cache', 'conf->f_sni', 'conf->f_ticket_parse', 'conf->f_ticket_write', 'conf->f_vrfy', 'conf->group_list', 'conf->hs_timeout_max', 'conf->hs_timeout_min', 'conf->ignore_unexpected_cid', 'conf->key_cert', 'conf->max_tls_version', 'conf->mfl_code', 'conf->min_tls_version', 'conf->p_cache', 'conf->p_cookie', 'conf->p_dbg', 'conf->p_psk', 'conf->p_rng', 'conf->p_sni', 'conf->p_ticket', 'conf->p_vrfy', 'conf->psk', 'conf->psk_identity', 'conf->psk_identity_len', 'conf->psk_len', 'conf->read_timeout', 'conf->renego_max_records', 'conf->renego_period', 'conf->respect_cli_pref', 'conf->session_tickets', 'conf->sig_algs', 'conf->sig_hashes', 'conf->transport' and 'conf->user_data' fields (from the argument 'conf') are not used in function 'mbedtls_ssl_conf_cert_req_ca_list'. Instead of passing entire structs as parameters, pass the required fields only",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR012"
    },
    {
      "Check": "PWR012",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/library/ssl_tls.c:3216:1",
      "Title": "Pass only required fields from derived type as parameters",
      "RelatedCodeList": null,
      "Suggestion": "'conf->allow_legacy_renegotiation', 'conf->alpn_list', 'conf->anti_replay', 'conf->authmode', 'conf->badmac_limit', 'conf->ca_chain', 'conf->ca_crl', 'conf->cert_profile', 'conf->cert_req_ca_list', 'conf->cid_len', 'conf->ciphersuite_list', 'conf->curve_list', 'conf->dhm_G', 'conf->dhm_P', 'conf->dhm_min_bitlen', 'conf->disable_renegotiation', 'conf->dn_hints', 'conf->endpoint', 'conf->extended_ms', 'conf->f_cert_cb', 'conf->f_cookie_check', 'conf->f_cookie_write', 'conf->f_dbg', 'conf->f_get_cache', 'conf->f_psk', 'conf->f_rng', 'conf->f_set_cache', 'conf->f_sni', 'conf->f_ticket_parse', 'conf->f_ticket_write', 'conf->f_vrfy', 'conf->group_list', 'conf->hs_timeout_max', 'conf->hs_timeout_min', 'conf->ignore_unexpected_cid', 'conf->key_cert', 'conf->max_tls_version', 'conf->mfl_code', 'conf->min_tls_version', 'conf->p_cache', 'conf->p_cookie', 'conf->p_dbg', 'conf->p_psk', 'conf->p_rng', 'conf->p_sni', 'conf->p_ticket', 'conf->p_vrfy', 'conf->psk', 'conf->psk_identity', 'conf->psk_identity_len', 'conf->psk_len', 'conf->read_timeout', 'conf->renego_max_records', 'conf->renego_period', 'conf->respect_cli_pref', 'conf->session_tickets', 'conf->sig_algs', 'conf->sig_hashes', 'conf->transport' and 'conf->user_data' fields (from the argument 'conf') are not used in function 'mbedtls_ssl_conf_encrypt_then_mac'. Instead of passing entire structs as parameters, pass the required fields only",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR012"
    },
    {
      "Check": "PWR012",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/library/ssl_tls.c:3223:1",
      "Title": "Pass only required fields from derived type as parameters",
      "RelatedCodeList": null,
      "Suggestion": "'conf->allow_legacy_renegotiation', 'conf->alpn_list', 'conf->anti_replay', 'conf->authmode', 'conf->badmac_limit', 'conf->ca_chain', 'conf->ca_crl', 'conf->cert_profile', 'conf->cert_req_ca_list', 'conf->cid_len', 'conf->ciphersuite_list', 'conf->curve_list', 'conf->dhm_G', 'conf->dhm_P', 'conf->dhm_min_bitlen', 'conf->disable_renegotiation', 'conf->dn_hints', 'conf->encrypt_then_mac', 'conf->endpoint', 'conf->f_cert_cb', 'conf->f_cookie_check', 'conf->f_cookie_write', 'conf->f_dbg', 'conf->f_get_cache', 'conf->f_psk', 'conf->f_rng', 'conf->f_set_cache', 'conf->f_sni', 'conf->f_ticket_parse', 'conf->f_ticket_write', 'conf->f_vrfy', 'conf->group_list', 'conf->hs_timeout_max', 'conf->hs_timeout_min', 'conf->ignore_unexpected_cid', 'conf->key_cert', 'conf->max_tls_version', 'conf->mfl_code', 'conf->min_tls_version', 'conf->p_cache', 'conf->p_cookie', 'conf->p_dbg', 'conf->p_psk', 'conf->p_rng', 'conf->p_sni', 'conf->p_ticket', 'conf->p_vrfy', 'conf->psk', 'conf->psk_identity', 'conf->psk_identity_len', 'conf->psk_len', 'conf->read_timeout', 'conf->renego_max_records', 'conf->renego_period', 'conf->respect_cli_pref', 'conf->session_tickets', 'conf->sig_algs', 'conf->sig_hashes', 'conf->transport' and 'conf->user_data' fields (from the argument 'conf') are not used in function 'mbedtls_ssl_conf_extended_master_secret'. Instead of passing entire structs as parameters, pass the required fields only",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR012"
    },
    {
      "Check": "PWR012",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/library/ssl_tls.c:3243:1",
      "Title": "Pass only required fields from derived type as parameters",
      "RelatedCodeList": null,
      "Suggestion": "'conf->alpn_list', 'conf->anti_replay', 'conf->authmode', 'conf->badmac_limit', 'conf->ca_chain', 'conf->ca_crl', 'conf->cert_profile', 'conf->cert_req_ca_list', 'conf->cid_len', 'conf->ciphersuite_list', 'conf->curve_list', 'conf->dhm_G', 'conf->dhm_P', 'conf->dhm_min_bitlen', 'conf->disable_renegotiation', 'conf->dn_hints', 'conf->encrypt_then_mac', 'conf->endpoint', 'conf->extended_ms', 'conf->f_cert_cb', 'conf->f_cookie_check', 'conf->f_cookie_write', 'conf->f_dbg', 'conf->f_get_cache', 'conf->f_psk', 'conf->f_rng', 'conf->f_set_cache', 'conf->f_sni', 'conf->f_ticket_parse', 'conf->f_ticket_write', 'conf->f_vrfy', 'conf->group_list', 'conf->hs_timeout_max', 'conf->hs_timeout_min', 'conf->ignore_unexpected_cid', 'conf->key_cert', 'conf->max_tls_version', 'conf->mfl_code', 'conf->min_tls_version', 'conf->p_cache', 'conf->p_cookie', 'conf->p_dbg', 'conf->p_psk', 'conf->p_rng', 'conf->p_sni', 'conf->p_ticket', 'conf->p_vrfy', 'conf->psk', 'conf->psk_identity', 'conf->psk_identity_len', 'conf->psk_len', 'conf->read_timeout', 'conf->renego_max_records', 'conf->renego_period', 'conf->respect_cli_pref', 'conf->session_tickets', 'conf->sig_algs', 'conf->sig_hashes', 'conf->transport' and 'conf->user_data' fields (from the argument 'conf') are not used in function 'mbedtls_ssl_conf_legacy_renegotiation'. Instead of passing entire structs as parameters, pass the required fields only",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR012"
    },
    {
      "Check": "PWR012",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/library/ssl_tls.c:3249:1",
      "Title": "Pass only required fields from derived type as parameters",
      "RelatedCodeList": null,
      "Suggestion": "'conf->allow_legacy_renegotiation', 'conf->alpn_list', 'conf->anti_replay', 'conf->authmode', 'conf->badmac_limit', 'conf->ca_chain', 'conf->ca_crl', 'conf->cert_profile', 'conf->cert_req_ca_list', 'conf->cid_len', 'conf->ciphersuite_list', 'conf->curve_list', 'conf->dhm_G', 'conf->dhm_P', 'conf->dhm_min_bitlen', 'conf->dn_hints', 'conf->encrypt_then_mac', 'conf->endpoint', 'conf->extended_ms', 'conf->f_cert_cb', 'conf->f_cookie_check', 'conf->f_cookie_write', 'conf->f_dbg', 'conf->f_get_cache', 'conf->f_psk', 'conf->f_rng', 'conf->f_set_cache', 'conf->f_sni', 'conf->f_ticket_parse', 'conf->f_ticket_write', 'conf->f_vrfy', 'conf->group_list', 'conf->hs_timeout_max', 'conf->hs_timeout_min', 'conf->ignore_unexpected_cid', 'conf->key_cert', 'conf->max_tls_version', 'conf->mfl_code', 'conf->min_tls_version', 'conf->p_cache', 'conf->p_cookie', 'conf->p_dbg', 'conf->p_psk', 'conf->p_rng', 'conf->p_sni', 'conf->p_ticket', 'conf->p_vrfy', 'conf->psk', 'conf->psk_identity', 'conf->psk_identity_len', 'conf->psk_len', 'conf->read_timeout', 'conf->renego_max_records', 'conf->renego_period', 'conf->respect_cli_pref', 'conf->session_tickets', 'conf->sig_algs', 'conf->sig_hashes', 'conf->transport' and 'conf->user_data' fields (from the argument 'conf') are not used in function 'mbedtls_ssl_conf_renegotiation'. Instead of passing entire structs as parameters, pass the required fields only",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR012"
    },
    {
      "Check": "PWR012",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/library/ssl_tls.c:3254:1",
      "Title": "Pass only required fields from derived type as parameters",
      "RelatedCodeList": null,
      "Suggestion": "'conf->allow_legacy_renegotiation', 'conf->alpn_list', 'conf->anti_replay', 'conf->authmode', 'conf->badmac_limit', 'conf->ca_chain', 'conf->ca_crl', 'conf->cert_profile', 'conf->cert_req_ca_list', 'conf->cid_len', 'conf->ciphersuite_list', 'conf->curve_list', 'conf->dhm_G', 'conf->dhm_P', 'conf->dhm_min_bitlen', 'conf->disable_renegotiation', 'conf->dn_hints', 'conf->encrypt_then_mac', 'conf->endpoint', 'conf->extended_ms', 'conf->f_cert_cb', 'conf->f_cookie_check', 'conf->f_cookie_write', 'conf->f_dbg', 'conf->f_get_cache', 'conf->f_psk', 'conf->f_rng', 'conf->f_set_cache', 'conf->f_sni', 'conf->f_ticket_parse', 'conf->f_ticket_write', 'conf->f_vrfy', 'conf->group_list', 'conf->hs_timeout_max', 'conf->hs_timeout_min', 'conf->ignore_unexpected_cid', 'conf->key_cert', 'conf->max_tls_version', 'conf->mfl_code', 'conf->min_tls_version', 'conf->p_cache', 'conf->p_cookie', 'conf->p_dbg', 'conf->p_psk', 'conf->p_rng', 'conf->p_sni', 'conf->p_ticket', 'conf->p_vrfy', 'conf->psk', 'conf->psk_identity', 'conf->psk_identity_len', 'conf->psk_len', 'conf->read_timeout', 'conf->renego_period', 'conf->respect_cli_pref', 'conf->session_tickets', 'conf->sig_algs', 'conf->sig_hashes', 'conf->transport' and 'conf->user_data' fields (from the argument 'conf') are not used in function 'mbedtls_ssl_conf_renegotiation_enforced'. Instead of passing entire structs as parameters, pass the required fields only",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR012"
    },
    {
      "Check": "PWR012",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/library/ssl_tls.c:3268:1",
      "Title": "Pass only required fields from derived type as parameters",
      "RelatedCodeList": null,
      "Suggestion": "'conf->allow_legacy_renegotiation', 'conf->alpn_list', 'conf->anti_replay', 'conf->authmode', 'conf->badmac_limit', 'conf->ca_chain', 'conf->ca_crl', 'conf->cert_profile', 'conf->cert_req_ca_list', 'conf->cid_len', 'conf->ciphersuite_list', 'conf->curve_list', 'conf->dhm_G', 'conf->dhm_P', 'conf->dhm_min_bitlen', 'conf->disable_renegotiation', 'conf->dn_hints', 'conf->encrypt_then_mac', 'conf->endpoint', 'conf->extended_ms', 'conf->f_cert_cb', 'conf->f_cookie_check', 'conf->f_cookie_write', 'conf->f_dbg', 'conf->f_get_cache', 'conf->f_psk', 'conf->f_rng', 'conf->f_set_cache', 'conf->f_sni', 'conf->f_ticket_parse', 'conf->f_ticket_write', 'conf->f_vrfy', 'conf->group_list', 'conf->hs_timeout_max', 'conf->hs_timeout_min', 'conf->ignore_unexpected_cid', 'conf->key_cert', 'conf->max_tls_version', 'conf->mfl_code', 'conf->min_tls_version', 'conf->p_cache', 'conf->p_cookie', 'conf->p_dbg', 'conf->p_psk', 'conf->p_rng', 'conf->p_sni', 'conf->p_ticket', 'conf->p_vrfy', 'conf->psk', 'conf->psk_identity', 'conf->psk_identity_len', 'conf->psk_len', 'conf->read_timeout', 'conf->renego_max_records', 'conf->renego_period', 'conf->respect_cli_pref', 'conf->sig_algs', 'conf->sig_hashes', 'conf->transport' and 'conf->user_data' fields (from the argument 'conf') are not used in function 'mbedtls_ssl_conf_session_tickets'. Instead of passing entire structs as parameters, pass the required fields only",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR012"
    },
    {
      "Check": "PWR012",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/library/ssl_tls.c:3284:1",
      "Title": "Pass only required fields from derived type as parameters",
      "RelatedCodeList": null,
      "Suggestion": "'conf->allow_legacy_renegotiation', 'conf->alpn_list', 'conf->anti_replay', 'conf->authmode', 'conf->badmac_limit', 'conf->ca_chain', 'conf->ca_crl', 'conf->cert_profile', 'conf->cert_req_ca_list', 'conf->cid_len', 'conf->ciphersuite_list', 'conf->curve_list', 'conf->dhm_G', 'conf->dhm_P', 'conf->dhm_min_bitlen', 'conf->disable_renegotiation', 'conf->dn_hints', 'conf->encrypt_then_mac', 'conf->endpoint', 'conf->extended_ms', 'conf->f_cert_cb', 'conf->f_cookie_check', 'conf->f_cookie_write', 'conf->f_dbg', 'conf->f_get_cache', 'conf->f_psk', 'conf->f_rng', 'conf->f_set_cache', 'conf->f_sni', 'conf->f_vrfy', 'conf->group_list', 'conf->hs_timeout_max', 'conf->hs_timeout_min', 'conf->ignore_unexpected_cid', 'conf->key_cert', 'conf->max_tls_version', 'conf->mfl_code', 'conf->min_tls_version', 'conf->p_cache', 'conf->p_cookie', 'conf->p_dbg', 'conf->p_psk', 'conf->p_rng', 'conf->p_sni', 'conf->p_vrfy', 'conf->psk', 'conf->psk_identity', 'conf->psk_identity_len', 'conf->psk_len', 'conf->read_timeout', 'conf->renego_max_records', 'conf->renego_period', 'conf->respect_cli_pref', 'conf->session_tickets', 'conf->sig_algs', 'conf->sig_hashes', 'conf->transport' and 'conf->user_data' fields (from the argument 'conf') are not used in function 'mbedtls_ssl_conf_session_tickets_cb'. Instead of passing entire structs as parameters, pass the required fields only",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR012"
    },
    {
      "Check": "PWR012",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/library/ssl_tls.c:3296:1",
      "Title": "Pass only required fields from derived type as parameters",
      "RelatedCodeList": null,
      "Suggestion": "'ssl->alert_reason', 'ssl->alert_type', 'ssl->alpn_chosen', 'ssl->badmac_seen', 'ssl->cli_id', 'ssl->cli_id_len', 'ssl->conf', 'ssl->cur_out_ctr', 'ssl->disable_datagram_packing', 'ssl->f_get_timer', 'ssl->f_recv', 'ssl->f_recv_timeout', 'ssl->f_send', 'ssl->f_set_timer', 'ssl->f_vrfy', 'ssl->handshake', 'ssl->hostname', 'ssl->in_buf', 'ssl->in_cid', 'ssl->in_ctr', 'ssl->in_epoch', 'ssl->in_hdr', 'ssl->in_hslen', 'ssl->in_iv', 'ssl->in_left', 'ssl->in_len', 'ssl->in_msg', 'ssl->in_msglen', 'ssl->in_msgtype', 'ssl->in_offt', 'ssl->in_window', 'ssl->in_window_top', 'ssl->keep_current_message', 'ssl->mtu', 'ssl->nb_zero', 'ssl->negotiate_cid', 'ssl->next_record_offset', 'ssl->out_buf', 'ssl->out_cid', 'ssl->out_ctr', 'ssl->out_hdr', 'ssl->out_iv', 'ssl->out_left', 'ssl->out_len', 'ssl->out_msg', 'ssl->out_msglen', 'ssl->out_msgtype', 'ssl->own_cid', 'ssl->own_cid_len', 'ssl->own_verify_data', 'ssl->p_bio', 'ssl->p_timer', 'ssl->p_vrfy', 'ssl->peer_verify_data', 'ssl->renego_records_seen', 'ssl->renego_status', 'ssl->secure_renegotiation', 'ssl->send_alert', 'ssl->session', 'ssl->session_in', 'ssl->session_negotiate', 'ssl->session_out', 'ssl->state', 'ssl->tls_version', 'ssl->transform', 'ssl->transform_in', 'ssl->transform_negotiate', 'ssl->transform_out', 'ssl->user_data' and 'ssl->verify_data_len' fields (from the argument 'ssl') are not used in function 'mbedtls_ssl_set_export_keys_cb'. Instead of passing entire structs as parameters, pass the required fields only",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR012"
    },
    {
      "Check": "PWR012",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/library/ssl_tls.c:3346:1",
      "Title": "Pass only required fields from derived type as parameters",
      "RelatedCodeList": null,
      "Suggestion": "'ssl->alert_reason', 'ssl->alert_type', 'ssl->alpn_chosen', 'ssl->badmac_seen', 'ssl->cli_id', 'ssl->cli_id_len', 'ssl->conf', 'ssl->cur_out_ctr', 'ssl->disable_datagram_packing', 'ssl->f_export_keys', 'ssl->f_get_timer', 'ssl->f_recv', 'ssl->f_recv_timeout', 'ssl->f_send', 'ssl->f_set_timer', 'ssl->f_vrfy', 'ssl->handshake', 'ssl->hostname', 'ssl->in_buf', 'ssl->in_cid', 'ssl->in_ctr', 'ssl->in_epoch', 'ssl->in_hdr', 'ssl->in_hslen', 'ssl->in_iv', 'ssl->in_left', 'ssl->in_len', 'ssl->in_msg', 'ssl->in_msglen', 'ssl->in_msgtype', 'ssl->in_offt', 'ssl->in_window', 'ssl->in_window_top', 'ssl->keep_current_message', 'ssl->mtu', 'ssl->nb_zero', 'ssl->negotiate_cid', 'ssl->next_record_offset', 'ssl->out_buf', 'ssl->out_cid', 'ssl->out_ctr', 'ssl->out_hdr', 'ssl->out_iv', 'ssl->out_left', 'ssl->out_len', 'ssl->out_msg', 'ssl->out_msglen', 'ssl->out_msgtype', 'ssl->own_cid', 'ssl->own_cid_len', 'ssl->own_verify_data', 'ssl->p_bio', 'ssl->p_export_keys', 'ssl->p_timer', 'ssl->p_vrfy', 'ssl->peer_verify_data', 'ssl->renego_records_seen', 'ssl->renego_status', 'ssl->secure_renegotiation', 'ssl->send_alert', 'ssl->session_in', 'ssl->session_out', 'ssl->state', 'ssl->tls_version', 'ssl->transform', 'ssl->transform_in', 'ssl->transform_negotiate', 'ssl->transform_out', 'ssl->user_data' and 'ssl->verify_data_len' fields (from the argument 'ssl') are not used in function 'mbedtls_ssl_get_verify_result'. Instead of passing entire structs as parameters, pass the required fields only",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR012"
    },
    {
      "Check": "PWR012",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/library/ssl_tls.c:3484:1",
      "Title": "Pass only required fields from derived type as parameters",
      "RelatedCodeList": null,
      "Suggestion": "'ssl->alert_reason', 'ssl->alert_type', 'ssl->alpn_chosen', 'ssl->badmac_seen', 'ssl->cli_id', 'ssl->cli_id_len', 'ssl->cur_out_ctr', 'ssl->disable_datagram_packing', 'ssl->f_export_keys', 'ssl->f_get_timer', 'ssl->f_recv', 'ssl->f_recv_timeout', 'ssl->f_send', 'ssl->f_set_timer', 'ssl->f_vrfy', 'ssl->hostname', 'ssl->in_buf', 'ssl->in_cid', 'ssl->in_ctr', 'ssl->in_epoch', 'ssl->in_hdr', 'ssl->in_hslen', 'ssl->in_iv', 'ssl->in_left', 'ssl->in_len', 'ssl->in_msg', 'ssl->in_msglen', 'ssl->in_msgtype', 'ssl->in_offt', 'ssl->in_window', 'ssl->in_window_top', 'ssl->keep_current_message', 'ssl->nb_zero', 'ssl->negotiate_cid', 'ssl->next_record_offset', 'ssl->out_buf', 'ssl->out_cid', 'ssl->out_ctr', 'ssl->out_hdr', 'ssl->out_iv', 'ssl->out_left', 'ssl->out_len', 'ssl->out_msg', 'ssl->out_msglen', 'ssl->out_msgtype', 'ssl->own_cid', 'ssl->own_cid_len', 'ssl->own_verify_data', 'ssl->p_bio', 'ssl->p_export_keys', 'ssl->p_timer', 'ssl->p_vrfy', 'ssl->peer_verify_data', 'ssl->renego_records_seen', 'ssl->renego_status', 'ssl->secure_renegotiation', 'ssl->send_alert', 'ssl->session', 'ssl->session_in', 'ssl->session_negotiate', 'ssl->session_out', 'ssl->tls_version', 'ssl->transform', 'ssl->transform_in', 'ssl->transform_negotiate', 'ssl->transform_out', 'ssl->user_data' and 'ssl->verify_data_len' fields (from the argument 'ssl') are not used in function 'mbedtls_ssl_get_current_mtu'. Instead of passing entire structs as parameters, pass the required fields only",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR012"
    },
    {
      "Check": "PWR012",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/library/ssl_tls.c:6418:1",
      "Title": "Pass only required fields from derived type as parameters",
      "RelatedCodeList": null,
      "Suggestion": "'handshake->alt_out_ctr', 'handshake->alt_transform_out', 'handshake->buffering', 'handshake->certificate_request_sent', 'handshake->cid_in_use', 'handshake->ciphersuite_info', 'handshake->cli_exts', 'handshake->client_auth', 'handshake->cookie', 'handshake->cookie_len', 'handshake->cookie_verify_result', 'handshake->cur_msg', 'handshake->cur_msg_p', 'handshake->curves_tls_id', 'handshake->dhm_ctx', 'handshake->dn_hints', 'handshake->ecdh_ctx', 'handshake->extended_ms', 'handshake->fin_sha256', 'handshake->fin_sha384', 'handshake->flight', 'handshake->group_list', 'handshake->group_list_heap_allocated', 'handshake->in_flight_start_seq', 'handshake->in_msg_seq', 'handshake->key_cert', 'handshake->min_tls_version', 'handshake->mtu', 'handshake->new_session_ticket', 'handshake->out_msg_seq', 'handshake->peer_cid', 'handshake->peer_cid_len', 'handshake->pmslen', 'handshake->premaster', 'handshake->psk', 'handshake->psk_len', 'handshake->randbytes', 'handshake->received_sig_algs', 'handshake->resume', 'handshake->retransmit_state', 'handshake->retransmit_timeout', 'handshake->selected_identity', 'handshake->sig_algs', 'handshake->sig_algs_heap_allocated', 'handshake->sni_authmode', 'handshake->sni_ca_chain', 'handshake->sni_ca_crl', 'handshake->sni_key_cert', 'handshake->sni_name', 'handshake->sni_name_len', 'handshake->state_local' and 'handshake->update_checksum' fields (from the argument 'handshake') are not used in function 'ssl_set_handshake_prfs'. Instead of passing entire structs as parameters, pass the required fields only",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR012"
    },
    {
      "Check": "PWR012",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/library/ssl_tls12_server.c:68:1",
      "Title": "Pass only required fields from derived type as parameters",
      "RelatedCodeList": null,
      "Suggestion": "'conf->allow_legacy_renegotiation', 'conf->alpn_list', 'conf->anti_replay', 'conf->authmode', 'conf->badmac_limit', 'conf->ca_chain', 'conf->ca_crl', 'conf->cert_profile', 'conf->cert_req_ca_list', 'conf->cid_len', 'conf->ciphersuite_list', 'conf->curve_list', 'conf->dhm_G', 'conf->dhm_P', 'conf->dhm_min_bitlen', 'conf->disable_renegotiation', 'conf->dn_hints', 'conf->encrypt_then_mac', 'conf->endpoint', 'conf->extended_ms', 'conf->f_cert_cb', 'conf->f_dbg', 'conf->f_get_cache', 'conf->f_psk', 'conf->f_rng', 'conf->f_set_cache', 'conf->f_sni', 'conf->f_ticket_parse', 'conf->f_ticket_write', 'conf->f_vrfy', 'conf->group_list', 'conf->hs_timeout_max', 'conf->hs_timeout_min', 'conf->ignore_unexpected_cid', 'conf->key_cert', 'conf->max_tls_version', 'conf->mfl_code', 'conf->min_tls_version', 'conf->p_cache', 'conf->p_dbg', 'conf->p_psk', 'conf->p_rng', 'conf->p_sni', 'conf->p_ticket', 'conf->p_vrfy', 'conf->psk', 'conf->psk_identity', 'conf->psk_identity_len', 'conf->psk_len', 'conf->read_timeout', 'conf->renego_max_records', 'conf->renego_period', 'conf->respect_cli_pref', 'conf->session_tickets', 'conf->sig_algs', 'conf->sig_hashes', 'conf->transport' and 'conf->user_data' fields (from the argument 'conf') are not used in function 'mbedtls_ssl_conf_dtls_cookies'. Instead of passing entire structs as parameters, pass the required fields only",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR012"
    },
    {
      "Check": "PWR012",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/library/ssl_tls12_server.c:80:1",
      "Title": "Pass only required fields from derived type as parameters",
      "RelatedCodeList": null,
      "Suggestion": "'conf->allow_legacy_renegotiation', 'conf->alpn_list', 'conf->anti_replay', 'conf->authmode', 'conf->badmac_limit', 'conf->ca_chain', 'conf->ca_crl', 'conf->cert_profile', 'conf->cert_req_ca_list', 'conf->cid_len', 'conf->ciphersuite_list', 'conf->curve_list', 'conf->dhm_G', 'conf->dhm_P', 'conf->dhm_min_bitlen', 'conf->disable_renegotiation', 'conf->dn_hints', 'conf->encrypt_then_mac', 'conf->endpoint', 'conf->extended_ms', 'conf->f_cert_cb', 'conf->f_cookie_check', 'conf->f_cookie_write', 'conf->f_dbg', 'conf->f_get_cache', 'conf->f_rng', 'conf->f_set_cache', 'conf->f_sni', 'conf->f_ticket_parse', 'conf->f_ticket_write', 'conf->f_vrfy', 'conf->group_list', 'conf->hs_timeout_max', 'conf->hs_timeout_min', 'conf->ignore_unexpected_cid', 'conf->key_cert', 'conf->max_tls_version', 'conf->mfl_code', 'conf->min_tls_version', 'conf->p_cache', 'conf->p_cookie', 'conf->p_dbg', 'conf->p_psk', 'conf->p_rng', 'conf->p_sni', 'conf->p_ticket', 'conf->p_vrfy', 'conf->read_timeout', 'conf->renego_max_records', 'conf->renego_period', 'conf->respect_cli_pref', 'conf->session_tickets', 'conf->sig_algs', 'conf->sig_hashes', 'conf->transport' and 'conf->user_data' fields (from the argument 'conf') are not used in function 'ssl_conf_has_psk_or_cb'. Instead of passing entire structs as parameters, pass the required fields only",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR012"
    },
    {
      "Check": "PWR012",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/library/ssl_tls12_server.c:4429:1",
      "Title": "Pass only required fields from derived type as parameters",
      "RelatedCodeList": null,
      "Suggestion": "'conf->allow_legacy_renegotiation', 'conf->alpn_list', 'conf->anti_replay', 'conf->authmode', 'conf->badmac_limit', 'conf->ca_chain', 'conf->ca_crl', 'conf->cert_profile', 'conf->cert_req_ca_list', 'conf->cid_len', 'conf->ciphersuite_list', 'conf->curve_list', 'conf->dhm_G', 'conf->dhm_P', 'conf->dhm_min_bitlen', 'conf->disable_renegotiation', 'conf->dn_hints', 'conf->encrypt_then_mac', 'conf->endpoint', 'conf->extended_ms', 'conf->f_cert_cb', 'conf->f_cookie_check', 'conf->f_cookie_write', 'conf->f_dbg', 'conf->f_get_cache', 'conf->f_psk', 'conf->f_rng', 'conf->f_set_cache', 'conf->f_sni', 'conf->f_ticket_parse', 'conf->f_ticket_write', 'conf->f_vrfy', 'conf->group_list', 'conf->hs_timeout_max', 'conf->hs_timeout_min', 'conf->ignore_unexpected_cid', 'conf->key_cert', 'conf->max_tls_version', 'conf->mfl_code', 'conf->min_tls_version', 'conf->p_cache', 'conf->p_cookie', 'conf->p_dbg', 'conf->p_psk', 'conf->p_rng', 'conf->p_sni', 'conf->p_ticket', 'conf->p_vrfy', 'conf->psk', 'conf->psk_identity', 'conf->psk_identity_len', 'conf->psk_len', 'conf->read_timeout', 'conf->renego_max_records', 'conf->renego_period', 'conf->session_tickets', 'conf->sig_algs', 'conf->sig_hashes', 'conf->transport' and 'conf->user_data' fields (from the argument 'conf') are not used in function 'mbedtls_ssl_conf_preference_order'. Instead of passing entire structs as parameters, pass the required fields only",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR012"
    },
    {
      "Check": "PWR016",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/tests/src/drivers/platform_builtin_keys.c:67:5",
      "Title": "Use separate arrays instead of an Array-of-Structs",
      "RelatedCodeList": {
        "Subtitle": "Uses",
        "Code": [
          "         i < (sizeof(builtin_keys) / sizeof(builtin_keys[0])); i++) {",
          "        builtin_key = &builtin_keys[i];"
        ]
      },
      "Suggestion": "Convert the Array-of-Structs (AoS) 'builtin_keys' into separate plain arrays",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR016"
    },
    {
      "Check": "PWR016",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/library/bignum.c:1769:5",
      "Title": "Use separate arrays instead of an Array-of-Structs",
      "RelatedCodeList": {
        "Subtitle": "Uses",
        "Code": [
          "    MBEDTLS_MPI_CHK(mbedtls_mpi_grow(&W[x_index], j));"
        ]
      },
      "Suggestion": "Convert the Array-of-Structs (AoS) 'W' into separate plain arrays",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR016"
    },
    {
      "Check": "PWR016",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/library/bignum.c:1770:5",
      "Title": "Use separate arrays instead of an Array-of-Structs",
      "RelatedCodeList": {
        "Subtitle": "Uses",
        "Code": [
          "    MBEDTLS_MPI_CHK(mbedtls_mpi_grow(&W[1],  j));"
        ]
      },
      "Suggestion": "Convert the Array-of-Structs (AoS) 'W' into separate plain arrays",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR016"
    },
    {
      "Check": "PWR016",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/library/bignum.c:1802:9",
      "Title": "Use separate arrays instead of an Array-of-Structs",
      "RelatedCodeList": {
        "Subtitle": "Uses",
        "Code": [
          "        MBEDTLS_MPI_CHK(mbedtls_mpi_mod_mpi(&W[1], A, N));"
        ]
      },
      "Suggestion": "Convert the Array-of-Structs (AoS) 'W' into separate plain arrays",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR016"
    },
    {
      "Check": "PWR016",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/library/bignum.c:1806:9",
      "Title": "Use separate arrays instead of an Array-of-Structs",
      "RelatedCodeList": {
        "Subtitle": "Uses",
        "Code": [
          "        MBEDTLS_MPI_CHK(mbedtls_mpi_grow(&W[1], N->n + 1));"
        ]
      },
      "Suggestion": "Convert the Array-of-Structs (AoS) 'W' into separate plain arrays",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR016"
    },
    {
      "Check": "PWR016",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/library/bignum.c:1808:9",
      "Title": "Use separate arrays instead of an Array-of-Structs",
      "RelatedCodeList": {
        "Subtitle": "Uses",
        "Code": [
          "        MBEDTLS_MPI_CHK(mbedtls_mpi_copy(&W[1], A));"
        ]
      },
      "Suggestion": "Convert the Array-of-Structs (AoS) 'W' into separate plain arrays",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR016"
    },
    {
      "Check": "PWR016",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/library/bignum.c:1818:5",
      "Title": "Use separate arrays instead of an Array-of-Structs",
      "RelatedCodeList": {
        "Subtitle": "Uses",
        "Code": [
          "    MBEDTLS_MPI_CHK(mbedtls_mpi_copy(&W[x_index], &RR));"
        ]
      },
      "Suggestion": "Convert the Array-of-Structs (AoS) 'W' into separate plain arrays",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR016"
    },
    {
      "Check": "PWR016",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/library/bignum.c:1835:9",
      "Title": "Use separate arrays instead of an Array-of-Structs",
      "RelatedCodeList": {
        "Subtitle": "Uses",
        "Code": [
          "        MBEDTLS_MPI_CHK(mbedtls_mpi_grow(&W[j], N->n + 1));"
        ]
      },
      "Suggestion": "Convert the Array-of-Structs (AoS) 'W' into separate plain arrays",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR016"
    },
    {
      "Check": "PWR016",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/library/bignum.c:1836:9",
      "Title": "Use separate arrays instead of an Array-of-Structs",
      "RelatedCodeList": {
        "Subtitle": "Uses",
        "Code": [
          "        MBEDTLS_MPI_CHK(mbedtls_mpi_copy(&W[j], &W[1]));"
        ]
      },
      "Suggestion": "Convert the Array-of-Structs (AoS) 'W' into separate plain arrays",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR016"
    },
    {
      "Check": "PWR016",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/library/bignum.c:1838:9",
      "Title": "Use separate arrays instead of an Array-of-Structs",
      "RelatedCodeList": {
        "Subtitle": "Uses",
        "Code": [
          "            mpi_montmul(&W[j], &W[j], N, mm, &T);"
        ]
      },
      "Suggestion": "Convert the Array-of-Structs (AoS) 'W' into separate plain arrays",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR016"
    },
    {
      "Check": "PWR016",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/library/bignum.c:1845:9",
      "Title": "Use separate arrays instead of an Array-of-Structs",
      "RelatedCodeList": {
        "Subtitle": "Uses",
        "Code": [
          "            MBEDTLS_MPI_CHK(mbedtls_mpi_grow(&W[i], N->n + 1));",
          "            MBEDTLS_MPI_CHK(mbedtls_mpi_copy(&W[i], &W[i - 1]));",
          "            mpi_montmul(&W[i], &W[1], N, mm, &T);"
        ]
      },
      "Suggestion": "Convert the Array-of-Structs (AoS) 'W' into separate plain arrays",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR016"
    },
    {
      "Check": "PWR016",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/library/bignum.c:1846:13",
      "Title": "Use separate arrays instead of an Array-of-Structs",
      "RelatedCodeList": {
        "Subtitle": "Uses",
        "Code": [
          "            MBEDTLS_MPI_CHK(mbedtls_mpi_grow(&W[i], N->n + 1));"
        ]
      },
      "Suggestion": "Convert the Array-of-Structs (AoS) 'W' into separate plain arrays",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR016"
    },
    {
      "Check": "PWR016",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/library/bignum.c:1847:13",
      "Title": "Use separate arrays instead of an Array-of-Structs",
      "RelatedCodeList": {
        "Subtitle": "Uses",
        "Code": [
          "            MBEDTLS_MPI_CHK(mbedtls_mpi_copy(&W[i], &W[i - 1]));"
        ]
      },
      "Suggestion": "Convert the Array-of-Structs (AoS) 'W' into separate plain arrays",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR016"
    },
    {
      "Check": "PWR016",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/library/bignum.c:1858:5",
      "Title": "Use separate arrays instead of an Array-of-Structs",
      "RelatedCodeList": {
        "Subtitle": "Uses",
        "Code": [
          "            MBEDTLS_MPI_CHK(mpi_select(&WW, W, w_table_used_size, x_index));",
          "            mpi_montmul(&W[x_index], &WW, N, mm, &T);",
          "                MBEDTLS_MPI_CHK(mpi_select(&WW, W, w_table_used_size,",
          "                mpi_montmul(&W[x_index], &WW, N, mm, &T);",
          "            MBEDTLS_MPI_CHK(mpi_select(&WW, W, w_table_used_size,",
          "            mpi_montmul(&W[x_index], &WW, N, mm, &T);"
        ]
      },
      "Suggestion": "Convert the Array-of-Structs (AoS) 'W' into separate plain arrays",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR016"
    },
    {
      "Check": "PWR016",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/library/bignum.c:1884:13",
      "Title": "Use separate arrays instead of an Array-of-Structs",
      "RelatedCodeList": {
        "Subtitle": "Uses",
        "Code": [
          "            MBEDTLS_MPI_CHK(mpi_select(&WW, W, w_table_used_size, x_index));"
        ]
      },
      "Suggestion": "Convert the Array-of-Structs (AoS) 'W' into separate plain arrays",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR016"
    },
    {
      "Check": "PWR016",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/library/bignum.c:1901:13",
      "Title": "Use separate arrays instead of an Array-of-Structs",
      "RelatedCodeList": {
        "Subtitle": "Uses",
        "Code": [
          "                MBEDTLS_MPI_CHK(mpi_select(&WW, W, w_table_used_size,",
          "                mpi_montmul(&W[x_index], &WW, N, mm, &T);"
        ]
      },
      "Suggestion": "Convert the Array-of-Structs (AoS) 'W' into separate plain arrays",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR016"
    },
    {
      "Check": "PWR016",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/library/bignum.c:1902:17",
      "Title": "Use separate arrays instead of an Array-of-Structs",
      "RelatedCodeList": {
        "Subtitle": "Uses",
        "Code": [
          "                MBEDTLS_MPI_CHK(mpi_select(&WW, W, w_table_used_size,"
        ]
      },
      "Suggestion": "Convert the Array-of-Structs (AoS) 'W' into separate plain arrays",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR016"
    },
    {
      "Check": "PWR016",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/library/bignum.c:1910:13",
      "Title": "Use separate arrays instead of an Array-of-Structs",
      "RelatedCodeList": {
        "Subtitle": "Uses",
        "Code": [
          "            MBEDTLS_MPI_CHK(mpi_select(&WW, W, w_table_used_size,"
        ]
      },
      "Suggestion": "Convert the Array-of-Structs (AoS) 'W' into separate plain arrays",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR016"
    },
    {
      "Check": "PWR016",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/library/bignum.c:1923:5",
      "Title": "Use separate arrays instead of an Array-of-Structs",
      "RelatedCodeList": {
        "Subtitle": "Uses",
        "Code": [
          "        MBEDTLS_MPI_CHK(mpi_select(&WW, W, w_table_used_size, x_index));",
          "        mpi_montmul(&W[x_index], &WW, N, mm, &T);",
          "            MBEDTLS_MPI_CHK(mpi_select(&WW, W, w_table_used_size, 1));",
          "            mpi_montmul(&W[x_index], &WW, N, mm, &T);"
        ]
      },
      "Suggestion": "Convert the Array-of-Structs (AoS) 'W' into separate plain arrays",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR016"
    },
    {
      "Check": "PWR016",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/library/bignum.c:1924:9",
      "Title": "Use separate arrays instead of an Array-of-Structs",
      "RelatedCodeList": {
        "Subtitle": "Uses",
        "Code": [
          "        MBEDTLS_MPI_CHK(mpi_select(&WW, W, w_table_used_size, x_index));"
        ]
      },
      "Suggestion": "Convert the Array-of-Structs (AoS) 'W' into separate plain arrays",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR016"
    },
    {
      "Check": "PWR016",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/library/bignum.c:1930:13",
      "Title": "Use separate arrays instead of an Array-of-Structs",
      "RelatedCodeList": {
        "Subtitle": "Uses",
        "Code": [
          "            MBEDTLS_MPI_CHK(mpi_select(&WW, W, w_table_used_size, 1));"
        ]
      },
      "Suggestion": "Convert the Array-of-Structs (AoS) 'W' into separate plain arrays",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR016"
    },
    {
      "Check": "PWR016",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/library/bignum.c:1942:9",
      "Title": "Use separate arrays instead of an Array-of-Structs",
      "RelatedCodeList": {
        "Subtitle": "Uses",
        "Code": [
          "        MBEDTLS_MPI_CHK(mbedtls_mpi_add_mpi(&W[x_index], N, &W[x_index]));"
        ]
      },
      "Suggestion": "Convert the Array-of-Structs (AoS) 'W' into separate plain arrays",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR016"
    },
    {
      "Check": "PWR016",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/library/bignum.c:1948:5",
      "Title": "Use separate arrays instead of an Array-of-Structs",
      "RelatedCodeList": {
        "Subtitle": "Uses",
        "Code": [
          "    MBEDTLS_MPI_CHK(mbedtls_mpi_copy(X, &W[x_index]));"
        ]
      },
      "Suggestion": "Convert the Array-of-Structs (AoS) 'W' into separate plain arrays",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR016"
    },
    {
      "Check": "PWR016",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/library/bignum.c:1954:5",
      "Title": "Use separate arrays instead of an Array-of-Structs",
      "RelatedCodeList": {
        "Subtitle": "Uses",
        "Code": [
          "        mbedtls_mpi_free(&W[i]);"
        ]
      },
      "Suggestion": "Convert the Array-of-Structs (AoS) 'W' into separate plain arrays",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR016"
    },
    {
      "Check": "PWR016",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/library/cipher.c:90:5",
      "Title": "Use separate arrays instead of an Array-of-Structs",
      "RelatedCodeList": {
        "Subtitle": "Uses",
        "Code": [
          "    for (def = mbedtls_cipher_definitions; def->info != NULL; def++) {"
        ]
      },
      "Suggestion": "Convert the Array-of-Structs (AoS) 'mbedtls_cipher_definitions' into separate plain arrays",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR016"
    },
    {
      "Check": "PWR016",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/library/cipher.c:108:5",
      "Title": "Use separate arrays instead of an Array-of-Structs",
      "RelatedCodeList": {
        "Subtitle": "Uses",
        "Code": [
          "    for (def = mbedtls_cipher_definitions; def->info != NULL; def++) {"
        ]
      },
      "Suggestion": "Convert the Array-of-Structs (AoS) 'mbedtls_cipher_definitions' into separate plain arrays",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR016"
    },
    {
      "Check": "PWR016",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/library/cipher.c:124:5",
      "Title": "Use separate arrays instead of an Array-of-Structs",
      "RelatedCodeList": {
        "Subtitle": "Uses",
        "Code": [
          "    for (def = mbedtls_cipher_definitions; def->info != NULL; def++) {"
        ]
      },
      "Suggestion": "Convert the Array-of-Structs (AoS) 'mbedtls_cipher_definitions' into separate plain arrays",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR016"
    },
    {
      "Check": "PWR016",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/library/ecp.c:1906:5",
      "Title": "Use separate arrays instead of an Array-of-Structs",
      "RelatedCodeList": {
        "Subtitle": "Uses",
        "Code": [
          "        MBEDTLS_MPI_CHK(ecp_double_jac(grp, cur, cur, tmp));"
        ]
      },
      "Suggestion": "Convert the Array-of-Structs (AoS) 'tmp' into separate plain arrays",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR016"
    },
    {
      "Check": "PWR016",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/library/ecp.c:1916:9",
      "Title": "Use separate arrays instead of an Array-of-Structs",
      "RelatedCodeList": {
        "Subtitle": "Uses",
        "Code": [
          "        MBEDTLS_MPI_CHK(ecp_double_jac(grp, cur, cur, tmp));"
        ]
      },
      "Suggestion": "Convert the Array-of-Structs (AoS) 'tmp' into separate plain arrays",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR016"
    },
    {
      "Check": "PWR016",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/library/ecp.c:1934:5",
      "Title": "Use separate arrays instead of an Array-of-Structs",
      "RelatedCodeList": {
        "Subtitle": "Uses",
        "Code": [
          "        TT[j++] = T + i;"
        ]
      },
      "Suggestion": "Convert the Array-of-Structs (AoS) 'TT' into separate plain arrays",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR016"
    },
    {
      "Check": "PWR016",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/library/ecp.c:1940:5",
      "Title": "Use separate arrays instead of an Array-of-Structs",
      "RelatedCodeList": {
        "Subtitle": "Uses",
        "Code": [
          "    MBEDTLS_MPI_CHK(ecp_normalize_jac_many(grp, TT, j));"
        ]
      },
      "Suggestion": "Convert the Array-of-Structs (AoS) 'TT' into separate plain arrays",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR016"
    },
    {
      "Check": "PWR016",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/library/ecp.c:1955:5",
      "Title": "Use separate arrays instead of an Array-of-Structs",
      "RelatedCodeList": {
        "Subtitle": "Uses",
        "Code": [
          "            MBEDTLS_MPI_CHK(ecp_add_mixed(grp, &T[i + j], &T[j], &T[i], tmp));"
        ]
      },
      "Suggestion": "Convert the Array-of-Structs (AoS) 'tmp' into separate plain arrays",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR016"
    },
    {
      "Check": "PWR016",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/library/ecp.c:1957:9",
      "Title": "Use separate arrays instead of an Array-of-Structs",
      "RelatedCodeList": {
        "Subtitle": "Uses",
        "Code": [
          "            MBEDTLS_MPI_CHK(ecp_add_mixed(grp, &T[i + j], &T[j], &T[i], tmp));"
        ]
      },
      "Suggestion": "Convert the Array-of-Structs (AoS) 'tmp' into separate plain arrays",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR016"
    },
    {
      "Check": "PWR016",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/library/ecp.c:1958:13",
      "Title": "Use separate arrays instead of an Array-of-Structs",
      "RelatedCodeList": {
        "Subtitle": "Uses",
        "Code": [
          "            MBEDTLS_MPI_CHK(ecp_add_mixed(grp, &T[i + j], &T[j], &T[i], tmp));"
        ]
      },
      "Suggestion": "Convert the Array-of-Structs (AoS) 'tmp' into separate plain arrays",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR016"
    },
    {
      "Check": "PWR016",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/library/ecp.c:1974:5",
      "Title": "Use separate arrays instead of an Array-of-Structs",
      "RelatedCodeList": {
        "Subtitle": "Uses",
        "Code": [
          "        TT[j] = T + j + 1;"
        ]
      },
      "Suggestion": "Convert the Array-of-Structs (AoS) 'TT' into separate plain arrays",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR016"
    },
    {
      "Check": "PWR016",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/library/ecp.c:1980:5",
      "Title": "Use separate arrays instead of an Array-of-Structs",
      "RelatedCodeList": {
        "Subtitle": "Uses",
        "Code": [
          "    MBEDTLS_MPI_CHK(ecp_normalize_jac_many(grp, TT, j));"
        ]
      },
      "Suggestion": "Convert the Array-of-Structs (AoS) 'TT' into separate plain arrays",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR016"
    },
    {
      "Check": "PWR016",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/library/ecp.c:2084:5",
      "Title": "Use separate arrays instead of an Array-of-Structs",
      "RelatedCodeList": {
        "Subtitle": "Uses",
        "Code": [
          "        MBEDTLS_MPI_CHK(ecp_double_jac(grp, R, R, tmp));",
          "        MBEDTLS_MPI_CHK(ecp_add_mixed(grp, R, R, &Txi, tmp));"
        ]
      },
      "Suggestion": "Convert the Array-of-Structs (AoS) 'tmp' into separate plain arrays",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR016"
    },
    {
      "Check": "PWR016",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/library/ecp.c:2088:9",
      "Title": "Use separate arrays instead of an Array-of-Structs",
      "RelatedCodeList": {
        "Subtitle": "Uses",
        "Code": [
          "        MBEDTLS_MPI_CHK(ecp_double_jac(grp, R, R, tmp));"
        ]
      },
      "Suggestion": "Convert the Array-of-Structs (AoS) 'tmp' into separate plain arrays",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR016"
    },
    {
      "Check": "PWR016",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/library/ecp.c:2090:9",
      "Title": "Use separate arrays instead of an Array-of-Structs",
      "RelatedCodeList": {
        "Subtitle": "Uses",
        "Code": [
          "        MBEDTLS_MPI_CHK(ecp_add_mixed(grp, R, R, &Txi, tmp));"
        ]
      },
      "Suggestion": "Convert the Array-of-Structs (AoS) 'tmp' into separate plain arrays",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR016"
    },
    {
      "Check": "PWR016",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/library/ecp.c:2581:5",
      "Title": "Use separate arrays instead of an Array-of-Structs",
      "RelatedCodeList": {
        "Subtitle": "Uses",
        "Code": [
          "        MBEDTLS_MPI_CHK(ecp_double_add_mxz(grp, R, &RP, R, &RP, &PX, tmp));"
        ]
      },
      "Suggestion": "Convert the Array-of-Structs (AoS) 'tmp' into separate plain arrays",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR016"
    },
    {
      "Check": "PWR016",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/library/ecp.c:2592:9",
      "Title": "Use separate arrays instead of an Array-of-Structs",
      "RelatedCodeList": {
        "Subtitle": "Uses",
        "Code": [
          "        MBEDTLS_MPI_CHK(ecp_double_add_mxz(grp, R, &RP, R, &RP, &PX, tmp));"
        ]
      },
      "Suggestion": "Convert the Array-of-Structs (AoS) 'tmp' into separate plain arrays",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR016"
    },
    {
      "Check": "PWR016",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/library/ecp.c:2866:5",
      "Title": "Use separate arrays instead of an Array-of-Structs",
      "RelatedCodeList": {
        "Subtitle": "Uses",
        "Code": [
          "    MBEDTLS_MPI_CHK(ecp_add_mixed(grp, pR, pmP, pR, tmp));"
        ]
      },
      "Suggestion": "Convert the Array-of-Structs (AoS) 'tmp' into separate plain arrays",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR016"
    },
    {
      "Check": "PWR016",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/library/x509_create.c:105:5",
      "Title": "Use separate arrays instead of an Array-of-Structs",
      "RelatedCodeList": {
        "Subtitle": "Uses",
        "Code": [
          "    for (cur = x509_attrs; cur->name != NULL; cur++) {"
        ]
      },
      "Suggestion": "Convert the Array-of-Structs (AoS) 'x509_attrs' into separate plain arrays",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR016"
    },
    {
      "Check": "PWR016",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/library/x509_crt.c:1908:5",
      "Title": "Use separate arrays instead of an Array-of-Structs",
      "RelatedCodeList": {
        "Subtitle": "Uses",
        "Code": [
          "    for (cur = x509_crt_verify_strings; cur->string != NULL; cur++) {"
        ]
      },
      "Suggestion": "Convert the Array-of-Structs (AoS) 'x509_crt_verify_strings' into separate plain arrays",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR016"
    },
    {
      "Check": "PWR016",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/library/debug.c:332:5",
      "Title": "Use separate arrays instead of an Array-of-Structs",
      "RelatedCodeList": {
        "Subtitle": "Uses",
        "Code": [
          "        if (items[i].type == MBEDTLS_PK_DEBUG_NONE) {",
          "        mbedtls_snprintf(name, sizeof(name), \"%s%s\", text, items[i].name);",
          "        if (items[i].type == MBEDTLS_PK_DEBUG_MPI) {",
          "            mbedtls_debug_print_mpi(ssl, level, file, line, name, items[i].value);",
          "        if (items[i].type == MBEDTLS_PK_DEBUG_ECP) {",
          "            mbedtls_debug_print_ecp(ssl, level, file, line, name, items[i].value);"
        ]
      },
      "Suggestion": "Convert the Array-of-Structs (AoS) 'items' into separate plain arrays",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR016"
    },
    {
      "Check": "PWR016",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/library/ssl_ciphersuites.c:1824:9",
      "Title": "Use separate arrays instead of an Array-of-Structs",
      "RelatedCodeList": {
        "Subtitle": "Uses",
        "Code": [
          "             *p != 0 && q < supported_ciphersuites + MAX_CIPHERSUITES - 1;"
        ]
      },
      "Suggestion": "Convert the Array-of-Structs (AoS) 'ciphersuite_definitions' into separate plain arrays",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR016"
    },
    {
      "Check": "PWR016",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/library/ssl_tls.c:5729:5",
      "Title": "Use separate arrays instead of an Array-of-Structs",
      "RelatedCodeList": {
        "Subtitle": "Uses",
        "Code": [
          "    for (int i = 0; tls_id_match_table[i].tls_id != 0; i++) {",
          "        if (tls_id_match_table[i].tls_id == tls_id) {",
          "                *type = PSA_KEY_TYPE_ECC_KEY_PAIR(tls_id_match_table[i].psa_family);",
          "                *bits = tls_id_match_table[i].bits;"
        ]
      },
      "Suggestion": "Convert the Array-of-Structs (AoS) 'tls_id_match_table' into separate plain arrays",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR016"
    },
    {
      "Check": "PWR016",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/library/ssl_tls.c:5746:5",
      "Title": "Use separate arrays instead of an Array-of-Structs",
      "RelatedCodeList": {
        "Subtitle": "Uses",
        "Code": [
          "    for (int i = 0; tls_id_match_table[i].tls_id != 0; i++) {",
          "        if (tls_id_match_table[i].tls_id == tls_id) {",
          "            return tls_id_match_table[i].ecp_group_id;"
        ]
      },
      "Suggestion": "Convert the Array-of-Structs (AoS) 'tls_id_match_table' into separate plain arrays",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR016"
    },
    {
      "Check": "PWR016",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/library/ssl_tls.c:5757:5",
      "Title": "Use separate arrays instead of an Array-of-Structs",
      "RelatedCodeList": {
        "Subtitle": "Uses",
        "Code": [
          "    for (int i = 0; tls_id_match_table[i].ecp_group_id != MBEDTLS_ECP_DP_NONE;",
          "        if (tls_id_match_table[i].ecp_group_id == grp_id) {",
          "            return tls_id_match_table[i].tls_id;"
        ]
      },
      "Suggestion": "Convert the Array-of-Structs (AoS) 'tls_id_match_table' into separate plain arrays",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR016"
    },
    {
      "Check": "PWR016",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/library/ssl_tls.c:5791:5",
      "Title": "Use separate arrays instead of an Array-of-Structs",
      "RelatedCodeList": {
        "Subtitle": "Uses",
        "Code": [
          "    for (int i = 0; tls_id_curve_name_table[i].tls_id != 0; i++) {",
          "        if (tls_id_curve_name_table[i].tls_id == tls_id) {",
          "            return tls_id_curve_name_table[i].name;"
        ]
      },
      "Suggestion": "Convert the Array-of-Structs (AoS) 'tls_id_curve_name_table' into separate plain arrays",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR016"
    },
    {
      "Check": "PWR016",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/programs/ssl/ssl_test_lib.c:553:5",
      "Title": "Use separate arrays instead of an Array-of-Structs",
      "RelatedCodeList": {
        "Subtitle": "Uses",
        "Code": [
          "    for (int i = 0; tls_id_group_name_table[i].tls_id != 0; i++) {",
          "        if (strcmp(tls_id_group_name_table[i].name, name) == 0) {",
          "            return tls_id_group_name_table[i].tls_id;"
        ]
      },
      "Suggestion": "Convert the Array-of-Structs (AoS) 'tls_id_group_name_table' into separate plain arrays",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR016"
    },
    {
      "Check": "PWR016",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/programs/ssl/ssl_test_lib.c:564:5",
      "Title": "Use separate arrays instead of an Array-of-Structs",
      "RelatedCodeList": {
        "Subtitle": "Uses",
        "Code": [
          "    for (int i = 0; tls_id_group_name_table[i].tls_id != 0; i++) {",
          "        if (tls_id_group_name_table[i].is_supported == 1) {",
          "            mbedtls_printf(\"%s \", tls_id_group_name_table[i].name);"
        ]
      },
      "Suggestion": "Convert the Array-of-Structs (AoS) 'tls_id_group_name_table' into separate plain arrays",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR016"
    },
    {
      "Check": "PWR016",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/programs/test/metatest.c:330:9",
      "Title": "Use separate arrays instead of an Array-of-Structs",
      "RelatedCodeList": {
        "Subtitle": "Uses",
        "Code": [
          "        for (const metatest_t *p = metatests; p->name != NULL; p++) {"
        ]
      },
      "Suggestion": "Convert the Array-of-Structs (AoS) 'metatests' into separate plain arrays",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR016"
    },
    {
      "Check": "PWR016",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/programs/test/metatest.c:340:5",
      "Title": "Use separate arrays instead of an Array-of-Structs",
      "RelatedCodeList": {
        "Subtitle": "Uses",
        "Code": [
          "    for (const metatest_t *p = metatests; p->name != NULL; p++) {"
        ]
      },
      "Suggestion": "Convert the Array-of-Structs (AoS) 'metatests' into separate plain arrays",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR016"
    },
    {
      "Check": "PWR016",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/programs/test/selftest.c:527:9",
      "Title": "Use separate arrays instead of an Array-of-Structs",
      "RelatedCodeList": {
        "Subtitle": "Uses",
        "Code": [
          "            for (test = selftests; test->name != NULL; test++) {"
        ]
      },
      "Suggestion": "Convert the Array-of-Structs (AoS) 'selftests' into separate plain arrays",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR016"
    },
    {
      "Check": "PWR016",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/programs/test/selftest.c:528:13",
      "Title": "Use separate arrays instead of an Array-of-Structs",
      "RelatedCodeList": {
        "Subtitle": "Uses",
        "Code": [
          "            for (test = selftests; test->name != NULL; test++) {"
        ]
      },
      "Suggestion": "Convert the Array-of-Structs (AoS) 'selftests' into separate plain arrays",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR016"
    },
    {
      "Check": "PWR016",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/programs/test/selftest.c:544:9",
      "Title": "Use separate arrays instead of an Array-of-Structs",
      "RelatedCodeList": {
        "Subtitle": "Uses",
        "Code": [
          "        for (test = selftests; test->name != NULL; test++) {"
        ]
      },
      "Suggestion": "Convert the Array-of-Structs (AoS) 'selftests' into separate plain arrays",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR016"
    },
    {
      "Check": "PWR016",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/programs/test/udp_proxy.c:639:5",
      "Title": "Use separate arrays instead of an Array-of-Structs",
      "RelatedCodeList": {
        "Subtitle": "Uses",
        "Code": [
          "        ret = send_packet(&prev[offset], \"delayed\");"
        ]
      },
      "Suggestion": "Convert the Array-of-Structs (AoS) 'prev' into separate plain arrays",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR016"
    },
    {
      "Check": "PWR016",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/programs/test/udp_proxy.c:878:5",
      "Title": "Use separate arrays instead of an Array-of-Structs",
      "RelatedCodeList": {
        "Subtitle": "Uses",
        "Code": [
          "            max_wait_server = ctx_buffer_time_remaining(&outbuf[0]);",
          "            max_wait_client = ctx_buffer_time_remaining(&outbuf[1]);",
          "                ctx_buffer_flush(&outbuf[0]);",
          "                ctx_buffer_flush(&outbuf[1]);"
        ]
      },
      "Suggestion": "Convert the Array-of-Structs (AoS) 'outbuf' into separate plain arrays",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR016"
    },
    {
      "Check": "PWR016",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/programs/test/benchmark.c:545:9",
      "Title": "Use separate arrays instead of an Array-of-Structs",
      "RelatedCodeList": {
        "Subtitle": "Uses",
        "Code": [
          "            else if (set_ecp_curve(argv[i], single_curve)) {",
          "                curve_list = single_curve;"
        ]
      },
      "Suggestion": "Convert the Array-of-Structs (AoS) 'single_curve' into separate plain arrays",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR016"
    },
    {
      "Check": "PWR016",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/build/tests/test_suite_asn1parse.c:925:5",
      "Title": "Use separate arrays instead of an Array-of-Structs",
      "RelatedCodeList": {
        "Subtitle": "Uses",
        "Code": [
          "    for (i = 0; i < ARRAY_LENGTH(nd); i++) {",
          "        pointers[i] = &nd[i];"
        ]
      },
      "Suggestion": "Convert the Array-of-Structs (AoS) 'nd' into separate plain arrays",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR016"
    },
    {
      "Check": "PWR016",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/build/tests/test_suite_asn1parse.c:925:5",
      "Title": "Use separate arrays instead of an Array-of-Structs",
      "RelatedCodeList": {
        "Subtitle": "Uses",
        "Code": [
          "        pointers[i] = &nd[i];"
        ]
      },
      "Suggestion": "Convert the Array-of-Structs (AoS) 'pointers' into separate plain arrays",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR016"
    },
    {
      "Check": "PWR016",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/build/tests/test_suite_asn1parse.c:929:5",
      "Title": "Use separate arrays instead of an Array-of-Structs",
      "RelatedCodeList": {
        "Subtitle": "Uses",
        "Code": [
          "    for (i = 0; i < ARRAY_LENGTH(nd); i++) {",
          "        nd[i].next = pointers[i+1];"
        ]
      },
      "Suggestion": "Convert the Array-of-Structs (AoS) 'nd' into separate plain arrays",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR016"
    },
    {
      "Check": "PWR016",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/build/tests/test_suite_asn1parse.c:929:5",
      "Title": "Use separate arrays instead of an Array-of-Structs",
      "RelatedCodeList": {
        "Subtitle": "Uses",
        "Code": [
          "        nd[i].next = pointers[i+1];"
        ]
      },
      "Suggestion": "Convert the Array-of-Structs (AoS) 'pointers' into separate plain arrays",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR016"
    },
    {
      "Check": "PWR016",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/build/tests/test_suite_asn1parse.c:936:5",
      "Title": "Use separate arrays instead of an Array-of-Structs",
      "RelatedCodeList": {
        "Subtitle": "Uses",
        "Code": [
          "    TEST_ASSERT(found == pointers[position]);"
        ]
      },
      "Suggestion": "Convert the Array-of-Structs (AoS) 'pointers' into separate plain arrays",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR016"
    },
    {
      "Check": "PWR016",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/build/tests/test_suite_asn1write.c:685:5",
      "Title": "Use separate arrays instead of an Array-of-Structs",
      "RelatedCodeList": {
        "Subtitle": "Uses",
        "Code": [
          "    for (i = 0; i < ARRAY_LENGTH(nd); i++) {",
          "        pointers[i] = &nd[i];"
        ]
      },
      "Suggestion": "Convert the Array-of-Structs (AoS) 'nd' into separate plain arrays",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR016"
    },
    {
      "Check": "PWR016",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/build/tests/test_suite_asn1write.c:685:5",
      "Title": "Use separate arrays instead of an Array-of-Structs",
      "RelatedCodeList": {
        "Subtitle": "Uses",
        "Code": [
          "        pointers[i] = &nd[i];"
        ]
      },
      "Suggestion": "Convert the Array-of-Structs (AoS) 'pointers' into separate plain arrays",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR016"
    },
    {
      "Check": "PWR016",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/build/tests/test_suite_asn1write.c:689:5",
      "Title": "Use separate arrays instead of an Array-of-Structs",
      "RelatedCodeList": {
        "Subtitle": "Uses",
        "Code": [
          "    for (i = 0; i < ARRAY_LENGTH(nd); i++) {",
          "        TEST_CALLOC(nd[i].oid.p, oid[i]->len);",
          "        memcpy(nd[i].oid.p, oid[i]->x, oid[i]->len);",
          "        nd[i].oid.len = oid[i]->len;",
          "        nd[i].next = pointers[i+1];"
        ]
      },
      "Suggestion": "Convert the Array-of-Structs (AoS) 'nd' into separate plain arrays",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR016"
    },
    {
      "Check": "PWR016",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/build/tests/test_suite_asn1write.c:689:5",
      "Title": "Use separate arrays instead of an Array-of-Structs",
      "RelatedCodeList": {
        "Subtitle": "Uses",
        "Code": [
          "        TEST_CALLOC(nd[i].oid.p, oid[i]->len);",
          "        memcpy(nd[i].oid.p, oid[i]->x, oid[i]->len);",
          "        nd[i].oid.len = oid[i]->len;"
        ]
      },
      "Suggestion": "Convert the Array-of-Structs (AoS) 'oid' into separate plain arrays",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR016"
    },
    {
      "Check": "PWR016",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/build/tests/test_suite_asn1write.c:689:5",
      "Title": "Use separate arrays instead of an Array-of-Structs",
      "RelatedCodeList": {
        "Subtitle": "Uses",
        "Code": [
          "        nd[i].next = pointers[i+1];"
        ]
      },
      "Suggestion": "Convert the Array-of-Structs (AoS) 'pointers' into separate plain arrays",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR016"
    },
    {
      "Check": "PWR016",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/build/tests/test_suite_asn1write.c:690:9",
      "Title": "Use separate arrays instead of an Array-of-Structs",
      "RelatedCodeList": {
        "Subtitle": "Uses",
        "Code": [
          "        TEST_CALLOC(nd[i].oid.p, oid[i]->len);"
        ]
      },
      "Suggestion": "Convert the Array-of-Structs (AoS) 'nd' into separate plain arrays",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR016"
    },
    {
      "Check": "PWR016",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/build/tests/test_suite_asn1write.c:690:9",
      "Title": "Use separate arrays instead of an Array-of-Structs",
      "RelatedCodeList": {
        "Subtitle": "Uses",
        "Code": [
          "        TEST_CALLOC(nd[i].oid.p, oid[i]->len);"
        ]
      },
      "Suggestion": "Convert the Array-of-Structs (AoS) 'oid' into separate plain arrays",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR016"
    },
    {
      "Check": "PWR016",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/build/tests/test_suite_asn1write.c:690:9",
      "Title": "Use separate arrays instead of an Array-of-Structs",
      "RelatedCodeList": {
        "Subtitle": "Uses",
        "Code": [
          "        TEST_CALLOC(nd[i].oid.p, oid[i]->len);"
        ]
      },
      "Suggestion": "Convert the Array-of-Structs (AoS) 'nd' into separate plain arrays",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR016"
    },
    {
      "Check": "PWR016",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/build/tests/test_suite_asn1write.c:690:9",
      "Title": "Use separate arrays instead of an Array-of-Structs",
      "RelatedCodeList": {
        "Subtitle": "Uses",
        "Code": [
          "        TEST_CALLOC(nd[i].oid.p, oid[i]->len);"
        ]
      },
      "Suggestion": "Convert the Array-of-Structs (AoS) 'nd' into separate plain arrays",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR016"
    },
    {
      "Check": "PWR016",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/build/tests/test_suite_asn1write.c:703:5",
      "Title": "Use separate arrays instead of an Array-of-Structs",
      "RelatedCodeList": {
        "Subtitle": "Uses",
        "Code": [
          "    for (i = 0; i < ARRAY_LENGTH(nd); i++) {",
          "        TEST_ASSERT(nd[i].next == pointers[i+1]);"
        ]
      },
      "Suggestion": "Convert the Array-of-Structs (AoS) 'nd' into separate plain arrays",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR016"
    },
    {
      "Check": "PWR016",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/build/tests/test_suite_asn1write.c:703:5",
      "Title": "Use separate arrays instead of an Array-of-Structs",
      "RelatedCodeList": {
        "Subtitle": "Uses",
        "Code": [
          "        TEST_ASSERT(nd[i].next == pointers[i+1]);"
        ]
      },
      "Suggestion": "Convert the Array-of-Structs (AoS) 'pointers' into separate plain arrays",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR016"
    },
    {
      "Check": "PWR016",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/build/tests/test_suite_asn1write.c:704:9",
      "Title": "Use separate arrays instead of an Array-of-Structs",
      "RelatedCodeList": {
        "Subtitle": "Uses",
        "Code": [
          "        TEST_ASSERT(nd[i].next == pointers[i+1]);"
        ]
      },
      "Suggestion": "Convert the Array-of-Structs (AoS) 'nd' into separate plain arrays",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR016"
    },
    {
      "Check": "PWR016",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/build/tests/test_suite_asn1write.c:704:9",
      "Title": "Use separate arrays instead of an Array-of-Structs",
      "RelatedCodeList": {
        "Subtitle": "Uses",
        "Code": [
          "        TEST_ASSERT(nd[i].next == pointers[i+1]);"
        ]
      },
      "Suggestion": "Convert the Array-of-Structs (AoS) 'pointers' into separate plain arrays",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR016"
    },
    {
      "Check": "PWR016",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/build/tests/test_suite_asn1write.c:709:9",
      "Title": "Use separate arrays instead of an Array-of-Structs",
      "RelatedCodeList": {
        "Subtitle": "Uses",
        "Code": [
          "        TEST_ASSERT(head == pointers[from]);"
        ]
      },
      "Suggestion": "Convert the Array-of-Structs (AoS) 'pointers' into separate plain arrays",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR016"
    },
    {
      "Check": "PWR016",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/build/tests/test_suite_asn1write.c:710:9",
      "Title": "Use separate arrays instead of an Array-of-Structs",
      "RelatedCodeList": {
        "Subtitle": "Uses",
        "Code": [
          "        TEST_ASSERT(found == pointers[position]);"
        ]
      },
      "Suggestion": "Convert the Array-of-Structs (AoS) 'pointers' into separate plain arrays",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR016"
    },
    {
      "Check": "PWR016",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/build/tests/test_suite_asn1write.c:714:9",
      "Title": "Use separate arrays instead of an Array-of-Structs",
      "RelatedCodeList": {
        "Subtitle": "Uses",
        "Code": [
          "        TEST_ASSERT(head->next == pointers[from]);"
        ]
      },
      "Suggestion": "Convert the Array-of-Structs (AoS) 'pointers' into separate plain arrays",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR016"
    },
    {
      "Check": "PWR016",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/build/tests/test_suite_asn1write.c:715:9",
      "Title": "Use separate arrays instead of an Array-of-Structs",
      "RelatedCodeList": {
        "Subtitle": "Uses",
        "Code": [
          "        for (i = 0; i < ARRAY_LENGTH(nd); i++) {",
          "            TEST_ASSERT(found != &nd[i]);"
        ]
      },
      "Suggestion": "Convert the Array-of-Structs (AoS) 'nd' into separate plain arrays",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR016"
    },
    {
      "Check": "PWR016",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/build/tests/test_suite_asn1write.c:716:13",
      "Title": "Use separate arrays instead of an Array-of-Structs",
      "RelatedCodeList": {
        "Subtitle": "Uses",
        "Code": [
          "            TEST_ASSERT(found != &nd[i]);"
        ]
      },
      "Suggestion": "Convert the Array-of-Structs (AoS) 'nd' into separate plain arrays",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR016"
    },
    {
      "Check": "PWR016",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/build/tests/test_suite_asn1write.c:725:5",
      "Title": "Use separate arrays instead of an Array-of-Structs",
      "RelatedCodeList": {
        "Subtitle": "Uses",
        "Code": [
          "    for (i = 0; i < ARRAY_LENGTH(nd); i++) {",
          "        mbedtls_free(nd[i].oid.p);"
        ]
      },
      "Suggestion": "Convert the Array-of-Structs (AoS) 'nd' into separate plain arrays",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR016"
    },
    {
      "Check": "PWR016",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/build/tests/test_suite_pk.c:1765:5",
      "Title": "Use separate arrays instead of an Array-of-Structs",
      "RelatedCodeList": {
        "Subtitle": "Uses",
        "Code": [
          "    TEST_ASSERT(mbedtls_pk_debug(&alt, dbg_items) == ret);"
        ]
      },
      "Suggestion": "Convert the Array-of-Structs (AoS) 'dbg_items' into separate plain arrays",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR016"
    },
    {
      "Check": "PWR016",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/build/tests/test_suite_psa_crypto.c:9295:5",
      "Title": "Use separate arrays instead of an Array-of-Structs",
      "RelatedCodeList": {
        "Subtitle": "Uses",
        "Code": [
          "                                      inputs[i]->x, inputs[i]->len,",
          "                               mbedtls_test_parse_binary_string(inputs[i])),",
          "                               inputs[i]->x, inputs[i]->len),"
        ]
      },
      "Suggestion": "Convert the Array-of-Structs (AoS) 'inputs' into separate plain arrays",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR016"
    },
    {
      "Check": "PWR016",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/build/tests/test_suite_psa_crypto.c:9302:13",
      "Title": "Use separate arrays instead of an Array-of-Structs",
      "RelatedCodeList": {
        "Subtitle": "Uses",
        "Code": [
          "                                      inputs[i]->x, inputs[i]->len,"
        ]
      },
      "Suggestion": "Convert the Array-of-Structs (AoS) 'inputs' into separate plain arrays",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR016"
    },
    {
      "Check": "PWR016",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/build/tests/test_suite_psa_crypto.c:9319:17",
      "Title": "Use separate arrays instead of an Array-of-Structs",
      "RelatedCodeList": {
        "Subtitle": "Uses",
        "Code": [
          "                               mbedtls_test_parse_binary_string(inputs[i])),"
        ]
      },
      "Suggestion": "Convert the Array-of-Structs (AoS) 'inputs' into separate plain arrays",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR016"
    },
    {
      "Check": "PWR016",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/build/tests/test_suite_psa_crypto.c:9324:17",
      "Title": "Use separate arrays instead of an Array-of-Structs",
      "RelatedCodeList": {
        "Subtitle": "Uses",
        "Code": [
          "                               inputs[i]->x, inputs[i]->len),"
        ]
      },
      "Suggestion": "Convert the Array-of-Structs (AoS) 'inputs' into separate plain arrays",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR016"
    },
    {
      "Check": "PWR016",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/build/tests/test_suite_psa_crypto.c:9534:5",
      "Title": "Use separate arrays instead of an Array-of-Structs",
      "RelatedCodeList": {
        "Subtitle": "Uses",
        "Code": [
          "                               mbedtls_test_parse_binary_string(inputs[i])),",
          "                                       inputs[i]->x, inputs[i]->len),",
          "                                                  inputs[i]->x, inputs[i]->len,",
          "                                                                  inputs[i]->x,",
          "                                                                  inputs[i]->len),",
          "                                                  inputs[i]->x, inputs[i]->len,",
          "                                                  inputs[i]->x, inputs[i]->len,",
          "                               inputs[i]->x, inputs[i]->len), statuses[i]);"
        ]
      },
      "Suggestion": "Convert the Array-of-Structs (AoS) 'inputs' into separate plain arrays",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR016"
    },
    {
      "Check": "PWR016",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/build/tests/test_suite_psa_crypto.c:9539:17",
      "Title": "Use separate arrays instead of an Array-of-Structs",
      "RelatedCodeList": {
        "Subtitle": "Uses",
        "Code": [
          "                               mbedtls_test_parse_binary_string(inputs[i])),"
        ]
      },
      "Suggestion": "Convert the Array-of-Structs (AoS) 'inputs' into separate plain arrays",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR016"
    },
    {
      "Check": "PWR016",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/build/tests/test_suite_psa_crypto.c:9551:25",
      "Title": "Use separate arrays instead of an Array-of-Structs",
      "RelatedCodeList": {
        "Subtitle": "Uses",
        "Code": [
          "                                       inputs[i]->x, inputs[i]->len),"
        ]
      },
      "Suggestion": "Convert the Array-of-Structs (AoS) 'inputs' into separate plain arrays",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR016"
    },
    {
      "Check": "PWR016",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/build/tests/test_suite_psa_crypto.c:9565:25",
      "Title": "Use separate arrays instead of an Array-of-Structs",
      "RelatedCodeList": {
        "Subtitle": "Uses",
        "Code": [
          "                                                  inputs[i]->x, inputs[i]->len,"
        ]
      },
      "Suggestion": "Convert the Array-of-Structs (AoS) 'inputs' into separate plain arrays",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR016"
    },
    {
      "Check": "PWR016",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/build/tests/test_suite_psa_crypto.c:9592:25",
      "Title": "Use separate arrays instead of an Array-of-Structs",
      "RelatedCodeList": {
        "Subtitle": "Uses",
        "Code": [
          "                                                                  inputs[i]->x,",
          "                                                                  inputs[i]->len),"
        ]
      },
      "Suggestion": "Convert the Array-of-Structs (AoS) 'inputs' into separate plain arrays",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR016"
    },
    {
      "Check": "PWR016",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/build/tests/test_suite_psa_crypto.c:9609:25",
      "Title": "Use separate arrays instead of an Array-of-Structs",
      "RelatedCodeList": {
        "Subtitle": "Uses",
        "Code": [
          "                                                  inputs[i]->x, inputs[i]->len,"
        ]
      },
      "Suggestion": "Convert the Array-of-Structs (AoS) 'inputs' into separate plain arrays",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR016"
    },
    {
      "Check": "PWR016",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/build/tests/test_suite_psa_crypto.c:9624:25",
      "Title": "Use separate arrays instead of an Array-of-Structs",
      "RelatedCodeList": {
        "Subtitle": "Uses",
        "Code": [
          "                                                  inputs[i]->x, inputs[i]->len,"
        ]
      },
      "Suggestion": "Convert the Array-of-Structs (AoS) 'inputs' into separate plain arrays",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR016"
    },
    {
      "Check": "PWR016",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/build/tests/test_suite_psa_crypto.c:9644:17",
      "Title": "Use separate arrays instead of an Array-of-Structs",
      "RelatedCodeList": {
        "Subtitle": "Uses",
        "Code": [
          "                               inputs[i]->x, inputs[i]->len), statuses[i]);"
        ]
      },
      "Suggestion": "Convert the Array-of-Structs (AoS) 'inputs' into separate plain arrays",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR016"
    },
    {
      "Check": "PWR016",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/build/tests/test_suite_psa_crypto.pbkdf2.c:9295:5",
      "Title": "Use separate arrays instead of an Array-of-Structs",
      "RelatedCodeList": {
        "Subtitle": "Uses",
        "Code": [
          "                                      inputs[i]->x, inputs[i]->len,",
          "                               mbedtls_test_parse_binary_string(inputs[i])),",
          "                               inputs[i]->x, inputs[i]->len),"
        ]
      },
      "Suggestion": "Convert the Array-of-Structs (AoS) 'inputs' into separate plain arrays",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR016"
    },
    {
      "Check": "PWR016",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/build/tests/test_suite_psa_crypto.pbkdf2.c:9302:13",
      "Title": "Use separate arrays instead of an Array-of-Structs",
      "RelatedCodeList": {
        "Subtitle": "Uses",
        "Code": [
          "                                      inputs[i]->x, inputs[i]->len,"
        ]
      },
      "Suggestion": "Convert the Array-of-Structs (AoS) 'inputs' into separate plain arrays",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR016"
    },
    {
      "Check": "PWR016",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/build/tests/test_suite_psa_crypto.pbkdf2.c:9319:17",
      "Title": "Use separate arrays instead of an Array-of-Structs",
      "RelatedCodeList": {
        "Subtitle": "Uses",
        "Code": [
          "                               mbedtls_test_parse_binary_string(inputs[i])),"
        ]
      },
      "Suggestion": "Convert the Array-of-Structs (AoS) 'inputs' into separate plain arrays",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR016"
    },
    {
      "Check": "PWR016",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/build/tests/test_suite_psa_crypto.pbkdf2.c:9324:17",
      "Title": "Use separate arrays instead of an Array-of-Structs",
      "RelatedCodeList": {
        "Subtitle": "Uses",
        "Code": [
          "                               inputs[i]->x, inputs[i]->len),"
        ]
      },
      "Suggestion": "Convert the Array-of-Structs (AoS) 'inputs' into separate plain arrays",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR016"
    },
    {
      "Check": "PWR016",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/build/tests/test_suite_psa_crypto.pbkdf2.c:9534:5",
      "Title": "Use separate arrays instead of an Array-of-Structs",
      "RelatedCodeList": {
        "Subtitle": "Uses",
        "Code": [
          "                               mbedtls_test_parse_binary_string(inputs[i])),",
          "                                       inputs[i]->x, inputs[i]->len),",
          "                                                  inputs[i]->x, inputs[i]->len,",
          "                                                                  inputs[i]->x,",
          "                                                                  inputs[i]->len),",
          "                                                  inputs[i]->x, inputs[i]->len,",
          "                                                  inputs[i]->x, inputs[i]->len,",
          "                               inputs[i]->x, inputs[i]->len), statuses[i]);"
        ]
      },
      "Suggestion": "Convert the Array-of-Structs (AoS) 'inputs' into separate plain arrays",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR016"
    },
    {
      "Check": "PWR016",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/build/tests/test_suite_psa_crypto.pbkdf2.c:9539:17",
      "Title": "Use separate arrays instead of an Array-of-Structs",
      "RelatedCodeList": {
        "Subtitle": "Uses",
        "Code": [
          "                               mbedtls_test_parse_binary_string(inputs[i])),"
        ]
      },
      "Suggestion": "Convert the Array-of-Structs (AoS) 'inputs' into separate plain arrays",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR016"
    },
    {
      "Check": "PWR016",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/build/tests/test_suite_psa_crypto.pbkdf2.c:9551:25",
      "Title": "Use separate arrays instead of an Array-of-Structs",
      "RelatedCodeList": {
        "Subtitle": "Uses",
        "Code": [
          "                                       inputs[i]->x, inputs[i]->len),"
        ]
      },
      "Suggestion": "Convert the Array-of-Structs (AoS) 'inputs' into separate plain arrays",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR016"
    },
    {
      "Check": "PWR016",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/build/tests/test_suite_psa_crypto.pbkdf2.c:9565:25",
      "Title": "Use separate arrays instead of an Array-of-Structs",
      "RelatedCodeList": {
        "Subtitle": "Uses",
        "Code": [
          "                                                  inputs[i]->x, inputs[i]->len,"
        ]
      },
      "Suggestion": "Convert the Array-of-Structs (AoS) 'inputs' into separate plain arrays",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR016"
    },
    {
      "Check": "PWR016",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/build/tests/test_suite_psa_crypto.pbkdf2.c:9592:25",
      "Title": "Use separate arrays instead of an Array-of-Structs",
      "RelatedCodeList": {
        "Subtitle": "Uses",
        "Code": [
          "                                                                  inputs[i]->x,",
          "                                                                  inputs[i]->len),"
        ]
      },
      "Suggestion": "Convert the Array-of-Structs (AoS) 'inputs' into separate plain arrays",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR016"
    },
    {
      "Check": "PWR016",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/build/tests/test_suite_psa_crypto.pbkdf2.c:9609:25",
      "Title": "Use separate arrays instead of an Array-of-Structs",
      "RelatedCodeList": {
        "Subtitle": "Uses",
        "Code": [
          "                                                  inputs[i]->x, inputs[i]->len,"
        ]
      },
      "Suggestion": "Convert the Array-of-Structs (AoS) 'inputs' into separate plain arrays",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR016"
    },
    {
      "Check": "PWR016",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/build/tests/test_suite_psa_crypto.pbkdf2.c:9624:25",
      "Title": "Use separate arrays instead of an Array-of-Structs",
      "RelatedCodeList": {
        "Subtitle": "Uses",
        "Code": [
          "                                                  inputs[i]->x, inputs[i]->len,"
        ]
      },
      "Suggestion": "Convert the Array-of-Structs (AoS) 'inputs' into separate plain arrays",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR016"
    },
    {
      "Check": "PWR016",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/build/tests/test_suite_psa_crypto.pbkdf2.c:9644:17",
      "Title": "Use separate arrays instead of an Array-of-Structs",
      "RelatedCodeList": {
        "Subtitle": "Uses",
        "Code": [
          "                               inputs[i]->x, inputs[i]->len), statuses[i]);"
        ]
      },
      "Suggestion": "Convert the Array-of-Structs (AoS) 'inputs' into separate plain arrays",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR016"
    },
    {
      "Check": "PWR016",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/build/tests/test_suite_x509write.c:706:17",
      "Title": "Use separate arrays instead of an Array-of-Structs",
      "RelatedCodeList": {
        "Subtitle": "Uses",
        "Code": [
          "                SET_OID(exts[0].buf, MBEDTLS_OID_SERVER_AUTH);"
        ]
      },
      "Suggestion": "Convert the Array-of-Structs (AoS) 'exts' into separate plain arrays",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR016"
    },
    {
      "Check": "PWR016",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/build/tests/test_suite_x509write.c:708:17",
      "Title": "Use separate arrays instead of an Array-of-Structs",
      "RelatedCodeList": {
        "Subtitle": "Uses",
        "Code": [
          "                SET_OID(exts[0].buf, MBEDTLS_OID_CODE_SIGNING);"
        ]
      },
      "Suggestion": "Convert the Array-of-Structs (AoS) 'exts' into separate plain arrays",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR016"
    },
    {
      "Check": "PWR016",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/build/tests/test_suite_x509write.c:710:17",
      "Title": "Use separate arrays instead of an Array-of-Structs",
      "RelatedCodeList": {
        "Subtitle": "Uses",
        "Code": [
          "                SET_OID(exts[1].buf, MBEDTLS_OID_TIME_STAMPING);"
        ]
      },
      "Suggestion": "Convert the Array-of-Structs (AoS) 'exts' into separate plain arrays",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR016"
    },
    {
      "Check": "PWR016",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/build/tests/test_suite_x509write.c:712:13",
      "Title": "Use separate arrays instead of an Array-of-Structs",
      "RelatedCodeList": {
        "Subtitle": "Uses",
        "Code": [
          "            TEST_ASSERT(mbedtls_x509write_crt_set_ext_key_usage(&crt, exts) == 0);"
        ]
      },
      "Suggestion": "Convert the Array-of-Structs (AoS) 'exts' into separate plain arrays",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR016"
    },
    {
      "Check": "PWR028",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/tests/src/helpers.c:573:9",
      "Title": "Remove pointer increment preventing performance optimization",
      "RelatedCodeList": null,
      "Suggestion": "Remove the increment instruction of the pointer 'ibuf' from the loop body and update the dereferences accordingly",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR028"
    },
    {
      "Check": "PWR028",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/library/aes.c:737:39",
      "Title": "Remove pointer increment preventing performance optimization",
      "RelatedCodeList": null,
      "Suggestion": "Remove the increment instruction of the pointer 'SK' from the loop body and update the dereferences accordingly",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR028"
    },
    {
      "Check": "PWR028",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/library/aes.c:738:16",
      "Title": "Remove pointer increment preventing performance optimization",
      "RelatedCodeList": null,
      "Suggestion": "Remove the increment instruction of the pointer 'RK' from the loop body and update the dereferences accordingly",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR028"
    },
    {
      "Check": "PWR028",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/library/cipher.c:74:18",
      "Title": "Remove pointer increment preventing performance optimization",
      "RelatedCodeList": null,
      "Suggestion": "Remove the increment instruction of the pointer 'type' from the loop body and update the dereferences accordingly",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR028"
    },
    {
      "Check": "PWR028",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/library/ecp_curves.c:4836:66",
      "Title": "Remove pointer increment preventing performance optimization",
      "RelatedCodeList": null,
      "Suggestion": "Remove the increment instruction of the pointer 'src' from the loop body and update the dereferences accordingly",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR028"
    },
    {
      "Check": "PWR028",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/library/md.c:902:9",
      "Title": "Remove pointer increment preventing performance optimization",
      "RelatedCodeList": null,
      "Suggestion": "Remove the increment instruction of the pointer 'entry' from the loop body and update the dereferences accordingly",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR028"
    },
    {
      "Check": "PWR028",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/library/rsa.c:1666:15",
      "Title": "Remove pointer increment preventing performance optimization",
      "RelatedCodeList": null,
      "Suggestion": "Remove the increment instruction of the pointer 'p' from the loop body and update the dereferences accordingly",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR028"
    },
    {
      "Check": "PWR028",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/programs/ssl/ssl_client2.c:1523:18",
      "Title": "Remove pointer increment preventing performance optimization",
      "RelatedCodeList": null,
      "Suggestion": "Remove the increment instruction of the pointer 'p' from the loop body and update the dereferences accordingly",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR028"
    },
    {
      "Check": "PWR028",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/programs/ssl/ssl_client2.c:1590:18",
      "Title": "Remove pointer increment preventing performance optimization",
      "RelatedCodeList": null,
      "Suggestion": "Remove the increment instruction of the pointer 'p' from the loop body and update the dereferences accordingly",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR028"
    },
    {
      "Check": "PWR028",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/programs/ssl/ssl_test_lib.c:587:18",
      "Title": "Remove pointer increment preventing performance optimization",
      "RelatedCodeList": null,
      "Suggestion": "Remove the increment instruction of the pointer 'p' from the loop body and update the dereferences accordingly",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR028"
    },
    {
      "Check": "PWR028",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/programs/ssl/ssl_server2.c:2467:18",
      "Title": "Remove pointer increment preventing performance optimization",
      "RelatedCodeList": null,
      "Suggestion": "Remove the increment instruction of the pointer 'p' from the loop body and update the dereferences accordingly",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR028"
    },
    {
      "Check": "PWR028",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/programs/ssl/ssl_server2.c:2534:18",
      "Title": "Remove pointer increment preventing performance optimization",
      "RelatedCodeList": null,
      "Suggestion": "Remove the increment instruction of the pointer 'p' from the loop body and update the dereferences accordingly",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR028"
    },
    {
      "Check": "PWR035",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/library/aria.c:420:5",
      "Title": "Avoid non-consecutive array access to improve performance",
      "RelatedCodeList": {
        "Subtitle": "Non-consecutive array access",
        "Code": [
          "            ctx->rk[i][k] = ctx->rk[j][k];",
          "            ctx->rk[j][k] = t;"
        ]
      },
      "Suggestion": "Consider using techniques like loop fusion, loop interchange, loop tiling or changing the data layout to avoid non-sequential access to variable 'ctx'",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR035"
    },
    {
      "Check": "PWR035",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/library/entropy.c:310:9",
      "Title": "Avoid non-consecutive array access to improve performance",
      "RelatedCodeList": {
        "Subtitle": "Non-consecutive array access",
        "Code": [
          "            if (ctx->source[i].size < ctx->source[i].threshold) {",
          "            if (ctx->source[i].strong == MBEDTLS_ENTROPY_SOURCE_STRONG) {",
          "                strong_size += ctx->source[i].size;"
        ]
      },
      "Suggestion": "Consider using techniques like loop fusion, loop interchange, loop tiling or changing the data layout to avoid non-sequential access to variable 'ctx'",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR035"
    },
    {
      "Check": "PWR035",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/library/entropy.c:358:5",
      "Title": "Avoid non-consecutive array access to improve performance",
      "RelatedCodeList": {
        "Subtitle": "Non-consecutive array access",
        "Code": [
          "        ctx->source[i].size = 0;"
        ]
      },
      "Suggestion": "Consider using techniques like loop fusion, loop interchange, loop tiling or changing the data layout to avoid non-sequential access to variable 'ctx'",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR035"
    },
    {
      "Check": "PWR036",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/library/aes.c:407:5",
      "Title": "Avoid indirect array access to improve performance",
      "RelatedCodeList": {
        "Subtitle": "Non-consecutive array access",
        "Code": [
          "        x = pow[255 - log[i]];"
        ]
      },
      "Suggestion": "Consider using techniques like loop fusion, loop interchange, loop tiling or changing the data layout to avoid non-sequential access to variable 'pow'",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR036"
    },
    {
      "Check": "PWR036",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/library/aes.c:425:5",
      "Title": "Avoid indirect array access to improve performance",
      "RelatedCodeList": {
        "Subtitle": "Non-consecutive array access",
        "Code": [
          "        RT0[i] = ((uint32_t) MUL(0x0E, x)) ^",
          "                 ((uint32_t) MUL(0x09, x) <<  8) ^",
          "                 ((uint32_t) MUL(0x0D, x) << 16) ^",
          "                 ((uint32_t) MUL(0x0B, x) << 24);"
        ]
      },
      "Suggestion": "Consider using techniques like loop fusion, loop interchange, loop tiling or changing the data layout to avoid non-sequential access to variable 'pow'",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR036"
    },
    {
      "Check": "PWR036",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/library/aes.c:736:5",
      "Title": "Avoid indirect array access to improve performance",
      "RelatedCodeList": {
        "Subtitle": "Non-consecutive array access",
        "Code": [
          "            *RK++ = AES_RT0(FSb[MBEDTLS_BYTE_0(*SK)]) ^",
          "                    AES_RT1(FSb[MBEDTLS_BYTE_1(*SK)]) ^",
          "                    AES_RT2(FSb[MBEDTLS_BYTE_2(*SK)]) ^",
          "                    AES_RT3(FSb[MBEDTLS_BYTE_3(*SK)]);"
        ]
      },
      "Suggestion": "Consider using techniques like loop fusion, loop interchange, loop tiling or changing the data layout to avoid non-sequential access to variables 'RT0', 'FSb', 'RT1', 'RT2' and 'RT3'",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR036"
    },
    {
      "Check": "PWR036",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/library/aes.c:737:9",
      "Title": "Avoid indirect array access to improve performance",
      "RelatedCodeList": {
        "Subtitle": "Non-consecutive array access",
        "Code": [
          "            *RK++ = AES_RT0(FSb[MBEDTLS_BYTE_0(*SK)]) ^",
          "                    AES_RT1(FSb[MBEDTLS_BYTE_1(*SK)]) ^",
          "                    AES_RT2(FSb[MBEDTLS_BYTE_2(*SK)]) ^",
          "                    AES_RT3(FSb[MBEDTLS_BYTE_3(*SK)]);"
        ]
      },
      "Suggestion": "Consider using techniques like loop fusion, loop interchange, loop tiling or changing the data layout to avoid non-sequential access to variables 'RT0', 'FSb', 'RT1', 'RT2' and 'RT3'",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR036"
    },
    {
      "Check": "PWR036",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/library/des.c:316:5",
      "Title": "Avoid indirect array access to improve performance",
      "RelatedCodeList": {
        "Subtitle": "Non-consecutive array access",
        "Code": [
          "        key[i] = odd_parity_table[key[i] / 2];"
        ]
      },
      "Suggestion": "Consider using techniques like loop fusion, loop interchange, loop tiling or changing the data layout to avoid non-sequential access to variable 'odd_parity_table'",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR036"
    },
    {
      "Check": "PWR036",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/library/ssl_msg.c:1271:9",
      "Title": "Avoid indirect array access to improve performance",
      "RelatedCodeList": {
        "Subtitle": "Non-consecutive array access",
        "Code": [
          "            data[rec->data_len + i] = (unsigned char) padlen;"
        ]
      },
      "Suggestion": "Consider using techniques like loop fusion, loop interchange, loop tiling or changing the data layout to avoid non-sequential access to variable 'data'",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR036"
    },
    {
      "Check": "PWR049",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/tests/src/test_helpers/ssl_helpers.c:1812:5",
      "Title": "Move iterator-dependent condition outside of the loop",
      "RelatedCodeList": {
        "Subtitle": "Iterator-dependent condition",
        "Code": [
          "        if (msg_type == 0) {"
        ]
      },
      "Suggestion": "Moving the iterator-dependent condition outside of the loop is a creative process. Depending on the type of condition, it can involve loop peeling, loop fission or loop unrolling",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR049"
    },
    {
      "Check": "PWR049",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/library/gcm.c:243:5",
      "Title": "Move iterator-dependent condition outside of the loop",
      "RelatedCodeList": {
        "Subtitle": "Iterator-dependent condition",
        "Code": [
          "        if (i != 15) {"
        ]
      },
      "Suggestion": "Moving the iterator-dependent condition outside of the loop is a creative process. Depending on the type of condition, it can involve loop peeling, loop fission or loop unrolling",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR049"
    },
    {
      "Check": "PWR049",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/library/sha1.c:421:5",
      "Title": "Move iterator-dependent condition outside of the loop",
      "RelatedCodeList": {
        "Subtitle": "Iterator-dependent condition",
        "Code": [
          "        if (i == 2) {"
        ]
      },
      "Suggestion": "Moving the iterator-dependent condition outside of the loop is a creative process. Depending on the type of condition, it can involve loop peeling, loop fission or loop unrolling",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR049"
    },
    {
      "Check": "PWR049",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/library/sha256.c:900:5",
      "Title": "Move iterator-dependent condition outside of the loop",
      "RelatedCodeList": {
        "Subtitle": "Iterator-dependent condition",
        "Code": [
          "        if (i == 2) {"
        ]
      },
      "Suggestion": "Moving the iterator-dependent condition outside of the loop is a creative process. Depending on the type of condition, it can involve loop peeling, loop fission or loop unrolling",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR049"
    },
    {
      "Check": "PWR049",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/library/sha512.c:1036:5",
      "Title": "Move iterator-dependent condition outside of the loop",
      "RelatedCodeList": {
        "Subtitle": "Iterator-dependent condition",
        "Code": [
          "        if (i == 2) {"
        ]
      },
      "Suggestion": "Moving the iterator-dependent condition outside of the loop is a creative process. Depending on the type of condition, it can involve loop peeling, loop fission or loop unrolling",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR049"
    },
    {
      "Check": "PWR049",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/library/debug.c:136:5",
      "Title": "Move iterator-dependent condition outside of the loop",
      "RelatedCodeList": {
        "Subtitle": "Iterator-dependent condition",
        "Code": [
          "        if (i >= 4096) {",
          "            if (i > 0) {"
        ]
      },
      "Suggestion": "Moving the iterator-dependent condition outside of the loop is a creative process. Depending on the type of condition, it can involve loop peeling, loop fission or loop unrolling",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR049"
    },
    {
      "Check": "PWR049",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/build/tests/test_suite_aes.cbc.c:271:9",
      "Title": "Move iterator-dependent condition outside of the loop",
      "RelatedCodeList": {
        "Subtitle": "Iterator-dependent condition",
        "Code": [
          "            if (i == 0) {"
        ]
      },
      "Suggestion": "Moving the iterator-dependent condition outside of the loop is a creative process. Depending on the type of condition, it can involve loop peeling, loop fission or loop unrolling",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR049"
    },
    {
      "Check": "PWR049",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/build/tests/test_suite_aes.cfb.c:271:9",
      "Title": "Move iterator-dependent condition outside of the loop",
      "RelatedCodeList": {
        "Subtitle": "Iterator-dependent condition",
        "Code": [
          "            if (i == 0) {"
        ]
      },
      "Suggestion": "Moving the iterator-dependent condition outside of the loop is a creative process. Depending on the type of condition, it can involve loop peeling, loop fission or loop unrolling",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR049"
    },
    {
      "Check": "PWR049",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/build/tests/test_suite_aes.ctr.c:271:9",
      "Title": "Move iterator-dependent condition outside of the loop",
      "RelatedCodeList": {
        "Subtitle": "Iterator-dependent condition",
        "Code": [
          "            if (i == 0) {"
        ]
      },
      "Suggestion": "Moving the iterator-dependent condition outside of the loop is a creative process. Depending on the type of condition, it can involve loop peeling, loop fission or loop unrolling",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR049"
    },
    {
      "Check": "PWR049",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/build/tests/test_suite_aes.ecb.c:271:9",
      "Title": "Move iterator-dependent condition outside of the loop",
      "RelatedCodeList": {
        "Subtitle": "Iterator-dependent condition",
        "Code": [
          "            if (i == 0) {"
        ]
      },
      "Suggestion": "Moving the iterator-dependent condition outside of the loop is a creative process. Depending on the type of condition, it can involve loop peeling, loop fission or loop unrolling",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR049"
    },
    {
      "Check": "PWR049",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/build/tests/test_suite_aes.ofb.c:271:9",
      "Title": "Move iterator-dependent condition outside of the loop",
      "RelatedCodeList": {
        "Subtitle": "Iterator-dependent condition",
        "Code": [
          "            if (i == 0) {"
        ]
      },
      "Suggestion": "Moving the iterator-dependent condition outside of the loop is a creative process. Depending on the type of condition, it can involve loop peeling, loop fission or loop unrolling",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR049"
    },
    {
      "Check": "PWR049",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/build/tests/test_suite_aes.rest.c:271:9",
      "Title": "Move iterator-dependent condition outside of the loop",
      "RelatedCodeList": {
        "Subtitle": "Iterator-dependent condition",
        "Code": [
          "            if (i == 0) {"
        ]
      },
      "Suggestion": "Moving the iterator-dependent condition outside of the loop is a creative process. Depending on the type of condition, it can involve loop peeling, loop fission or loop unrolling",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR049"
    },
    {
      "Check": "PWR049",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/build/tests/test_suite_aes.xts.c:271:9",
      "Title": "Move iterator-dependent condition outside of the loop",
      "RelatedCodeList": {
        "Subtitle": "Iterator-dependent condition",
        "Code": [
          "            if (i == 0) {"
        ]
      },
      "Suggestion": "Moving the iterator-dependent condition outside of the loop is a creative process. Depending on the type of condition, it can involve loop peeling, loop fission or loop unrolling",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR049"
    },
    {
      "Check": "PWR049",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/build/tests/test_suite_asn1parse.c:402:5",
      "Title": "Move iterator-dependent condition outside of the loop",
      "RelatedCodeList": {
        "Subtitle": "Iterator-dependent condition",
        "Code": [
          "        TEST_CALLOC(buf, buffer_size);"
        ]
      },
      "Suggestion": "Moving the iterator-dependent condition outside of the loop is a creative process. Depending on the type of condition, it can involve loop peeling, loop fission or loop unrolling",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR049"
    },
    {
      "Check": "PWR049",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/build/tests/test_suite_lmots.c:293:9",
      "Title": "Move iterator-dependent condition outside of the loop",
      "RelatedCodeList": {
        "Subtitle": "Iterator-dependent condition",
        "Code": [
          "            TEST_CALLOC(tmp_sig, size);"
        ]
      },
      "Suggestion": "Moving the iterator-dependent condition outside of the loop is a creative process. Depending on the type of condition, it can involve loop peeling, loop fission or loop unrolling",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR049"
    },
    {
      "Check": "PWR049",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/build/tests/test_suite_lms.c:293:9",
      "Title": "Move iterator-dependent condition outside of the loop",
      "RelatedCodeList": {
        "Subtitle": "Iterator-dependent condition",
        "Code": [
          "            TEST_CALLOC(tmp_sig, size);"
        ]
      },
      "Suggestion": "Moving the iterator-dependent condition outside of the loop is a creative process. Depending on the type of condition, it can involve loop peeling, loop fission or loop unrolling",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR049"
    },
    {
      "Check": "PWR049",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/build/tests/test_suite_psa_crypto_slot_management.c:1104:5",
      "Title": "Move iterator-dependent condition outside of the loop",
      "RelatedCodeList": {
        "Subtitle": "Iterator-dependent condition",
        "Code": [
          "        if (i < MBEDTLS_PSA_KEY_SLOT_COUNT) {"
        ]
      },
      "Suggestion": "Moving the iterator-dependent condition outside of the loop is a creative process. Depending on the type of condition, it can involve loop peeling, loop fission or loop unrolling",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR049"
    },
    {
      "Check": "PWR049",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/build/tests/test_suite_psa_crypto_util.c:204:5",
      "Title": "Move iterator-dependent condition outside of the loop",
      "RelatedCodeList": {
        "Subtitle": "Iterator-dependent condition",
        "Code": [
          "        TEST_CALLOC(tmp_buf, i);"
        ]
      },
      "Suggestion": "Moving the iterator-dependent condition outside of the loop is a creative process. Depending on the type of condition, it can involve loop peeling, loop fission or loop unrolling",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR049"
    },
    {
      "Check": "PWR049",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/build/tests/test_suite_psa_crypto_util.c:213:5",
      "Title": "Move iterator-dependent condition outside of the loop",
      "RelatedCodeList": {
        "Subtitle": "Iterator-dependent condition",
        "Code": [
          "        TEST_CALLOC(tmp_buf, i);"
        ]
      },
      "Suggestion": "Moving the iterator-dependent condition outside of the loop is a creative process. Depending on the type of condition, it can involve loop peeling, loop fission or loop unrolling",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR049"
    },
    {
      "Check": "PWR049",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/build/tests/test_suite_psa_crypto_util.c:246:5",
      "Title": "Move iterator-dependent condition outside of the loop",
      "RelatedCodeList": {
        "Subtitle": "Iterator-dependent condition",
        "Code": [
          "        TEST_CALLOC(in_buf, in_buf_len);"
        ]
      },
      "Suggestion": "Moving the iterator-dependent condition outside of the loop is a creative process. Depending on the type of condition, it can involve loop peeling, loop fission or loop unrolling",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR049"
    },
    {
      "Check": "PWR049",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/build/tests/test_suite_rsa.c:1750:5",
      "Title": "Move iterator-dependent condition outside of the loop",
      "RelatedCodeList": {
        "Subtitle": "Iterator-dependent condition",
        "Code": [
          "        TEST_CALLOC(buf, i);"
        ]
      },
      "Suggestion": "Moving the iterator-dependent condition outside of the loop is a creative process. Depending on the type of condition, it can involve loop peeling, loop fission or loop unrolling",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR049"
    },
    {
      "Check": "PWR049",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/build/tests/test_suite_rsa.c:1765:5",
      "Title": "Move iterator-dependent condition outside of the loop",
      "RelatedCodeList": {
        "Subtitle": "Iterator-dependent condition",
        "Code": [
          "        TEST_CALLOC(buf, i);"
        ]
      },
      "Suggestion": "Moving the iterator-dependent condition outside of the loop is a creative process. Depending on the type of condition, it can involve loop peeling, loop fission or loop unrolling",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR049"
    },
    {
      "Check": "PWR049",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/build/tests/test_suite_ssl.c:2629:5",
      "Title": "Move iterator-dependent condition outside of the loop",
      "RelatedCodeList": {
        "Subtitle": "Iterator-dependent condition",
        "Code": [
          "        TEST_CALLOC(buf, bad_len);"
        ]
      },
      "Suggestion": "Moving the iterator-dependent condition outside of the loop is a creative process. Depending on the type of condition, it can involve loop peeling, loop fission or loop unrolling",
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/PWR049"
    },
    {
      "Check": "RMK010",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/library/bignum_core.c:279:5",
      "Title": "The vectorization cost model states the loop is not a SIMD opportunity due to strided memory accesses in the loop body",
      "RelatedCodeList": null,
      "Suggestion": null,
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/RMK010"
    },
    {
      "Check": "RMK010",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/library/bignum_core.c:323:5",
      "Title": "The vectorization cost model states the loop is not a SIMD opportunity due to strided memory accesses in the loop body",
      "RelatedCodeList": null,
      "Suggestion": null,
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/RMK010"
    },
    {
      "Check": "RMK014",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/library/aes.c:425:5",
      "Title": "The vectorization cost model states the loop is not a SIMD opportunity due to unpredictable memory accesses in the loop body",
      "RelatedCodeList": null,
      "Suggestion": null,
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/RMK014"
    },
    {
      "Check": "RMK014",
      "Level": "L3",
      "Location": "/home/asada/Downloads/codee-2024.1.1-HackUDC/mbedtls/library/des.c:316:5",
      "Title": "The vectorization cost model states the loop is not a SIMD opportunity due to unpredictable memory accesses in the loop body",
      "RelatedCodeList": null,
      "Suggestion": null,
      "Auto-fix": [],
      "Documentation": "https://github.com/codee-com/open-catalog/tree/main/Checks/RMK014"
    }
  ]
}