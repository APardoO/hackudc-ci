!function(e,t){"object"==typeof exports&&"object"==typeof module?module.exports=t(require("angular-animate"),require("guanlecoja-ui"),require("buildbot-data-js")):"function"==typeof define&&define.amd?define("buildbot-grid-view",["angular-animate","guanlecoja-ui","buildbot-data-js"],t):"object"==typeof exports?exports["buildbot-grid-view"]=t(require("angular-animate"),require("guanlecoja-ui"),require("buildbot-data-js")):e["buildbot-grid-view"]=t(e["angular-animate"],e["guanlecoja-ui"],e["buildbot-data-js"])}("undefined"!=typeof self?self:this,(function(e,t,i){return function(e){var t={};function i(s){if(t[s])return t[s].exports;var a=t[s]={i:s,l:!1,exports:{}};return e[s].call(a.exports,a,a.exports,i),a.l=!0,a.exports}return i.m=e,i.c=t,i.d=function(e,t,s){i.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:s})},i.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},i.t=function(e,t){if(1&t&&(e=i(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var s=Object.create(null);if(i.r(s),Object.defineProperty(s,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var a in e)i.d(s,a,function(t){return e[t]}.bind(null,a));return s},i.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return i.d(t,"a",t),t},i.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},i.p="",i(i.s=0)}([function(e,t,i){"use strict";i.r(t);i(1),i(2),i(3);angular.module("grid_view",["ui.router","ui.bootstrap","ngAnimate","guanlecoja.ui","bbData"]).config(["$stateProvider","glMenuServiceProvider","bbSettingsServiceProvider",class GridState{constructor(e,t,s){t.addGroup({name:"grid",caption:"Grid View",icon:"cubes",order:4}),e.state({name:"grid",controller:"gridController",controllerAs:"C",template:i(4),url:"/grid?branch&tag&result",reloadOnSearch:!1,data:{group:"grid",caption:"Grid View"}}),s.addSettingsGroup({name:"Grid",caption:"Grid related settings",items:[{type:"bool",name:"fullChanges",caption:"Show avatar and time ago in change details",defaultValue:!1},{type:"bool",name:"leftToRight",caption:"Show most recent changes on the right",defaultValue:!1},{type:"integer",name:"revisionLimit",caption:"Maximum number of revisions to display",default_value:5},{type:"integer",name:"changeFetchLimit",caption:"Maximum number of changes to fetch",default_value:100},{type:"integer",name:"buildFetchLimit",caption:"Maximum number of builds to fetch",default_value:1e3}]})}}]),i(5)},function(t,i){t.exports=e},function(e,i){e.exports=t},function(e,t){e.exports=i},function(e,t){e.exports=window.T["grid_view/views/grid.html"]||'<div class="container grid"><div class="load-indicator" ng-hide="C.dataFetched()"><div class="spinner"><i class="fa fa-circle-o-notch fa-spin fa-2x"></i><p>loading</p></div></div><p ng-show="C.dataFetched() &amp;&amp; C.changes.length == 0">No changes. Grid View needs a changesource to be setup, and<a href="#/changes"> changes</a> to be in the system.</p><div class="form-inline" ng-show="C.dataReady()"><div class="form-group"><label>Branch</label><select class="form-control" ng-model="C.branch" ng-change="C.changeBranch(C.branch)" ng-options="br for br in branches | orderBy"><option value="">(all)</option></select></div><div class="form-group"><label>Results</label><select class="form-control" ng-model="C.result" ng-change="C.changeResult(C.result)" ng-options="r.code as r.text for r in C.results"><option value="">(all)</option></select></div></div><table class="table table-condensed table-striped table-hover" ng-show="C.dataReady()"><thead><tr><th>Builder</th><th><span ng-show="C.tags.length == 0">Tags</span><span ng-show="C.tags.length &lt; 5" ng-repeat="tag in C.tags"><span class="builder-tag label clickable label-success" ng-click="C.toggleTag(tag)">{{ tag }}</span></span><span ng-show="C.tags.length &gt;= 5"><span class="label label-success">{{ C.tags.length }} tags</span></span><span ng-show="C.tags.length &gt; 0"><span class="label label-danger clickable" ng-click="C.resetTags()" uib-tooltip="Reset tags filter">x</span></span></th><th class="change" ng-repeat="ch in changes track by ch.changeid"><changedetails change="ch" compact="!C.fullChanges"></changedetails></th></tr></thead><tbody><tr ng-repeat="b in builders | orderBy: \'name\'"><th><a ui-sref="builder({builder: b.builderid})">{{ b.name }}</a></th><td><span ng-repeat="tag in b.tags"><span class="builder-tag label clickable" ng-click="C.toggleTag(tag)" ng-class="C.isTagToggled(tag) ? \'label-success\': \'label-default\'">{{ tag }}</span></span></td><td ng-repeat="ch in changes track by ch.changeid"><a ng-repeat="build in b.builds[ch.changeid] | orderBy: \'buildid\'" ui-sref="build({builder: b.builderid, build: build.number})"><script type="text/ng-template" id="buildsummarytooltip"><buildsummary buildid="build.buildid" type="tooltip"></buildsummary><\/script><span class="badge-status" uib-tooltip-template="\'buildsummarytooltip\'" tooltip-class="buildsummarytooltipstyle" tooltip-placement="auto left-bottom" tooltip-popup-delay="400" tooltip-popup-close-delay="400" ng-class="results2class(build, \'pulse\')">{{ build.number }}</span></a></td></tr></tbody></table></div>'},function(e,t){angular.module("grid_view").controller("gridController",["$scope","$stateParams","$state","resultsService","dataService","bbSettingsService",class Grid{constructor(e,t,i,s,a,r){this.onChange=this.onChange.bind(this),this.changeBranch=this.changeBranch.bind(this),this.changeResult=this.changeResult.bind(this),this.toggleTag=this.toggleTag.bind(this),this.resetTags=this.resetTags.bind(this),this.refresh=this.refresh.bind(this),this.isBuilderDisplayed=this.isBuilderDisplayed.bind(this),this.isTagToggled=this.isTagToggled.bind(this),this.$scope=e,this.$stateParams=t,this.$state=i,_.mixin(this.$scope,s),this.data=a.open().closeOnDestroy(this.$scope),this.branch=this.$stateParams.branch,this.tags=null!=this.$stateParams.tag?this.$stateParams.tag:[],angular.isArray(this.tags)||(this.tags=[this.tags]),this.result=this.$stateParams.result,this.results=(()=>{var e=[];for(var t in s.resultsTexts){var i=s.resultsTexts[t];e.push({code:t+"",text:i})}return e})();var n=r.getSettingsGroup("Grid");this.revisionLimit=n.revisionLimit.value,this.changeFetchLimit=n.changeFetchLimit.value,this.buildFetchLimit=n.buildFetchLimit.value,this.fullChanges=n.fullChanges.value,this.leftToRight=n.leftToRight.value,this.buildsets=this.data.getBuildsets({limit:this.buildFetchLimit,order:"-bsid"}),this.changes=this.data.getChanges({limit:this.changeFetchLimit,order:"-changeid"}),this.builders=this.data.getBuilders(),this.buildrequests=this.data.getBuildrequests({limit:this.buildFetchLimit,order:"-buildrequestid"}),this.builds=this.data.getBuilds({limit:this.buildFetchLimit,order:"-buildrequestid"}),this.buildsets.onChange=this.onChange,this.changes.onChange=this.onChange,this.builders.onChange=this.onChange,this.buildrequests.change=this.onChange,this.builds.onChange=this.onChange}dataReady(){for(var e=0,t=[this.buildsets,this.changes,this.builders,this.buildrequests,this.builds];e<t.length;e++){var i=t[e];if(!(i.$resolved&&i.length>0))return!1}return!0}dataFetched(){for(var e=0,t=[this.buildsets,this.changes,this.builders,this.buildrequests,this.builds];e<t.length;e++){if(!t[e].$resolved)return!1}return!0}onChange(){var e,t,i,s,a,r;if(this.dataReady()){for(var n={},l={},h={},u=0,o=Array.from(this.changes);u<o.length;u++)h[(t=o[u]).sourcestamp.ssid]=t,t.buildsets={};for(var d=0,g=Array.from(this.buildsets);d<g.length;d++)e=g[d],null!=(s=h[_.last(e.sourcestamps).ssid])&&(s.buildsets[e.bsid]=e,null==s.branch&&(s.branch="master"),l[s.branch]=!0,this.branch&&s.branch!==this.branch||(n[s.changeid]=s));n=(()=>{for(var e=[],t=0,i=Object.keys(n||{});t<i.length;t++){var a=i[t];s=n[a],e.push(s)}return e})(),this.leftToRight?(n.sort((e,t)=>e.changeid-t.changeid),n.length>this.revisionLimit&&(n=n.slice(n.length-this.revisionLimit))):(n.sort((e,t)=>t.changeid-e.changeid),n.length>this.revisionLimit&&(n=n.slice(0,this.revisionLimit))),this.$scope.changes=n,this.$scope.branches=(()=>{var e=[];for(var t in l)e.push(t);return e})();for(var c={},b=0,p=Array.from(this.buildrequests);b<p.length;b++)(null!=c[(i=p[b]).buildsetid]?c[i.buildsetid]:c[i.buildsetid]=[]).push(i);for(var f={},m=0,v=Array.from(this.builds);m<v.length;m++){var y=v[m];(null!=f[y.buildrequestid]?f[y.buildrequestid]:f[y.buildrequestid]=[]).push(y)}for(var C=0,T=Array.from(this.builders);C<T.length;C++)(r=T[C]).builds={};for(var x={},j=0,w=Array.from(this.$scope.changes);j<w.length;j++){t=w[j];for(var $=0,q=Object.keys(t.buildsets||{});$<q.length;$++){var S=q[$];e=t.buildsets[S];var B=c[S];if(null!=B)for(var L=0,O=Array.from(B);L<O.length;L++){var P=null!=f[(i=O[L]).buildrequestid]?f[i.buildrequestid]:[];if(null!=this.result&&""!==this.result&&!isNaN(this.result))for(a=0;a<P.length;)parseInt(P[a].results)!==parseInt(this.result)?P.splice(a,1):a+=1;P.length>0&&(r=this.builders.get(P[0].builderid),this.isBuilderDisplayed(r)&&(x[r.builderid]=r,r.builds[t.changeid]=P))}}}return this.$scope.builders=(()=>{for(var e=[],t=0,i=Object.keys(x||{});t<i.length;t++)a=i[t],r=x[a],e.push(r);return e})()}}changeBranch(e){return this.branch=e,this.refresh()}changeResult(e){return this.result=e,this.refresh()}toggleTag(e){var t=this.tags.indexOf(e);return t<0?this.tags.push(e):this.tags.splice(t,1),this.refresh()}resetTags(){return this.tags=[],this.refresh()}refresh(){var e={branch:this.branch,tag:0===this.tags.length?void 0:this.tags,result:this.result};this.$state.transitionTo(this.$state.current,e,{notify:!1}),this.onChange()}isBuilderDisplayed(e){for(var t=0,i=Array.from(this.tags);t<i.length;t++){var s=i[t];if(e.tags.indexOf(s)<0)return!1}return!0}isTagToggled(e){return this.tags.indexOf(e)>=0}}])}])}));
//# sourceMappingURL=scripts.js.map